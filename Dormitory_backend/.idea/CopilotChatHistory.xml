<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotChatHistory">
    <option name="conversations">
      <list>
        <Conversation>
          <option name="createTime" value="1747381616870" />
          <option name="id" value="0196d80f88967cc98ebd2034182cd710" />
          <option name="title" value="/fix修复报错:&#10;java.lang.IllegalArgumentException: Unsupported class file major version 65&#10;&#9;at org.springframework.asm.ClassReader.&lt;init&gt;(ClassReader.java:199) ~[spring-core-5.3.15.jar:5.3.15]&#10;&#9;at org.springframework.asm.ClassReader.&lt;init&gt;(ClassReader.java:180) ~[spring-core-5.3.15.jar:5.3.15]&#10;&#9;at org.springframework.asm.ClassReader.&lt;init&gt;(ClassReader.java:166) ~[spring-core-5.3.15.jar:5.3.15]&#10;&#9;at org.springframework.asm.ClassReader.&lt;init&gt;(ClassReader.java:287) ~[spring-core-5.3.15.jar:5.3.15]&#10;&#9;at org.springframework.core.type.classreading.SimpleMetadataReader.getClassReader(SimpleMetadataReader.java:57) ~[spring-core-5.3.15.jar:5.3.15]&#10;&#9;... 27 common frames omitted&#10;代码上下文:&#10;```java&#10;/**&#10; * A parser to make a {@link ClassVisitor} visit a ClassFile structure, as defined in the Java&#10; * Virtual Machine Specification (JVMS). This class parses the ClassFile content and calls the&#10; * appropriate visit methods of a given {@link ClassVisitor} for each field, method and bytecode&#10; * instruction encountered.&#10; *&#10; * @see &lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html&quot;&gt;JVMS 4&lt;/a&gt;&#10; * @author Eric Bruneton&#10; * @author Eugene Kuleshov&#10; */&#10;public class ClassReader {&#10;&#10;    /**&#10;      * A flag to skip the Code attributes. If this flag is set the Code attributes are neither parsed&#10;      * nor visited.&#10;      */&#10;    public static final int SKIP_CODE = 1;&#10;&#10;    /**&#10;      * A flag to skip the SourceFile, SourceDebugExtension, LocalVariableTable,&#10;      * LocalVariableTypeTable, LineNumberTable and MethodParameters attributes. If this flag is set&#10;      * these attributes are neither parsed nor visited (i.e. {@link ClassVisitor#visitSource}, {@link&#10;      * MethodVisitor#visitLocalVariable}, {@link MethodVisitor#visitLineNumber} and {@link&#10;      * MethodVisitor#visitParameter} are not called).&#10;      */&#10;    public static final int SKIP_DEBUG = 2;&#10;&#10;    /**&#10;      * A flag to skip the StackMap and StackMapTable attributes. If this flag is set these attributes&#10;      * are neither parsed nor visited (i.e. {@link MethodVisitor#visitFrame} is not called). This flag&#10;      * is useful when the {@link ClassWriter#COMPUTE_FRAMES} option is used: it avoids visiting frames&#10;      * that will be ignored and recomputed from scratch.&#10;      */&#10;    public static final int SKIP_FRAMES = 4;&#10;&#10;    /**&#10;      * A flag to expand the stack map frames. By default stack map frames are visited in their&#10;      * original format (i.e. &quot;expanded&quot; for classes whose version is less than V1_6, and &quot;compressed&quot;&#10;      * for the other classes). If this flag is set, stack map frames are always visited in expanded&#10;      * format (this option adds a decompression/compression step in ClassReader and ClassWriter which&#10;      * degrades performance quite a lot).&#10;      */&#10;    public static final int EXPAND_FRAMES = 8;&#10;&#10;    /**&#10;      * A flag to expand the ASM specific instructions into an equivalent sequence of standard bytecode&#10;      * instructions. When resolving a forward jump it may happen that the signed 2 bytes offset&#10;      * reserved for it is not sufficient to store the bytecode offset. In this case the jump&#10;      * instruction is replaced with a temporary ASM specific instruction using an unsigned 2 bytes&#10;      * offset (see {@link Label#resolve}). This internal flag is used to re-read classes containing&#10;      * such instructions, in order to replace them with standard instructions. In addition, when this&#10;      * flag is used, goto_w and jsr_w are &lt;i&gt;not&lt;/i&gt; converted into goto and jsr, to make sure that&#10;      * infinite loops where a goto_w is replaced with a goto in ClassReader and converted back to a&#10;      * goto_w in ClassWriter cannot occur.&#10;      */&#10;    static final int EXPAND_ASM_INSNS = 256;&#10;&#10;    /** The maximum size of array to allocate. */&#10;    private static final int MAX_BUFFER_SIZE = 1024 * 1024;&#10;&#10;    /** The size of the temporary byte array used to read class input streams chunk by chunk. */&#10;    private static final int INPUT_STREAM_DATA_CHUNK_SIZE = 4096;&#10;&#10;    /**&#10;      * A byte array containing the JVMS ClassFile structure to be parsed.&#10;      *&#10;      * @deprecated Use {@link #readByte(int)} and the other read methods instead. This field will&#10;      *     eventually be deleted.&#10;      */&#10;    @Deprecated&#10;    // DontCheck(MemberName): can't be renamed (for backward binary compatibility).&#10;    public final byte[] b;&#10;&#10;    /** The offset in bytes of the ClassFile's access_flags field. */&#10;    public final int header;&#10;&#10;    /**&#10;      * A byte array containing the JVMS ClassFile structure to be parsed. &lt;i&gt;The content of this array&#10;      * must not be modified. This field is intended for {@link Attribute} sub classes, and is normally&#10;      * not needed by class visitors.&lt;/i&gt;&#10;      *&#10;      * &lt;p&gt;NOTE: the ClassFile structure can start at any offset within this array, i.e. it does not&#10;      * necessarily start at offset 0. Use {@link #getItem} and {@link #header} to get correct&#10;      * ClassFile element offsets within this byte array.&#10;      */&#10;    final byte[] classFileBuffer;&#10;&#10;    /**&#10;      * The offset in bytes, in {@link #classFileBuffer}, of each cp_info entry of the ClassFile's&#10;      * constant_pool array, &lt;i&gt;plus one&lt;/i&gt;. In other words, the offset of constant pool entry i is&#10;      * given by cpInfoOffsets[i] - 1, i.e. its cp_info's tag field is given by b[cpInfoOffsets[i] -&#10;      * 1].&#10;      */&#10;    private final int[] cpInfoOffsets;&#10;&#10;    /**&#10;      * The String objects corresponding to the CONSTANT_Utf8 constant pool items. This cache avoids&#10;      * multiple parsing of a given CONSTANT_Utf8 constant pool item.&#10;      */&#10;    private final String[] constantUtf8Values;&#10;&#10;    /**&#10;      * The ConstantDynamic objects corresponding to the CONSTANT_Dynamic constant pool items. This&#10;      * cache avoids multiple parsing of a given CONSTANT_Dynamic constant pool item.&#10;      */&#10;    private final ConstantDynamic[] constantDynamicValues;&#10;&#10;    /**&#10;      * The start offsets in {@link #classFileBuffer} of each element of the bootstrap_methods array&#10;      * (in the BootstrapMethods attribute).&#10;      *&#10;      * @see &lt;a href=&quot;https://docs.oracle.com/javase/specs/jvms/se9/html/jvms-4.html#jvms-4.7.23&quot;&gt;JVMS&#10;      *     4.7.23&lt;/a&gt;&#10;      */&#10;    private final int[] bootstrapMethodOffsets;&#10;&#10;    /**&#10;      * A conservative estimate of the maximum length of the strings contained in the constant pool of&#10;      * the class.&#10;      */&#10;    private final int maxStringLength;&#10;&#10;    // -----------------------------------------------------------------------------------------------&#10;    // Constructors&#10;    // -----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Constructs a new {@link ClassReader} object.&#10;      *&#10;      * @param classFile the JVMS ClassFile structure to be read.&#10;      */&#10;    public ClassReader(final byte[] classFile) {&#10;        this(classFile, 0, classFile.length);&#10;    }&#10;&#10;    /**&#10;      * Constructs a new {@link ClassReader} object.&#10;      *&#10;      * @param classFileBuffer a byte array containing the JVMS ClassFile structure to be read.&#10;      * @param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read.&#10;      * @param classFileLength the length in bytes of the ClassFile to be read.&#10;      */&#10;    public ClassReader(&#10;            final byte[] classFileBuffer,&#10;            final int classFileOffset,&#10;            final int classFileLength) { // NOPMD(UnusedFormalParameter) used for backward compatibility.&#10;        this(classFileBuffer, classFileOffset, /* checkClassVersion = */ true);&#10;    }&#10;&#10;    /**&#10;      * Constructs a new {@link ClassReader} object. &lt;i&gt;This internal constructor must not be exposed&#10;      * as a public API&lt;/i&gt;.&#10;      *&#10;      * @param classFileBuffer a byte array containing the JVMS ClassFile structure to be read.&#10;      * @param classFileOffset the offset in byteBuffer of the first byte of the ClassFile to be read.&#10;      * @param checkClassVersion whether to check the class version or not.&#10;      */&#10;    ClassReader(&#10;            final byte[] classFileBuffer, final int classFileOffset, final boolean checkClassVersion) {&#10;        this.classFileBuffer = classFileBuffer;&#10;        this.b = classFileBuffer;&#10;        // Check the class' major_version. This field is after the magic and minor_version fields, which&#10;        // use 4 and 2 bytes respectively.&#10;        if (checkClassVersion &amp;&amp; readShort(classFileOffset + 6) &gt; Opcodes.V21) {&#10;            throw new IllegalArgumentException(&#10;                    &quot;Unsupported class file major version &quot; + readShort(classFileOffset + 6));&#10;        }&#10;        // Create the constant pool arrays. The constant_pool_count field is after the magic,&#10;        // minor_version and major_version fields, which use 4, 2 and 2 bytes respectively.&#10;        int constantPoolCount = readUnsignedShort(classFileOffset + 8);&#10;        cpInfoOffsets = new int[constantPoolCount];&#10;        constantUtf8Values = new String[constantPoolCount];&#10;        // Compute the offset of each constant pool entry, as well as a conservative estimate of the&#10;        // maximum length of the constant pool strings. The first constant pool entry is after the&#10;        // magic, minor_version, major_version and constant_pool_count fields, which use 4, 2, 2 and 2&#10;        // bytes respectively.&#10;        int currentCpInfoIndex = 1;&#10;        int currentCpInfoOffset = classFileOffset + 10;&#10;        int currentMaxStringLength = 0;&#10;        boolean hasBootstrapMethods = false;&#10;        boolean hasConstantDynamic = false;&#10;        // The offset of the other entries depend on the total size of all the previous entries.&#10;        while (currentCpInfoIndex &lt; constantPoolCount) {&#10;            cpInfoOffsets[currentCpInfoIndex++] = currentCpInfoOffset + 1;&#10;            int cpInfoSize;&#10;            switch (classFileBuffer[currentCpInfoOffset]) {&#10;                case Symbol.CONSTANT_FIELDREF_TAG:&#10;                case Symbol.CONSTANT_METHODREF_TAG:&#10;                case Symbol.CONSTANT_INTERFACE_METHODREF_TAG:&#10;                case Symbol.CONSTANT_INTEGER_TAG:&#10;                case Symbol.CONSTANT_FLOAT_TAG:&#10;                case Symbol.CONSTANT_NAME_AND_TYPE_TAG:&#10;                    cpInfoSize = 5;&#10;                    break;&#10;                case Symbol.CONSTANT_DYNAMIC_TAG:&#10;                    cpInfoSize = 5;&#10;                    hasBootstrapMethods = true;&#10;                    hasConstantDynamic = true;&#10;                    break;&#10;                case Symbol.CONSTANT_INVOKE_DYNAMIC_TAG:&#10;                    cpInfoSize = 5;&#10;                    hasBootstrapMethods = true;&#10;                    break;&#10;                case Symbol.CONSTANT_LONG_TAG:&#10;                case Symbol.CONSTANT_DOUBLE_TAG:&#10;                    cpInfoSize = 9;&#10;                    currentCpInfoIndex++;&#10;                    break;&#10;                case Symbol.CONSTANT_UTF8_TAG:&#10;                    cpInfoSize = 3 + readUnsignedShort(currentCpInfoOffset + 1);&#10;                    if (cpInfoSize &gt; currentMaxStringLength) {&#10;                        // The size in bytes of this CONSTANT_Utf8 structure provides a conservative estimate&#10;                        // of the length in characters of the corresponding string, and is much cheaper to&#10;                        // compute than this exact length.&#10;                        currentMaxStringLength = cpInfoSize;&#10;                    }&#10;                    break;&#10;                case Symbol.CONSTANT_METHOD_HANDLE_TAG:&#10;                    cpInfoSize = 4;&#10;                    break;&#10;                case Symbol.CONSTANT_CLASS_TAG:&#10;                case Symbol.CONSTANT_STRING_TAG:&#10;                case Symbol.CONSTANT_METHOD_TYPE_TAG:&#10;                case Symbol.CONSTANT_PACKAGE_TAG:&#10;                case Symbol.CONSTANT_MODULE_TAG:&#10;                    cpInfoSize = 3;&#10;                    break;&#10;                default:&#10;                    throw new IllegalArgumentException();&#10;            }&#10;            currentCpInfoOffset += cpInfoSize;&#10;        }&#10;        maxStringLength = currentMaxStringLength;&#10;        // The Classfile's access_flags field is just after the last constant pool entry.&#10;        header = currentCpInfoOffset;&#10;&#10;        // Allocate the cache of ConstantDynamic values, if there is at least one.&#10;        constantDynamicValues = hasConstantDynamic ? new ConstantDynamic[constantPoolCount] : null;&#10;&#10;        // Read the BootstrapMethods attribute, if any (only get the offset of each method).&#10;        bootstrapMethodOffsets =&#10;                hasBootstrapMethods ? readBootstrapMethodsAttribute(currentMaxStringLength) : null;&#10;    }&#10;&#10;    /**&#10;      * Constructs a new {@link ClassReader} object.&#10;      *&#10;      * @param inputStream an input stream of the JVMS ClassFile structure to be read. This input&#10;      *     stream must contain nothing more than the ClassFile structure itself. It is read from its&#10;      *     current position to its end.&#10;      * @throws IOException if a problem occurs during reading.&#10;      */&#10;    public ClassReader(final InputStream inputStream) throws IOException {&#10;        this(readStream(inputStream, false));&#10;    }&#10;&#10;    /**&#10;      * Constructs a new {@link ClassReader} object.&#10;      *&#10;      * @param className the fully qualified name of the class to be read. The ClassFile structure is&#10;      *     retrieved with the current class loader's {@link ClassLoader#getSystemResourceAsStream}.&#10;      * @throws IOException if an exception occurs during reading.&#10;      */&#10;    public ClassReader(final String className) throws IOException {&#10;        this(&#10;                readStream(&#10;                        ClassLoader.getSystemResourceAsStream(className.replace('.', '/') + &quot;.class&quot;), true));&#10;    }&#10;&#10;    /**&#10;      * Reads the given input stream and returns its content as a byte array.&#10;      *&#10;      * @param inputStream an input stream.&#10;      * @param close true to close the input stream after reading.&#10;      * @return the content of the given input stream.&#10;      * @throws IOException if a problem occurs during reading.&#10;      */&#10;    @SuppressWarnings(&quot;PMD.UseTryWithResources&quot;)&#10;    private static byte[] readStream(final InputStream inputStream, final boolean close)&#10;            throws IOException {&#10;        if (inputStream == null) {&#10;            throw new IOException(&quot;Class not found&quot;);&#10;        }&#10;        int bufferSize = computeBufferSize(inputStream);&#10;        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {&#10;            byte[] data = new byte[bufferSize];&#10;            int bytesRead;&#10;            int readCount = 0;&#10;            while ((bytesRead = inputStream.read(data, 0, bufferSize)) != -1) {&#10;                outputStream.write(data, 0, bytesRead);&#10;                readCount++;&#10;            }&#10;            outputStream.flush();&#10;            if (readCount == 1) {&#10;                return data;&#10;            }&#10;            return outputStream.toByteArray();&#10;        } finally {&#10;            if (close) {&#10;                inputStream.close();&#10;            }&#10;        }&#10;    }&#10;&#10;    private static int computeBufferSize(final InputStream inputStream) throws IOException {&#10;        int expectedLength = inputStream.available();&#10;        /*&#10;          * Some implementations can return 0 while holding available data (e.g. new&#10;          * FileInputStream(&quot;/proc/a_file&quot;)). Also in some pathological cases a very small number might&#10;          * be returned, and in this case we use a default size.&#10;          */&#10;        if (expectedLength &lt; 256) {&#10;            return INPUT_STREAM_DATA_CHUNK_SIZE;&#10;        }&#10;        return Math.min(expectedLength, MAX_BUFFER_SIZE);&#10;    }&#10;&#10;    // -----------------------------------------------------------------------------------------------&#10;    // Accessors&#10;    // -----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Returns the class's access flags (see {@link Opcodes}). This value may not reflect Deprecated&#10;      * and Synthetic flags when bytecode is before 1.5 and those flags are represented by attributes.&#10;      *&#10;      * @return the class access flags.&#10;      * @see ClassVisitor#visit(int, int, String, String, String, String[])&#10;      */&#10;    public int getAccess() {&#10;        return readUnsignedShort(header);&#10;    }&#10;&#10;    /**&#10;      * Returns the internal name of the class (see {@link Type#getInternalName()}).&#10;      *&#10;      * @return the internal class name.&#10;      * @see ClassVisitor#visit(int, int, String, String, String, String[])&#10;      */&#10;    public String getClassName() {&#10;        // this_class is just after the access_flags field (using 2 bytes).&#10;        return readClass(header + 2, new char[maxStringLength]);&#10;    }&#10;&#10;    /**&#10;      * Returns the internal of name of the super class (see {@link Type#getInternalName()}). For&#10;      * interfaces, the super class is {@link Object}.&#10;      *&#10;      * @return the internal name of the super class, or {@literal null} for {@link Object} class.&#10;      * @see ClassVisitor#visit(int, int, String, String, String, String[])&#10;      */&#10;    public String getSuperName() {&#10;        // super_class is after the access_flags and this_class fields (2 bytes each).&#10;        return readClass(header + 4, new char[maxStringLength]);&#10;    }&#10;&#10;    /**&#10;      * Returns the internal names of the implemented interfaces (see {@link Type#getInternalName()}).&#10;      *&#10;      * @return the internal names of the directly implemented interfaces. Inherited implemented&#10;      *     interfaces are not returned.&#10;      * @see ClassVisitor#visit(int, int, String, String, String, String[])&#10;      */&#10;    public String[] getInterfaces() {&#10;        // interfaces_count is after the access_flags, this_class and super_class fields (2 bytes each).&#10;        int currentOffset = header + 6;&#10;        int interfacesCount = readUnsignedShort(currentOffset);&#10;        String[] interfaces = new String[interfacesCount];&#10;        if (interfacesCount &gt; 0) {&#10;            char[] charBuffer = new char[maxStringLength];&#10;            for (int i = 0; i &lt; interfacesCount; ++i) {&#10;                currentOffset += 2;&#10;                interfaces[i] = readClass(currentOffset, charBuffer);&#10;            }&#10;        }&#10;        return interfaces;&#10;    }&#10;&#10;    // -----------------------------------------------------------------------------------------------&#10;    // Public methods&#10;    // -----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this&#10;      * {@link ClassReader}.&#10;      *&#10;      * @param classVisitor the visitor that must visit this class.&#10;      * @param parsingOptions the options to use to parse this class. One or more of {@link&#10;      *     #SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.&#10;      */&#10;    public void accept(final ClassVisitor classVisitor, final int parsingOptions) {&#10;        accept(classVisitor, new Attribute[0], parsingOptions);&#10;    }&#10;&#10;    /**&#10;      * Makes the given visitor visit the JVMS ClassFile structure passed to the constructor of this&#10;      * {@link ClassReader}.&#10;      *&#10;      * @param classVisitor the visitor that must visit this class.&#10;      * @param attributePrototypes prototypes of the attributes that must be parsed during the visit of&#10;      *     the class. Any attribute whose type is not equal to the type of one the prototypes will not&#10;      *     be parsed: its byte array value will be passed unchanged to the ClassWriter. &lt;i&gt;This may&#10;      *     corrupt it if this value contains references to the constant pool, or has syntactic or&#10;      *     semantic links with a class element that has been transformed by a class adapter between&#10;      *     the reader and the writer&lt;/i&gt;.&#10;      * @param parsingOptions the options to use to parse this class. One or more of {@link&#10;      *     #SKIP_CODE}, {@link #SKIP_DEBUG}, {@link #SKIP_FRAMES} or {@link #EXPAND_FRAMES}.&#10;      */&#10;    public void accept(&#10;            final ClassVisitor classVisitor,&#10;            final Attribute[] attributePrototypes,&#10;            final int parsingOptions) {&#10;        Context context = new Context();&#10;        context.attributePrototypes = attributePrototypes;&#10;        context.parsingOptions = parsingOptions;&#10;        context.charBuffer = new char[maxStringLength];&#10;&#10;        // Read the access_flags, this_class, super_class, interface_count and interfaces fields.&#10;        char[] charBuffer = context.charBuffer;&#10;        int currentOffset = header;&#10;        int accessFlags = readUnsignedShort(currentOffset);&#10;        String thisClass = readClass(currentOffset + 2, charBuffer);&#10;        String superClass = readClass(currentOffset + 4, charBuffer);&#10;        String[] interfaces = new String[readUnsignedShort(currentOffset + 6)];&#10;        currentOffset += 8;&#10;        for (int i = 0; i &lt; interfaces.length; ++i) {&#10;            interfaces[i] = readClass(currentOffset, charBuffer);&#10;            currentOffset += 2;&#10;        }&#10;&#10;        // Read the class attributes (the variables are ordered as in Section 4.7 of the JVMS).&#10;        // Attribute offsets exclude the attribute_name_index and attribute_length fields.&#10;        // - The offset of the InnerClasses attribute, or 0.&#10;        int innerClassesOffset = 0;&#10;        // - The offset of the EnclosingMethod attribute, or 0.&#10;        int enclosingMethodOffset = 0;&#10;        // - The string corresponding to the Signature attribute, or null.&#10;        String signature = null;&#10;        // - The string corresponding to the SourceFile attribute, or null.&#10;        String sourceFile = null;&#10;        // - The string corresponding to the SourceDebugExtension attribute, or null.&#10;        String sourceDebugExtension = null;&#10;        // - The offset of the RuntimeVisibleAnnotations attribute, or 0.&#10;        int runtimeVisibleAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeInvisibleAnnotations attribute, or 0.&#10;        int runtimeInvisibleAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeVisibleTypeAnnotations attribute, or 0.&#10;        int runtimeVisibleTypeAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeInvisibleTypeAnnotations attribute, or 0.&#10;        int runtimeInvisibleTypeAnnotationsOffset = 0;&#10;        // - The offset of the Module attribute, or 0.&#10;        int moduleOffset = 0;&#10;        // - The offset of the ModulePackages attribute, or 0.&#10;        int modulePackagesOffset = 0;&#10;        // - The string corresponding to the ModuleMainClass attribute, or null.&#10;        String moduleMainClass = null;&#10;        // - The string corresponding to the NestHost attribute, or null.&#10;        String nestHostClass = null;&#10;        // - The offset of the NestMembers attribute, or 0.&#10;        int nestMembersOffset = 0;&#10;        // - The offset of the PermittedSubclasses attribute, or 0&#10;        int permittedSubclassesOffset = 0;&#10;        // - The offset of the Record attribute, or 0.&#10;        int recordOffset = 0;&#10;        // - The non standard attributes (linked with their {@link Attribute#nextAttribute} field).&#10;        //   This list in the &lt;i&gt;reverse order&lt;/i&gt; or their order in the ClassFile structure.&#10;        Attribute attributes = null;&#10;&#10;        int currentAttributeOffset = getFirstAttributeOffset();&#10;        for (int i = readUnsignedShort(currentAttributeOffset - 2); i &gt; 0; --i) {&#10;            // Read the attribute_info's attribute_name and attribute_length fields.&#10;            String attributeName = readUTF8(currentAttributeOffset, charBuffer);&#10;            int attributeLength = readInt(currentAttributeOffset + 2);&#10;            currentAttributeOffset += 6;&#10;            // The tests are sorted in decreasing frequency order (based on frequencies observed on&#10;            // typical classes).&#10;            if (Constants.SOURCE_FILE.equals(attributeName)) {&#10;                sourceFile = readUTF8(currentAttributeOffset, charBuffer);&#10;            } else if (Constants.INNER_CLASSES.equals(attributeName)) {&#10;                innerClassesOffset = currentAttributeOffset;&#10;            } else if (Constants.ENCLOSING_METHOD.equals(attributeName)) {&#10;                enclosingMethodOffset = currentAttributeOffset;&#10;            } else if (Constants.NEST_HOST.equals(attributeName)) {&#10;                nestHostClass = readClass(currentAttributeOffset, charBuffer);&#10;            } else if (Constants.NEST_MEMBERS.equals(attributeName)) {&#10;                nestMembersOffset = currentAttributeOffset;&#10;            } else if (Constants.PERMITTED_SUBCLASSES.equals(attributeName)) {&#10;                permittedSubclassesOffset = currentAttributeOffset;&#10;            } else if (Constants.SIGNATURE.equals(attributeName)) {&#10;                signature = readUTF8(currentAttributeOffset, charBuffer);&#10;            } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeVisibleAnnotationsOffset = currentAttributeOffset;&#10;            } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeVisibleTypeAnnotationsOffset = currentAttributeOffset;&#10;            } else if (Constants.DEPRECATED.equals(attributeName)) {&#10;                accessFlags |= Opcodes.ACC_DEPRECATED;&#10;            } else if (Constants.SYNTHETIC.equals(attributeName)) {&#10;                accessFlags |= Opcodes.ACC_SYNTHETIC;&#10;            } else if (Constants.SOURCE_DEBUG_EXTENSION.equals(attributeName)) {&#10;                if (attributeLength &gt; classFileBuffer.length - currentAttributeOffset) {&#10;                    throw new IllegalArgumentException();&#10;                }&#10;                sourceDebugExtension =&#10;                        readUtf(currentAttributeOffset, attributeLength, new char[attributeLength]);&#10;            } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeInvisibleAnnotationsOffset = currentAttributeOffset;&#10;            } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeInvisibleTypeAnnotationsOffset = currentAttributeOffset;&#10;            } else if (Constants.RECORD.equals(attributeName)) {&#10;                recordOffset = currentAttributeOffset;&#10;                accessFlags |= Opcodes.ACC_RECORD;&#10;            } else if (Constants.MODULE.equals(attributeName)) {&#10;                moduleOffset = currentAttributeOffset;&#10;            } else if (Constants.MODULE_MAIN_CLASS.equals(attributeName)) {&#10;                moduleMainClass = readClass(currentAttributeOffset, charBuffer);&#10;            } else if (Constants.MODULE_PACKAGES.equals(attributeName)) {&#10;                modulePackagesOffset = currentAttributeOffset;&#10;            } else if (!Constants.BOOTSTRAP_METHODS.equals(attributeName)) {&#10;                // The BootstrapMethods attribute is read in the constructor.&#10;                Attribute attribute =&#10;                        readAttribute(&#10;                                attributePrototypes,&#10;                                attributeName,&#10;                                currentAttributeOffset,&#10;                                attributeLength,&#10;                                charBuffer,&#10;                                -1,&#10;                                null);&#10;                attribute.nextAttribute = attributes;&#10;                attributes = attribute;&#10;            }&#10;            currentAttributeOffset += attributeLength;&#10;        }&#10;&#10;        // Visit the class declaration. The minor_version and major_version fields start 6 bytes before&#10;        // the first constant pool entry, which itself starts at cpInfoOffsets[1] - 1 (by definition).&#10;        classVisitor.visit(&#10;                readInt(cpInfoOffsets[1] - 7), accessFlags, thisClass, signature, superClass, interfaces);&#10;&#10;        // Visit the SourceFile and SourceDebugExtenstion attributes.&#10;        if ((parsingOptions &amp; SKIP_DEBUG) == 0&#10;                &amp;&amp; (sourceFile != null || sourceDebugExtension != null)) {&#10;            classVisitor.visitSource(sourceFile, sourceDebugExtension);&#10;        }&#10;&#10;        // Visit the Module, ModulePackages and ModuleMainClass attributes.&#10;        if (moduleOffset != 0) {&#10;            readModuleAttributes(&#10;                    classVisitor, context, moduleOffset, modulePackagesOffset, moduleMainClass);&#10;        }&#10;&#10;        // Visit the NestHost attribute.&#10;        if (nestHostClass != null) {&#10;            classVisitor.visitNestHost(nestHostClass);&#10;        }&#10;&#10;        // Visit the EnclosingMethod attribute.&#10;        if (enclosingMethodOffset != 0) {&#10;            String className = readClass(enclosingMethodOffset, charBuffer);&#10;            int methodIndex = readUnsignedShort(enclosingMethodOffset + 2);&#10;            String name = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex], charBuffer);&#10;            String type = methodIndex == 0 ? null : readUTF8(cpInfoOffsets[methodIndex] + 2, charBuffer);&#10;            classVisitor.visitOuterClass(className, name, type);&#10;        }&#10;&#10;        // Visit the RuntimeVisibleAnnotations attribute.&#10;        if (runtimeVisibleAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                classVisitor.visitAnnotation(annotationDescriptor, /* visible = */ true),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeInvisibleAnnotations attribute.&#10;        if (runtimeInvisibleAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                classVisitor.visitAnnotation(annotationDescriptor, /* visible = */ false),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeVisibleTypeAnnotations attribute.&#10;        if (runtimeVisibleTypeAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the target_type, target_info and target_path fields.&#10;                currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                classVisitor.visitTypeAnnotation(&#10;                                        context.currentTypeAnnotationTarget,&#10;                                        context.currentTypeAnnotationTargetPath,&#10;                                        annotationDescriptor,&#10;                                        /* visible = */ true),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeInvisibleTypeAnnotations attribute.&#10;        if (runtimeInvisibleTypeAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the target_type, target_info and target_path fields.&#10;                currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                classVisitor.visitTypeAnnotation(&#10;                                        context.currentTypeAnnotationTarget,&#10;                                        context.currentTypeAnnotationTargetPath,&#10;                                        annotationDescriptor,&#10;                                        /* visible = */ false),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the non standard attributes.&#10;        while (attributes != null) {&#10;            // Copy and reset the nextAttribute field so that it can also be used in ClassWriter.&#10;            Attribute nextAttribute = attributes.nextAttribute;&#10;            attributes.nextAttribute = null;&#10;            classVisitor.visitAttribute(attributes);&#10;            attributes = nextAttribute;&#10;        }&#10;&#10;        // Visit the NestedMembers attribute.&#10;        if (nestMembersOffset != 0) {&#10;            int numberOfNestMembers = readUnsignedShort(nestMembersOffset);&#10;            int currentNestMemberOffset = nestMembersOffset + 2;&#10;            while (numberOfNestMembers-- &gt; 0) {&#10;                classVisitor.visitNestMember(readClass(currentNestMemberOffset, charBuffer));&#10;                currentNestMemberOffset += 2;&#10;            }&#10;        }&#10;&#10;        // Visit the PermittedSubclasses attribute.&#10;        if (permittedSubclassesOffset != 0) {&#10;            int numberOfPermittedSubclasses = readUnsignedShort(permittedSubclassesOffset);&#10;            int currentPermittedSubclassesOffset = permittedSubclassesOffset + 2;&#10;            while (numberOfPermittedSubclasses-- &gt; 0) {&#10;                classVisitor.visitPermittedSubclass(&#10;                        readClass(currentPermittedSubclassesOffset, charBuffer));&#10;                currentPermittedSubclassesOffset += 2;&#10;            }&#10;        }&#10;&#10;        // Visit the InnerClasses attribute.&#10;        if (innerClassesOffset != 0) {&#10;            int numberOfClasses = readUnsignedShort(innerClassesOffset);&#10;            int currentClassesOffset = innerClassesOffset + 2;&#10;            while (numberOfClasses-- &gt; 0) {&#10;                classVisitor.visitInnerClass(&#10;                        readClass(currentClassesOffset, charBuffer),&#10;                        readClass(currentClassesOffset + 2, charBuffer),&#10;                        readUTF8(currentClassesOffset + 4, charBuffer),&#10;                        readUnsignedShort(currentClassesOffset + 6));&#10;                currentClassesOffset += 8;&#10;            }&#10;        }&#10;&#10;        // Visit Record components.&#10;        if (recordOffset != 0) {&#10;            int recordComponentsCount = readUnsignedShort(recordOffset);&#10;            recordOffset += 2;&#10;            while (recordComponentsCount-- &gt; 0) {&#10;                recordOffset = readRecordComponent(classVisitor, context, recordOffset);&#10;            }&#10;        }&#10;&#10;        // Visit the fields and methods.&#10;        int fieldsCount = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        while (fieldsCount-- &gt; 0) {&#10;            currentOffset = readField(classVisitor, context, currentOffset);&#10;        }&#10;        int methodsCount = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        while (methodsCount-- &gt; 0) {&#10;            currentOffset = readMethod(classVisitor, context, currentOffset);&#10;        }&#10;&#10;        // Visit the end of the class.&#10;        classVisitor.visitEnd();&#10;    }&#10;&#10;    // ----------------------------------------------------------------------------------------------&#10;    // Methods to parse modules, fields and methods&#10;    // ----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Reads the Module, ModulePackages and ModuleMainClass attributes and visit them.&#10;      *&#10;      * @param classVisitor the current class visitor&#10;      * @param context information about the class being parsed.&#10;      * @param moduleOffset the offset of the Module attribute (excluding the attribute_info's&#10;      *     attribute_name_index and attribute_length fields).&#10;      * @param modulePackagesOffset the offset of the ModulePackages attribute (excluding the&#10;      *     attribute_info's attribute_name_index and attribute_length fields), or 0.&#10;      * @param moduleMainClass the string corresponding to the ModuleMainClass attribute, or {@literal&#10;      *     null}.&#10;      */&#10;    private void readModuleAttributes(&#10;            final ClassVisitor classVisitor,&#10;            final Context context,&#10;            final int moduleOffset,&#10;            final int modulePackagesOffset,&#10;            final String moduleMainClass) {&#10;        char[] buffer = context.charBuffer;&#10;&#10;        // Read the module_name_index, module_flags and module_version_index fields and visit them.&#10;        int currentOffset = moduleOffset;&#10;        String moduleName = readModule(currentOffset, buffer);&#10;        int moduleFlags = readUnsignedShort(currentOffset + 2);&#10;        String moduleVersion = readUTF8(currentOffset + 4, buffer);&#10;        currentOffset += 6;&#10;        ModuleVisitor moduleVisitor = classVisitor.visitModule(moduleName, moduleFlags, moduleVersion);&#10;        if (moduleVisitor == null) {&#10;            return;&#10;        }&#10;&#10;        // Visit the ModuleMainClass attribute.&#10;        if (moduleMainClass != null) {&#10;            moduleVisitor.visitMainClass(moduleMainClass);&#10;        }&#10;&#10;        // Visit the ModulePackages attribute.&#10;        if (modulePackagesOffset != 0) {&#10;            int packageCount = readUnsignedShort(modulePackagesOffset);&#10;            int currentPackageOffset = modulePackagesOffset + 2;&#10;            while (packageCount-- &gt; 0) {&#10;                moduleVisitor.visitPackage(readPackage(currentPackageOffset, buffer));&#10;                currentPackageOffset += 2;&#10;            }&#10;        }&#10;&#10;        // Read the 'requires_count' and 'requires' fields.&#10;        int requiresCount = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        while (requiresCount-- &gt; 0) {&#10;            // Read the requires_index, requires_flags and requires_version fields and visit them.&#10;            String requires = readModule(currentOffset, buffer);&#10;            int requiresFlags = readUnsignedShort(currentOffset + 2);&#10;            String requiresVersion = readUTF8(currentOffset + 4, buffer);&#10;            currentOffset += 6;&#10;            moduleVisitor.visitRequire(requires, requiresFlags, requiresVersion);&#10;        }&#10;&#10;        // Read the 'exports_count' and 'exports' fields.&#10;        int exportsCount = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        while (exportsCount-- &gt; 0) {&#10;            // Read the exports_index, exports_flags, exports_to_count and exports_to_index fields&#10;            // and visit them.&#10;            String exports = readPackage(currentOffset, buffer);&#10;            int exportsFlags = readUnsignedShort(currentOffset + 2);&#10;            int exportsToCount = readUnsignedShort(currentOffset + 4);&#10;            currentOffset += 6;&#10;            String[] exportsTo = null;&#10;            if (exportsToCount != 0) {&#10;                exportsTo = new String[exportsToCount];&#10;                for (int i = 0; i &lt; exportsToCount; ++i) {&#10;                    exportsTo[i] = readModule(currentOffset, buffer);&#10;                    currentOffset += 2;&#10;                }&#10;            }&#10;            moduleVisitor.visitExport(exports, exportsFlags, exportsTo);&#10;        }&#10;&#10;        // Reads the 'opens_count' and 'opens' fields.&#10;        int opensCount = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        while (opensCount-- &gt; 0) {&#10;            // Read the opens_index, opens_flags, opens_to_count and opens_to_index fields and visit them.&#10;            String opens = readPackage(currentOffset, buffer);&#10;            int opensFlags = readUnsignedShort(currentOffset + 2);&#10;            int opensToCount = readUnsignedShort(currentOffset + 4);&#10;            currentOffset += 6;&#10;            String[] opensTo = null;&#10;            if (opensToCount != 0) {&#10;                opensTo = new String[opensToCount];&#10;                for (int i = 0; i &lt; opensToCount; ++i) {&#10;                    opensTo[i] = readModule(currentOffset, buffer);&#10;                    currentOffset += 2;&#10;                }&#10;            }&#10;            moduleVisitor.visitOpen(opens, opensFlags, opensTo);&#10;        }&#10;&#10;        // Read the 'uses_count' and 'uses' fields.&#10;        int usesCount = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        while (usesCount-- &gt; 0) {&#10;            moduleVisitor.visitUse(readClass(currentOffset, buffer));&#10;            currentOffset += 2;&#10;        }&#10;&#10;        // Read the 'provides_count' and 'provides' fields.&#10;        int providesCount = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        while (providesCount-- &gt; 0) {&#10;            // Read the provides_index, provides_with_count and provides_with_index fields and visit them.&#10;            String provides = readClass(currentOffset, buffer);&#10;            int providesWithCount = readUnsignedShort(currentOffset + 2);&#10;            currentOffset += 4;&#10;            String[] providesWith = new String[providesWithCount];&#10;            for (int i = 0; i &lt; providesWithCount; ++i) {&#10;                providesWith[i] = readClass(currentOffset, buffer);&#10;                currentOffset += 2;&#10;            }&#10;            moduleVisitor.visitProvide(provides, providesWith);&#10;        }&#10;&#10;        // Visit the end of the module attributes.&#10;        moduleVisitor.visitEnd();&#10;    }&#10;&#10;    /**&#10;      * Reads a record component and visit it.&#10;      *&#10;      * @param classVisitor the current class visitor&#10;      * @param context information about the class being parsed.&#10;      * @param recordComponentOffset the offset of the current record component.&#10;      * @return the offset of the first byte following the record component.&#10;      */&#10;    private int readRecordComponent(&#10;            final ClassVisitor classVisitor, final Context context, final int recordComponentOffset) {&#10;        char[] charBuffer = context.charBuffer;&#10;&#10;        int currentOffset = recordComponentOffset;&#10;        String name = readUTF8(currentOffset, charBuffer);&#10;        String descriptor = readUTF8(currentOffset + 2, charBuffer);&#10;        currentOffset += 4;&#10;&#10;        // Read the record component attributes (the variables are ordered as in Section 4.7 of the&#10;        // JVMS).&#10;&#10;        // Attribute offsets exclude the attribute_name_index and attribute_length fields.&#10;        // - The string corresponding to the Signature attribute, or null.&#10;        String signature = null;&#10;        // - The offset of the RuntimeVisibleAnnotations attribute, or 0.&#10;        int runtimeVisibleAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeInvisibleAnnotations attribute, or 0.&#10;        int runtimeInvisibleAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeVisibleTypeAnnotations attribute, or 0.&#10;        int runtimeVisibleTypeAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeInvisibleTypeAnnotations attribute, or 0.&#10;        int runtimeInvisibleTypeAnnotationsOffset = 0;&#10;        // - The non standard attributes (linked with their {@link Attribute#nextAttribute} field).&#10;        //   This list in the &lt;i&gt;reverse order&lt;/i&gt; or their order in the ClassFile structure.&#10;        Attribute attributes = null;&#10;&#10;        int attributesCount = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        while (attributesCount-- &gt; 0) {&#10;            // Read the attribute_info's attribute_name and attribute_length fields.&#10;            String attributeName = readUTF8(currentOffset, charBuffer);&#10;            int attributeLength = readInt(currentOffset + 2);&#10;            currentOffset += 6;&#10;            // The tests are sorted in decreasing frequency order (based on frequencies observed on&#10;            // typical classes).&#10;            if (Constants.SIGNATURE.equals(attributeName)) {&#10;                signature = readUTF8(currentOffset, charBuffer);&#10;            } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeVisibleAnnotationsOffset = currentOffset;&#10;            } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeVisibleTypeAnnotationsOffset = currentOffset;&#10;            } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeInvisibleAnnotationsOffset = currentOffset;&#10;            } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeInvisibleTypeAnnotationsOffset = currentOffset;&#10;            } else {&#10;                Attribute attribute =&#10;                        readAttribute(&#10;                                context.attributePrototypes,&#10;                                attributeName,&#10;                                currentOffset,&#10;                                attributeLength,&#10;                                charBuffer,&#10;                                -1,&#10;                                null);&#10;                attribute.nextAttribute = attributes;&#10;                attributes = attribute;&#10;            }&#10;            currentOffset += attributeLength;&#10;        }&#10;&#10;        RecordComponentVisitor recordComponentVisitor =&#10;                classVisitor.visitRecordComponent(name, descriptor, signature);&#10;        if (recordComponentVisitor == null) {&#10;            return currentOffset;&#10;        }&#10;&#10;        // Visit the RuntimeVisibleAnnotations attribute.&#10;        if (runtimeVisibleAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                recordComponentVisitor.visitAnnotation(annotationDescriptor, /* visible = */ true),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeInvisibleAnnotations attribute.&#10;        if (runtimeInvisibleAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                recordComponentVisitor.visitAnnotation(annotationDescriptor, /* visible = */ false),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeVisibleTypeAnnotations attribute.&#10;        if (runtimeVisibleTypeAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the target_type, target_info and target_path fields.&#10;                currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                recordComponentVisitor.visitTypeAnnotation(&#10;                                        context.currentTypeAnnotationTarget,&#10;                                        context.currentTypeAnnotationTargetPath,&#10;                                        annotationDescriptor,&#10;                                        /* visible = */ true),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeInvisibleTypeAnnotations attribute.&#10;        if (runtimeInvisibleTypeAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the target_type, target_info and target_path fields.&#10;                currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                recordComponentVisitor.visitTypeAnnotation(&#10;                                        context.currentTypeAnnotationTarget,&#10;                                        context.currentTypeAnnotationTargetPath,&#10;                                        annotationDescriptor,&#10;                                        /* visible = */ false),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the non standard attributes.&#10;        while (attributes != null) {&#10;            // Copy and reset the nextAttribute field so that it can also be used in FieldWriter.&#10;            Attribute nextAttribute = attributes.nextAttribute;&#10;            attributes.nextAttribute = null;&#10;            recordComponentVisitor.visitAttribute(attributes);&#10;            attributes = nextAttribute;&#10;        }&#10;&#10;        // Visit the end of the field.&#10;        recordComponentVisitor.visitEnd();&#10;        return currentOffset;&#10;    }&#10;&#10;    /**&#10;      * Reads a JVMS field_info structure and makes the given visitor visit it.&#10;      *&#10;      * @param classVisitor the visitor that must visit the field.&#10;      * @param context information about the class being parsed.&#10;      * @param fieldInfoOffset the start offset of the field_info structure.&#10;      * @return the offset of the first byte following the field_info structure.&#10;      */&#10;    private int readField(&#10;            final ClassVisitor classVisitor, final Context context, final int fieldInfoOffset) {&#10;        char[] charBuffer = context.charBuffer;&#10;&#10;        // Read the access_flags, name_index and descriptor_index fields.&#10;        int currentOffset = fieldInfoOffset;&#10;        int accessFlags = readUnsignedShort(currentOffset);&#10;        String name = readUTF8(currentOffset + 2, charBuffer);&#10;        String descriptor = readUTF8(currentOffset + 4, charBuffer);&#10;        currentOffset += 6;&#10;&#10;        // Read the field attributes (the variables are ordered as in Section 4.7 of the JVMS).&#10;        // Attribute offsets exclude the attribute_name_index and attribute_length fields.&#10;        // - The value corresponding to the ConstantValue attribute, or null.&#10;        Object constantValue = null;&#10;        // - The string corresponding to the Signature attribute, or null.&#10;        String signature = null;&#10;        // - The offset of the RuntimeVisibleAnnotations attribute, or 0.&#10;        int runtimeVisibleAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeInvisibleAnnotations attribute, or 0.&#10;        int runtimeInvisibleAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeVisibleTypeAnnotations attribute, or 0.&#10;        int runtimeVisibleTypeAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeInvisibleTypeAnnotations attribute, or 0.&#10;        int runtimeInvisibleTypeAnnotationsOffset = 0;&#10;        // - The non standard attributes (linked with their {@link Attribute#nextAttribute} field).&#10;        //   This list in the &lt;i&gt;reverse order&lt;/i&gt; or their order in the ClassFile structure.&#10;        Attribute attributes = null;&#10;&#10;        int attributesCount = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        while (attributesCount-- &gt; 0) {&#10;            // Read the attribute_info's attribute_name and attribute_length fields.&#10;            String attributeName = readUTF8(currentOffset, charBuffer);&#10;            int attributeLength = readInt(currentOffset + 2);&#10;            currentOffset += 6;&#10;            // The tests are sorted in decreasing frequency order (based on frequencies observed on&#10;            // typical classes).&#10;            if (Constants.CONSTANT_VALUE.equals(attributeName)) {&#10;                int constantvalueIndex = readUnsignedShort(currentOffset);&#10;                constantValue = constantvalueIndex == 0 ? null : readConst(constantvalueIndex, charBuffer);&#10;            } else if (Constants.SIGNATURE.equals(attributeName)) {&#10;                signature = readUTF8(currentOffset, charBuffer);&#10;            } else if (Constants.DEPRECATED.equals(attributeName)) {&#10;                accessFlags |= Opcodes.ACC_DEPRECATED;&#10;            } else if (Constants.SYNTHETIC.equals(attributeName)) {&#10;                accessFlags |= Opcodes.ACC_SYNTHETIC;&#10;            } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeVisibleAnnotationsOffset = currentOffset;&#10;            } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeVisibleTypeAnnotationsOffset = currentOffset;&#10;            } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeInvisibleAnnotationsOffset = currentOffset;&#10;            } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeInvisibleTypeAnnotationsOffset = currentOffset;&#10;            } else {&#10;                Attribute attribute =&#10;                        readAttribute(&#10;                                context.attributePrototypes,&#10;                                attributeName,&#10;                                currentOffset,&#10;                                attributeLength,&#10;                                charBuffer,&#10;                                -1,&#10;                                null);&#10;                attribute.nextAttribute = attributes;&#10;                attributes = attribute;&#10;            }&#10;            currentOffset += attributeLength;&#10;        }&#10;&#10;        // Visit the field declaration.&#10;        FieldVisitor fieldVisitor =&#10;                classVisitor.visitField(accessFlags, name, descriptor, signature, constantValue);&#10;        if (fieldVisitor == null) {&#10;            return currentOffset;&#10;        }&#10;&#10;        // Visit the RuntimeVisibleAnnotations attribute.&#10;        if (runtimeVisibleAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                fieldVisitor.visitAnnotation(annotationDescriptor, /* visible = */ true),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeInvisibleAnnotations attribute.&#10;        if (runtimeInvisibleAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                fieldVisitor.visitAnnotation(annotationDescriptor, /* visible = */ false),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeVisibleTypeAnnotations attribute.&#10;        if (runtimeVisibleTypeAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the target_type, target_info and target_path fields.&#10;                currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                fieldVisitor.visitTypeAnnotation(&#10;                                        context.currentTypeAnnotationTarget,&#10;                                        context.currentTypeAnnotationTargetPath,&#10;                                        annotationDescriptor,&#10;                                        /* visible = */ true),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeInvisibleTypeAnnotations attribute.&#10;        if (runtimeInvisibleTypeAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the target_type, target_info and target_path fields.&#10;                currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                fieldVisitor.visitTypeAnnotation(&#10;                                        context.currentTypeAnnotationTarget,&#10;                                        context.currentTypeAnnotationTargetPath,&#10;                                        annotationDescriptor,&#10;                                        /* visible = */ false),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the non standard attributes.&#10;        while (attributes != null) {&#10;            // Copy and reset the nextAttribute field so that it can also be used in FieldWriter.&#10;            Attribute nextAttribute = attributes.nextAttribute;&#10;            attributes.nextAttribute = null;&#10;            fieldVisitor.visitAttribute(attributes);&#10;            attributes = nextAttribute;&#10;        }&#10;&#10;        // Visit the end of the field.&#10;        fieldVisitor.visitEnd();&#10;        return currentOffset;&#10;    }&#10;&#10;    /**&#10;      * Reads a JVMS method_info structure and makes the given visitor visit it.&#10;      *&#10;      * @param classVisitor the visitor that must visit the method.&#10;      * @param context information about the class being parsed.&#10;      * @param methodInfoOffset the start offset of the method_info structure.&#10;      * @return the offset of the first byte following the method_info structure.&#10;      */&#10;    private int readMethod(&#10;            final ClassVisitor classVisitor, final Context context, final int methodInfoOffset) {&#10;        char[] charBuffer = context.charBuffer;&#10;&#10;        // Read the access_flags, name_index and descriptor_index fields.&#10;        int currentOffset = methodInfoOffset;&#10;        context.currentMethodAccessFlags = readUnsignedShort(currentOffset);&#10;        context.currentMethodName = readUTF8(currentOffset + 2, charBuffer);&#10;        context.currentMethodDescriptor = readUTF8(currentOffset + 4, charBuffer);&#10;        currentOffset += 6;&#10;&#10;        // Read the method attributes (the variables are ordered as in Section 4.7 of the JVMS).&#10;        // Attribute offsets exclude the attribute_name_index and attribute_length fields.&#10;        // - The offset of the Code attribute, or 0.&#10;        int codeOffset = 0;&#10;        // - The offset of the Exceptions attribute, or 0.&#10;        int exceptionsOffset = 0;&#10;        // - The strings corresponding to the Exceptions attribute, or null.&#10;        String[] exceptions = null;&#10;        // - Whether the method has a Synthetic attribute.&#10;        boolean synthetic = false;&#10;        // - The constant pool index contained in the Signature attribute, or 0.&#10;        int signatureIndex = 0;&#10;        // - The offset of the RuntimeVisibleAnnotations attribute, or 0.&#10;        int runtimeVisibleAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeInvisibleAnnotations attribute, or 0.&#10;        int runtimeInvisibleAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeVisibleParameterAnnotations attribute, or 0.&#10;        int runtimeVisibleParameterAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeInvisibleParameterAnnotations attribute, or 0.&#10;        int runtimeInvisibleParameterAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeVisibleTypeAnnotations attribute, or 0.&#10;        int runtimeVisibleTypeAnnotationsOffset = 0;&#10;        // - The offset of the RuntimeInvisibleTypeAnnotations attribute, or 0.&#10;        int runtimeInvisibleTypeAnnotationsOffset = 0;&#10;        // - The offset of the AnnotationDefault attribute, or 0.&#10;        int annotationDefaultOffset = 0;&#10;        // - The offset of the MethodParameters attribute, or 0.&#10;        int methodParametersOffset = 0;&#10;        // - The non standard attributes (linked with their {@link Attribute#nextAttribute} field).&#10;        //   This list in the &lt;i&gt;reverse order&lt;/i&gt; or their order in the ClassFile structure.&#10;        Attribute attributes = null;&#10;&#10;        int attributesCount = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        while (attributesCount-- &gt; 0) {&#10;            // Read the attribute_info's attribute_name and attribute_length fields.&#10;            String attributeName = readUTF8(currentOffset, charBuffer);&#10;            int attributeLength = readInt(currentOffset + 2);&#10;            currentOffset += 6;&#10;            // The tests are sorted in decreasing frequency order (based on frequencies observed on&#10;            // typical classes).&#10;            if (Constants.CODE.equals(attributeName)) {&#10;                if ((context.parsingOptions &amp; SKIP_CODE) == 0) {&#10;                    codeOffset = currentOffset;&#10;                }&#10;            } else if (Constants.EXCEPTIONS.equals(attributeName)) {&#10;                exceptionsOffset = currentOffset;&#10;                exceptions = new String[readUnsignedShort(exceptionsOffset)];&#10;                int currentExceptionOffset = exceptionsOffset + 2;&#10;                for (int i = 0; i &lt; exceptions.length; ++i) {&#10;                    exceptions[i] = readClass(currentExceptionOffset, charBuffer);&#10;                    currentExceptionOffset += 2;&#10;                }&#10;            } else if (Constants.SIGNATURE.equals(attributeName)) {&#10;                signatureIndex = readUnsignedShort(currentOffset);&#10;            } else if (Constants.DEPRECATED.equals(attributeName)) {&#10;                context.currentMethodAccessFlags |= Opcodes.ACC_DEPRECATED;&#10;            } else if (Constants.RUNTIME_VISIBLE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeVisibleAnnotationsOffset = currentOffset;&#10;            } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeVisibleTypeAnnotationsOffset = currentOffset;&#10;            } else if (Constants.ANNOTATION_DEFAULT.equals(attributeName)) {&#10;                annotationDefaultOffset = currentOffset;&#10;            } else if (Constants.SYNTHETIC.equals(attributeName)) {&#10;                synthetic = true;&#10;                context.currentMethodAccessFlags |= Opcodes.ACC_SYNTHETIC;&#10;            } else if (Constants.RUNTIME_INVISIBLE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeInvisibleAnnotationsOffset = currentOffset;&#10;            } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeInvisibleTypeAnnotationsOffset = currentOffset;&#10;            } else if (Constants.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeVisibleParameterAnnotationsOffset = currentOffset;&#10;            } else if (Constants.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS.equals(attributeName)) {&#10;                runtimeInvisibleParameterAnnotationsOffset = currentOffset;&#10;            } else if (Constants.METHOD_PARAMETERS.equals(attributeName)) {&#10;                methodParametersOffset = currentOffset;&#10;            } else {&#10;                Attribute attribute =&#10;                        readAttribute(&#10;                                context.attributePrototypes,&#10;                                attributeName,&#10;                                currentOffset,&#10;                                attributeLength,&#10;                                charBuffer,&#10;                                -1,&#10;                                null);&#10;                attribute.nextAttribute = attributes;&#10;                attributes = attribute;&#10;            }&#10;            currentOffset += attributeLength;&#10;        }&#10;&#10;        // Visit the method declaration.&#10;        MethodVisitor methodVisitor =&#10;                classVisitor.visitMethod(&#10;                        context.currentMethodAccessFlags,&#10;                        context.currentMethodName,&#10;                        context.currentMethodDescriptor,&#10;                        signatureIndex == 0 ? null : readUtf(signatureIndex, charBuffer),&#10;                        exceptions);&#10;        if (methodVisitor == null) {&#10;            return currentOffset;&#10;        }&#10;&#10;        // If the returned MethodVisitor is in fact a MethodWriter, it means there is no method&#10;        // adapter between the reader and the writer. In this case, it might be possible to copy&#10;        // the method attributes directly into the writer. If so, return early without visiting&#10;        // the content of these attributes.&#10;        if (methodVisitor instanceof MethodWriter) {&#10;            MethodWriter methodWriter = (MethodWriter) methodVisitor;&#10;            if (methodWriter.canCopyMethodAttributes(&#10;                    this,&#10;                    synthetic,&#10;                    (context.currentMethodAccessFlags &amp; Opcodes.ACC_DEPRECATED) != 0,&#10;                    readUnsignedShort(methodInfoOffset + 4),&#10;                    signatureIndex,&#10;                    exceptionsOffset)) {&#10;                methodWriter.setMethodAttributesSource(methodInfoOffset, currentOffset - methodInfoOffset);&#10;                return currentOffset;&#10;            }&#10;        }&#10;&#10;        // Visit the MethodParameters attribute.&#10;        if (methodParametersOffset != 0 &amp;&amp; (context.parsingOptions &amp; SKIP_DEBUG) == 0) {&#10;            int parametersCount = readByte(methodParametersOffset);&#10;            int currentParameterOffset = methodParametersOffset + 1;&#10;            while (parametersCount-- &gt; 0) {&#10;                // Read the name_index and access_flags fields and visit them.&#10;                methodVisitor.visitParameter(&#10;                        readUTF8(currentParameterOffset, charBuffer),&#10;                        readUnsignedShort(currentParameterOffset + 2));&#10;                currentParameterOffset += 4;&#10;            }&#10;        }&#10;&#10;        // Visit the AnnotationDefault attribute.&#10;        if (annotationDefaultOffset != 0) {&#10;            AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotationDefault();&#10;            readElementValue(annotationVisitor, annotationDefaultOffset, null, charBuffer);&#10;            if (annotationVisitor != null) {&#10;                annotationVisitor.visitEnd();&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeVisibleAnnotations attribute.&#10;        if (runtimeVisibleAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeVisibleAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeVisibleAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                methodVisitor.visitAnnotation(annotationDescriptor, /* visible = */ true),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeInvisibleAnnotations attribute.&#10;        if (runtimeInvisibleAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeInvisibleAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeInvisibleAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                methodVisitor.visitAnnotation(annotationDescriptor, /* visible = */ false),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeVisibleTypeAnnotations attribute.&#10;        if (runtimeVisibleTypeAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeVisibleTypeAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeVisibleTypeAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the target_type, target_info and target_path fields.&#10;                currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                methodVisitor.visitTypeAnnotation(&#10;                                        context.currentTypeAnnotationTarget,&#10;                                        context.currentTypeAnnotationTargetPath,&#10;                                        annotationDescriptor,&#10;                                        /* visible = */ true),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeInvisibleTypeAnnotations attribute.&#10;        if (runtimeInvisibleTypeAnnotationsOffset != 0) {&#10;            int numAnnotations = readUnsignedShort(runtimeInvisibleTypeAnnotationsOffset);&#10;            int currentAnnotationOffset = runtimeInvisibleTypeAnnotationsOffset + 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the target_type, target_info and target_path fields.&#10;                currentAnnotationOffset = readTypeAnnotationTarget(context, currentAnnotationOffset);&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                currentAnnotationOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentAnnotationOffset =&#10;                        readElementValues(&#10;                                methodVisitor.visitTypeAnnotation(&#10;                                        context.currentTypeAnnotationTarget,&#10;                                        context.currentTypeAnnotationTargetPath,&#10;                                        annotationDescriptor,&#10;                                        /* visible = */ false),&#10;                                currentAnnotationOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;&#10;        // Visit the RuntimeVisibleParameterAnnotations attribute.&#10;        if (runtimeVisibleParameterAnnotationsOffset != 0) {&#10;            readParameterAnnotations(&#10;                    methodVisitor, context, runtimeVisibleParameterAnnotationsOffset, /* visible = */ true);&#10;        }&#10;&#10;        // Visit the RuntimeInvisibleParameterAnnotations attribute.&#10;        if (runtimeInvisibleParameterAnnotationsOffset != 0) {&#10;            readParameterAnnotations(&#10;                    methodVisitor,&#10;                    context,&#10;                    runtimeInvisibleParameterAnnotationsOffset,&#10;                    /* visible = */ false);&#10;        }&#10;&#10;        // Visit the non standard attributes.&#10;        while (attributes != null) {&#10;            // Copy and reset the nextAttribute field so that it can also be used in MethodWriter.&#10;            Attribute nextAttribute = attributes.nextAttribute;&#10;            attributes.nextAttribute = null;&#10;            methodVisitor.visitAttribute(attributes);&#10;            attributes = nextAttribute;&#10;        }&#10;&#10;        // Visit the Code attribute.&#10;        if (codeOffset != 0) {&#10;            methodVisitor.visitCode();&#10;            readCode(methodVisitor, context, codeOffset);&#10;        }&#10;&#10;        // Visit the end of the method.&#10;        methodVisitor.visitEnd();&#10;        return currentOffset;&#10;    }&#10;&#10;    // ----------------------------------------------------------------------------------------------&#10;    // Methods to parse a Code attribute&#10;    // ----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Reads a JVMS 'Code' attribute and makes the given visitor visit it.&#10;      *&#10;      * @param methodVisitor the visitor that must visit the Code attribute.&#10;      * @param context information about the class being parsed.&#10;      * @param codeOffset the start offset in {@link #classFileBuffer} of the Code attribute, excluding&#10;      *     its attribute_name_index and attribute_length fields.&#10;      */&#10;    private void readCode(&#10;            final MethodVisitor methodVisitor, final Context context, final int codeOffset) {&#10;        int currentOffset = codeOffset;&#10;&#10;        // Read the max_stack, max_locals and code_length fields.&#10;        final byte[] classBuffer = classFileBuffer;&#10;        final char[] charBuffer = context.charBuffer;&#10;        final int maxStack = readUnsignedShort(currentOffset);&#10;        final int maxLocals = readUnsignedShort(currentOffset + 2);&#10;        final int codeLength = readInt(currentOffset + 4);&#10;        currentOffset += 8;&#10;        if (codeLength &gt; classFileBuffer.length - currentOffset) {&#10;            throw new IllegalArgumentException();&#10;        }&#10;&#10;        // Read the bytecode 'code' array to create a label for each referenced instruction.&#10;        final int bytecodeStartOffset = currentOffset;&#10;        final int bytecodeEndOffset = currentOffset + codeLength;&#10;        final Label[] labels = context.currentMethodLabels = new Label[codeLength + 1];&#10;        while (currentOffset &lt; bytecodeEndOffset) {&#10;            final int bytecodeOffset = currentOffset - bytecodeStartOffset;&#10;            final int opcode = classBuffer[currentOffset] &amp; 0xFF;&#10;            switch (opcode) {&#10;                case Opcodes.NOP:&#10;                case Opcodes.ACONST_NULL:&#10;                case Opcodes.ICONST_M1:&#10;                case Opcodes.ICONST_0:&#10;                case Opcodes.ICONST_1:&#10;                case Opcodes.ICONST_2:&#10;                case Opcodes.ICONST_3:&#10;                case Opcodes.ICONST_4:&#10;                case Opcodes.ICONST_5:&#10;                case Opcodes.LCONST_0:&#10;                case Opcodes.LCONST_1:&#10;                case Opcodes.FCONST_0:&#10;                case Opcodes.FCONST_1:&#10;                case Opcodes.FCONST_2:&#10;                case Opcodes.DCONST_0:&#10;                case Opcodes.DCONST_1:&#10;                case Opcodes.IALOAD:&#10;                case Opcodes.LALOAD:&#10;                case Opcodes.FALOAD:&#10;                case Opcodes.DALOAD:&#10;                case Opcodes.AALOAD:&#10;                case Opcodes.BALOAD:&#10;                case Opcodes.CALOAD:&#10;                case Opcodes.SALOAD:&#10;                case Opcodes.IASTORE:&#10;                case Opcodes.LASTORE:&#10;                case Opcodes.FASTORE:&#10;                case Opcodes.DASTORE:&#10;                case Opcodes.AASTORE:&#10;                case Opcodes.BASTORE:&#10;                case Opcodes.CASTORE:&#10;                case Opcodes.SASTORE:&#10;                case Opcodes.POP:&#10;                case Opcodes.POP2:&#10;                case Opcodes.DUP:&#10;                case Opcodes.DUP_X1:&#10;                case Opcodes.DUP_X2:&#10;                case Opcodes.DUP2:&#10;                case Opcodes.DUP2_X1:&#10;                case Opcodes.DUP2_X2:&#10;                case Opcodes.SWAP:&#10;                case Opcodes.IADD:&#10;                case Opcodes.LADD:&#10;                case Opcodes.FADD:&#10;                case Opcodes.DADD:&#10;                case Opcodes.ISUB:&#10;                case Opcodes.LSUB:&#10;                case Opcodes.FSUB:&#10;                case Opcodes.DSUB:&#10;                case Opcodes.IMUL:&#10;                case Opcodes.LMUL:&#10;                case Opcodes.FMUL:&#10;                case Opcodes.DMUL:&#10;                case Opcodes.IDIV:&#10;                case Opcodes.LDIV:&#10;                case Opcodes.FDIV:&#10;                case Opcodes.DDIV:&#10;                case Opcodes.IREM:&#10;                case Opcodes.LREM:&#10;                case Opcodes.FREM:&#10;                case Opcodes.DREM:&#10;                case Opcodes.INEG:&#10;                case Opcodes.LNEG:&#10;                case Opcodes.FNEG:&#10;                case Opcodes.DNEG:&#10;                case Opcodes.ISHL:&#10;                case Opcodes.LSHL:&#10;                case Opcodes.ISHR:&#10;                case Opcodes.LSHR:&#10;                case Opcodes.IUSHR:&#10;                case Opcodes.LUSHR:&#10;                case Opcodes.IAND:&#10;                case Opcodes.LAND:&#10;                case Opcodes.IOR:&#10;                case Opcodes.LOR:&#10;                case Opcodes.IXOR:&#10;                case Opcodes.LXOR:&#10;                case Opcodes.I2L:&#10;                case Opcodes.I2F:&#10;                case Opcodes.I2D:&#10;                case Opcodes.L2I:&#10;                case Opcodes.L2F:&#10;                case Opcodes.L2D:&#10;                case Opcodes.F2I:&#10;                case Opcodes.F2L:&#10;                case Opcodes.F2D:&#10;                case Opcodes.D2I:&#10;                case Opcodes.D2L:&#10;                case Opcodes.D2F:&#10;                case Opcodes.I2B:&#10;                case Opcodes.I2C:&#10;                case Opcodes.I2S:&#10;                case Opcodes.LCMP:&#10;                case Opcodes.FCMPL:&#10;                case Opcodes.FCMPG:&#10;                case Opcodes.DCMPL:&#10;                case Opcodes.DCMPG:&#10;                case Opcodes.IRETURN:&#10;                case Opcodes.LRETURN:&#10;                case Opcodes.FRETURN:&#10;                case Opcodes.DRETURN:&#10;                case Opcodes.ARETURN:&#10;                case Opcodes.RETURN:&#10;                case Opcodes.ARRAYLENGTH:&#10;                case Opcodes.ATHROW:&#10;                case Opcodes.MONITORENTER:&#10;                case Opcodes.MONITOREXIT:&#10;                case Constants.ILOAD_0:&#10;                case Constants.ILOAD_1:&#10;                case Constants.ILOAD_2:&#10;                case Constants.ILOAD_3:&#10;                case Constants.LLOAD_0:&#10;                case Constants.LLOAD_1:&#10;                case Constants.LLOAD_2:&#10;                case Constants.LLOAD_3:&#10;                case Constants.FLOAD_0:&#10;                case Constants.FLOAD_1:&#10;                case Constants.FLOAD_2:&#10;                case Constants.FLOAD_3:&#10;                case Constants.DLOAD_0:&#10;                case Constants.DLOAD_1:&#10;                case Constants.DLOAD_2:&#10;                case Constants.DLOAD_3:&#10;                case Constants.ALOAD_0:&#10;                case Constants.ALOAD_1:&#10;                case Constants.ALOAD_2:&#10;                case Constants.ALOAD_3:&#10;                case Constants.ISTORE_0:&#10;                case Constants.ISTORE_1:&#10;                case Constants.ISTORE_2:&#10;                case Constants.ISTORE_3:&#10;                case Constants.LSTORE_0:&#10;                case Constants.LSTORE_1:&#10;                case Constants.LSTORE_2:&#10;                case Constants.LSTORE_3:&#10;                case Constants.FSTORE_0:&#10;                case Constants.FSTORE_1:&#10;                case Constants.FSTORE_2:&#10;                case Constants.FSTORE_3:&#10;                case Constants.DSTORE_0:&#10;                case Constants.DSTORE_1:&#10;                case Constants.DSTORE_2:&#10;                case Constants.DSTORE_3:&#10;                case Constants.ASTORE_0:&#10;                case Constants.ASTORE_1:&#10;                case Constants.ASTORE_2:&#10;                case Constants.ASTORE_3:&#10;                    currentOffset += 1;&#10;                    break;&#10;                case Opcodes.IFEQ:&#10;                case Opcodes.IFNE:&#10;                case Opcodes.IFLT:&#10;                case Opcodes.IFGE:&#10;                case Opcodes.IFGT:&#10;                case Opcodes.IFLE:&#10;                case Opcodes.IF_ICMPEQ:&#10;                case Opcodes.IF_ICMPNE:&#10;                case Opcodes.IF_ICMPLT:&#10;                case Opcodes.IF_ICMPGE:&#10;                case Opcodes.IF_ICMPGT:&#10;                case Opcodes.IF_ICMPLE:&#10;                case Opcodes.IF_ACMPEQ:&#10;                case Opcodes.IF_ACMPNE:&#10;                case Opcodes.GOTO:&#10;                case Opcodes.JSR:&#10;                case Opcodes.IFNULL:&#10;                case Opcodes.IFNONNULL:&#10;                    createLabel(bytecodeOffset + readShort(currentOffset + 1), labels);&#10;                    currentOffset += 3;&#10;                    break;&#10;                case Constants.ASM_IFEQ:&#10;                case Constants.ASM_IFNE:&#10;                case Constants.ASM_IFLT:&#10;                case Constants.ASM_IFGE:&#10;                case Constants.ASM_IFGT:&#10;                case Constants.ASM_IFLE:&#10;                case Constants.ASM_IF_ICMPEQ:&#10;                case Constants.ASM_IF_ICMPNE:&#10;                case Constants.ASM_IF_ICMPLT:&#10;                case Constants.ASM_IF_ICMPGE:&#10;                case Constants.ASM_IF_ICMPGT:&#10;                case Constants.ASM_IF_ICMPLE:&#10;                case Constants.ASM_IF_ACMPEQ:&#10;                case Constants.ASM_IF_ACMPNE:&#10;                case Constants.ASM_GOTO:&#10;                case Constants.ASM_JSR:&#10;                case Constants.ASM_IFNULL:&#10;                case Constants.ASM_IFNONNULL:&#10;                    createLabel(bytecodeOffset + readUnsignedShort(currentOffset + 1), labels);&#10;                    currentOffset += 3;&#10;                    break;&#10;                case Constants.GOTO_W:&#10;                case Constants.JSR_W:&#10;                case Constants.ASM_GOTO_W:&#10;                    createLabel(bytecodeOffset + readInt(currentOffset + 1), labels);&#10;                    currentOffset += 5;&#10;                    break;&#10;                case Constants.WIDE:&#10;                    switch (classBuffer[currentOffset + 1] &amp; 0xFF) {&#10;                        case Opcodes.ILOAD:&#10;                        case Opcodes.FLOAD:&#10;                        case Opcodes.ALOAD:&#10;                        case Opcodes.LLOAD:&#10;                        case Opcodes.DLOAD:&#10;                        case Opcodes.ISTORE:&#10;                        case Opcodes.FSTORE:&#10;                        case Opcodes.ASTORE:&#10;                        case Opcodes.LSTORE:&#10;                        case Opcodes.DSTORE:&#10;                        case Opcodes.RET:&#10;                            currentOffset += 4;&#10;                            break;&#10;                        case Opcodes.IINC:&#10;                            currentOffset += 6;&#10;                            break;&#10;                        default:&#10;                            throw new IllegalArgumentException();&#10;                    }&#10;                    break;&#10;                case Opcodes.TABLESWITCH:&#10;                    // Skip 0 to 3 padding bytes.&#10;                    currentOffset += 4 - (bytecodeOffset &amp; 3);&#10;                    // Read the default label and the number of table entries.&#10;                    createLabel(bytecodeOffset + readInt(currentOffset), labels);&#10;                    int numTableEntries = readInt(currentOffset + 8) - readInt(currentOffset + 4) + 1;&#10;                    currentOffset += 12;&#10;                    // Read the table labels.&#10;                    while (numTableEntries-- &gt; 0) {&#10;                        createLabel(bytecodeOffset + readInt(currentOffset), labels);&#10;                        currentOffset += 4;&#10;                    }&#10;                    break;&#10;                case Opcodes.LOOKUPSWITCH:&#10;                    // Skip 0 to 3 padding bytes.&#10;                    currentOffset += 4 - (bytecodeOffset &amp; 3);&#10;                    // Read the default label and the number of switch cases.&#10;                    createLabel(bytecodeOffset + readInt(currentOffset), labels);&#10;                    int numSwitchCases = readInt(currentOffset + 4);&#10;                    currentOffset += 8;&#10;                    // Read the switch labels.&#10;                    while (numSwitchCases-- &gt; 0) {&#10;                        createLabel(bytecodeOffset + readInt(currentOffset + 4), labels);&#10;                        currentOffset += 8;&#10;                    }&#10;                    break;&#10;                case Opcodes.ILOAD:&#10;                case Opcodes.LLOAD:&#10;                case Opcodes.FLOAD:&#10;                case Opcodes.DLOAD:&#10;                case Opcodes.ALOAD:&#10;                case Opcodes.ISTORE:&#10;                case Opcodes.LSTORE:&#10;                case Opcodes.FSTORE:&#10;                case Opcodes.DSTORE:&#10;                case Opcodes.ASTORE:&#10;                case Opcodes.RET:&#10;                case Opcodes.BIPUSH:&#10;                case Opcodes.NEWARRAY:&#10;                case Opcodes.LDC:&#10;                    currentOffset += 2;&#10;                    break;&#10;                case Opcodes.SIPUSH:&#10;                case Constants.LDC_W:&#10;                case Constants.LDC2_W:&#10;                case Opcodes.GETSTATIC:&#10;                case Opcodes.PUTSTATIC:&#10;                case Opcodes.GETFIELD:&#10;                case Opcodes.PUTFIELD:&#10;                case Opcodes.INVOKEVIRTUAL:&#10;                case Opcodes.INVOKESPECIAL:&#10;                case Opcodes.INVOKESTATIC:&#10;                case Opcodes.NEW:&#10;                case Opcodes.ANEWARRAY:&#10;                case Opcodes.CHECKCAST:&#10;                case Opcodes.INSTANCEOF:&#10;                case Opcodes.IINC:&#10;                    currentOffset += 3;&#10;                    break;&#10;                case Opcodes.INVOKEINTERFACE:&#10;                case Opcodes.INVOKEDYNAMIC:&#10;                    currentOffset += 5;&#10;                    break;&#10;                case Opcodes.MULTIANEWARRAY:&#10;                    currentOffset += 4;&#10;                    break;&#10;                default:&#10;                    throw new IllegalArgumentException();&#10;            }&#10;        }&#10;&#10;        // Read the 'exception_table_length' and 'exception_table' field to create a label for each&#10;        // referenced instruction, and to make methodVisitor visit the corresponding try catch blocks.&#10;        int exceptionTableLength = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        while (exceptionTableLength-- &gt; 0) {&#10;            Label start = createLabel(readUnsignedShort(currentOffset), labels);&#10;            Label end = createLabel(readUnsignedShort(currentOffset + 2), labels);&#10;            Label handler = createLabel(readUnsignedShort(currentOffset + 4), labels);&#10;            String catchType = readUTF8(cpInfoOffsets[readUnsignedShort(currentOffset + 6)], charBuffer);&#10;            currentOffset += 8;&#10;            methodVisitor.visitTryCatchBlock(start, end, handler, catchType);&#10;        }&#10;&#10;        // Read the Code attributes to create a label for each referenced instruction (the variables&#10;        // are ordered as in Section 4.7 of the JVMS). Attribute offsets exclude the&#10;        // attribute_name_index and attribute_length fields.&#10;        // - The offset of the current 'stack_map_frame' in the StackMap[Table] attribute, or 0.&#10;        // Initially, this is the offset of the first 'stack_map_frame' entry. Then this offset is&#10;        // updated after each stack_map_frame is read.&#10;        int stackMapFrameOffset = 0;&#10;        // - The end offset of the StackMap[Table] attribute, or 0.&#10;        int stackMapTableEndOffset = 0;&#10;        // - Whether the stack map frames are compressed (i.e. in a StackMapTable) or not.&#10;        boolean compressedFrames = true;&#10;        // - The offset of the LocalVariableTable attribute, or 0.&#10;        int localVariableTableOffset = 0;&#10;        // - The offset of the LocalVariableTypeTable attribute, or 0.&#10;        int localVariableTypeTableOffset = 0;&#10;        // - The offset of each 'type_annotation' entry in the RuntimeVisibleTypeAnnotations&#10;        // attribute, or null.&#10;        int[] visibleTypeAnnotationOffsets = null;&#10;        // - The offset of each 'type_annotation' entry in the RuntimeInvisibleTypeAnnotations&#10;        // attribute, or null.&#10;        int[] invisibleTypeAnnotationOffsets = null;&#10;        // - The non standard attributes (linked with their {@link Attribute#nextAttribute} field).&#10;        //   This list in the &lt;i&gt;reverse order&lt;/i&gt; or their order in the ClassFile structure.&#10;        Attribute attributes = null;&#10;&#10;        int attributesCount = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        while (attributesCount-- &gt; 0) {&#10;            // Read the attribute_info's attribute_name and attribute_length fields.&#10;            String attributeName = readUTF8(currentOffset, charBuffer);&#10;            int attributeLength = readInt(currentOffset + 2);&#10;            currentOffset += 6;&#10;            if (Constants.LOCAL_VARIABLE_TABLE.equals(attributeName)) {&#10;                if ((context.parsingOptions &amp; SKIP_DEBUG) == 0) {&#10;                    localVariableTableOffset = currentOffset;&#10;                    // Parse the attribute to find the corresponding (debug only) labels.&#10;                    int currentLocalVariableTableOffset = currentOffset;&#10;                    int localVariableTableLength = readUnsignedShort(currentLocalVariableTableOffset);&#10;                    currentLocalVariableTableOffset += 2;&#10;                    while (localVariableTableLength-- &gt; 0) {&#10;                        int startPc = readUnsignedShort(currentLocalVariableTableOffset);&#10;                        createDebugLabel(startPc, labels);&#10;                        int length = readUnsignedShort(currentLocalVariableTableOffset + 2);&#10;                        createDebugLabel(startPc + length, labels);&#10;                        // Skip the name_index, descriptor_index and index fields (2 bytes each).&#10;                        currentLocalVariableTableOffset += 10;&#10;                    }&#10;                }&#10;            } else if (Constants.LOCAL_VARIABLE_TYPE_TABLE.equals(attributeName)) {&#10;                localVariableTypeTableOffset = currentOffset;&#10;                // Here we do not extract the labels corresponding to the attribute content. We assume they&#10;                // are the same or a subset of those of the LocalVariableTable attribute.&#10;            } else if (Constants.LINE_NUMBER_TABLE.equals(attributeName)) {&#10;                if ((context.parsingOptions &amp; SKIP_DEBUG) == 0) {&#10;                    // Parse the attribute to find the corresponding (debug only) labels.&#10;                    int currentLineNumberTableOffset = currentOffset;&#10;                    int lineNumberTableLength = readUnsignedShort(currentLineNumberTableOffset);&#10;                    currentLineNumberTableOffset += 2;&#10;                    while (lineNumberTableLength-- &gt; 0) {&#10;                        int startPc = readUnsignedShort(currentLineNumberTableOffset);&#10;                        int lineNumber = readUnsignedShort(currentLineNumberTableOffset + 2);&#10;                        currentLineNumberTableOffset += 4;&#10;                        createDebugLabel(startPc, labels);&#10;                        labels[startPc].addLineNumber(lineNumber);&#10;                    }&#10;                }&#10;            } else if (Constants.RUNTIME_VISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {&#10;                visibleTypeAnnotationOffsets =&#10;                        readTypeAnnotations(methodVisitor, context, currentOffset, /* visible = */ true);&#10;                // Here we do not extract the labels corresponding to the attribute content. This would&#10;                // require a full parsing of the attribute, which would need to be repeated when parsing&#10;                // the bytecode instructions (see below). Instead, the content of the attribute is read one&#10;                // type annotation at a time (i.e. after a type annotation has been visited, the next type&#10;                // annotation is read), and the labels it contains are also extracted one annotation at a&#10;                // time. This assumes that type annotations are ordered by increasing bytecode offset.&#10;            } else if (Constants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.equals(attributeName)) {&#10;                invisibleTypeAnnotationOffsets =&#10;                        readTypeAnnotations(methodVisitor, context, currentOffset, /* visible = */ false);&#10;                // Same comment as above for the RuntimeVisibleTypeAnnotations attribute.&#10;            } else if (Constants.STACK_MAP_TABLE.equals(attributeName)) {&#10;                if ((context.parsingOptions &amp; SKIP_FRAMES) == 0) {&#10;                    stackMapFrameOffset = currentOffset + 2;&#10;                    stackMapTableEndOffset = currentOffset + attributeLength;&#10;                }&#10;                // Here we do not extract the labels corresponding to the attribute content. This would&#10;                // require a full parsing of the attribute, which would need to be repeated when parsing&#10;                // the bytecode instructions (see below). Instead, the content of the attribute is read one&#10;                // frame at a time (i.e. after a frame has been visited, the next frame is read), and the&#10;                // labels it contains are also extracted one frame at a time. Thanks to the ordering of&#10;                // frames, having only a &quot;one frame lookahead&quot; is not a problem, i.e. it is not possible to&#10;                // see an offset smaller than the offset of the current instruction and for which no Label&#10;                // exist. Except for UNINITIALIZED type offsets. We solve this by parsing the stack map&#10;                // table without a full decoding (see below).&#10;            } else if (&quot;StackMap&quot;.equals(attributeName)) {&#10;                if ((context.parsingOptions &amp; SKIP_FRAMES) == 0) {&#10;                    stackMapFrameOffset = currentOffset + 2;&#10;                    stackMapTableEndOffset = currentOffset + attributeLength;&#10;                    compressedFrames = false;&#10;                }&#10;                // IMPORTANT! Here we assume that the frames are ordered, as in the StackMapTable attribute,&#10;                // although this is not guaranteed by the attribute format. This allows an incremental&#10;                // extraction of the labels corresponding to this attribute (see the comment above for the&#10;                // StackMapTable attribute).&#10;            } else {&#10;                Attribute attribute =&#10;                        readAttribute(&#10;                                context.attributePrototypes,&#10;                                attributeName,&#10;                                currentOffset,&#10;                                attributeLength,&#10;                                charBuffer,&#10;                                codeOffset,&#10;                                labels);&#10;                attribute.nextAttribute = attributes;&#10;                attributes = attribute;&#10;            }&#10;            currentOffset += attributeLength;&#10;        }&#10;&#10;        // Initialize the context fields related to stack map frames, and generate the first&#10;        // (implicit) stack map frame, if needed.&#10;        final boolean expandFrames = (context.parsingOptions &amp; EXPAND_FRAMES) != 0;&#10;        if (stackMapFrameOffset != 0) {&#10;            // The bytecode offset of the first explicit frame is not offset_delta + 1 but only&#10;            // offset_delta. Setting the implicit frame offset to -1 allows us to use of the&#10;            // &quot;offset_delta + 1&quot; rule in all cases.&#10;            context.currentFrameOffset = -1;&#10;            context.currentFrameType = 0;&#10;            context.currentFrameLocalCount = 0;&#10;            context.currentFrameLocalCountDelta = 0;&#10;            context.currentFrameLocalTypes = new Object[maxLocals];&#10;            context.currentFrameStackCount = 0;&#10;            context.currentFrameStackTypes = new Object[maxStack];&#10;            if (expandFrames) {&#10;                computeImplicitFrame(context);&#10;            }&#10;            // Find the labels for UNINITIALIZED frame types. Instead of decoding each element of the&#10;            // stack map table, we look for 3 consecutive bytes that &quot;look like&quot; an UNINITIALIZED type&#10;            // (tag ITEM_Uninitialized, offset within bytecode bounds, NEW instruction at this offset).&#10;            // We may find false positives (i.e. not real UNINITIALIZED types), but this should be rare,&#10;            // and the only consequence will be the creation of an unneeded label. This is better than&#10;            // creating a label for each NEW instruction, and faster than fully decoding the whole stack&#10;            // map table.&#10;            for (int offset = stackMapFrameOffset; offset &lt; stackMapTableEndOffset - 2; ++offset) {&#10;                if (classBuffer[offset] == Frame.ITEM_UNINITIALIZED) {&#10;                    int potentialBytecodeOffset = readUnsignedShort(offset + 1);&#10;                    if (potentialBytecodeOffset &gt;= 0&#10;                            &amp;&amp; potentialBytecodeOffset &lt; codeLength&#10;                            &amp;&amp; (classBuffer[bytecodeStartOffset + potentialBytecodeOffset] &amp; 0xFF)&#10;                                    == Opcodes.NEW) {&#10;                        createLabel(potentialBytecodeOffset, labels);&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        if (expandFrames &amp;&amp; (context.parsingOptions &amp; EXPAND_ASM_INSNS) != 0) {&#10;            // Expanding the ASM specific instructions can introduce F_INSERT frames, even if the method&#10;            // does not currently have any frame. These inserted frames must be computed by simulating the&#10;            // effect of the bytecode instructions, one by one, starting from the implicit first frame.&#10;            // For this, MethodWriter needs to know maxLocals before the first instruction is visited. To&#10;            // ensure this, we visit the implicit first frame here (passing only maxLocals - the rest is&#10;            // computed in MethodWriter).&#10;            methodVisitor.visitFrame(Opcodes.F_NEW, maxLocals, null, 0, null);&#10;        }&#10;&#10;        // Visit the bytecode instructions. First, introduce state variables for the incremental parsing&#10;        // of the type annotations.&#10;&#10;        // Index of the next runtime visible type annotation to read (in the&#10;        // visibleTypeAnnotationOffsets array).&#10;        int currentVisibleTypeAnnotationIndex = 0;&#10;        // The bytecode offset of the next runtime visible type annotation to read, or -1.&#10;        int currentVisibleTypeAnnotationBytecodeOffset =&#10;                getTypeAnnotationBytecodeOffset(visibleTypeAnnotationOffsets, 0);&#10;        // Index of the next runtime invisible type annotation to read (in the&#10;        // invisibleTypeAnnotationOffsets array).&#10;        int currentInvisibleTypeAnnotationIndex = 0;&#10;        // The bytecode offset of the next runtime invisible type annotation to read, or -1.&#10;        int currentInvisibleTypeAnnotationBytecodeOffset =&#10;                getTypeAnnotationBytecodeOffset(invisibleTypeAnnotationOffsets, 0);&#10;&#10;        // Whether a F_INSERT stack map frame must be inserted before the current instruction.&#10;        boolean insertFrame = false;&#10;&#10;        // The delta to subtract from a goto_w or jsr_w opcode to get the corresponding goto or jsr&#10;        // opcode, or 0 if goto_w and jsr_w must be left unchanged (i.e. when expanding ASM specific&#10;        // instructions).&#10;        final int wideJumpOpcodeDelta =&#10;                (context.parsingOptions &amp; EXPAND_ASM_INSNS) == 0 ? Constants.WIDE_JUMP_OPCODE_DELTA : 0;&#10;&#10;        currentOffset = bytecodeStartOffset;&#10;        while (currentOffset &lt; bytecodeEndOffset) {&#10;            final int currentBytecodeOffset = currentOffset - bytecodeStartOffset;&#10;&#10;            // Visit the label and the line number(s) for this bytecode offset, if any.&#10;            Label currentLabel = labels[currentBytecodeOffset];&#10;            if (currentLabel != null) {&#10;                currentLabel.accept(methodVisitor, (context.parsingOptions &amp; SKIP_DEBUG) == 0);&#10;            }&#10;&#10;            // Visit the stack map frame for this bytecode offset, if any.&#10;            while (stackMapFrameOffset != 0&#10;                    &amp;&amp; (context.currentFrameOffset == currentBytecodeOffset&#10;                            || context.currentFrameOffset == -1)) {&#10;                // If there is a stack map frame for this offset, make methodVisitor visit it, and read the&#10;                // next stack map frame if there is one.&#10;                if (context.currentFrameOffset != -1) {&#10;                    if (!compressedFrames || expandFrames) {&#10;                        methodVisitor.visitFrame(&#10;                                Opcodes.F_NEW,&#10;                                context.currentFrameLocalCount,&#10;                                context.currentFrameLocalTypes,&#10;                                context.currentFrameStackCount,&#10;                                context.currentFrameStackTypes);&#10;                    } else {&#10;                        methodVisitor.visitFrame(&#10;                                context.currentFrameType,&#10;                                context.currentFrameLocalCountDelta,&#10;                                context.currentFrameLocalTypes,&#10;                                context.currentFrameStackCount,&#10;                                context.currentFrameStackTypes);&#10;                    }&#10;                    // Since there is already a stack map frame for this bytecode offset, there is no need to&#10;                    // insert a new one.&#10;                    insertFrame = false;&#10;                }&#10;                if (stackMapFrameOffset &lt; stackMapTableEndOffset) {&#10;                    stackMapFrameOffset =&#10;                            readStackMapFrame(stackMapFrameOffset, compressedFrames, expandFrames, context);&#10;                } else {&#10;                    stackMapFrameOffset = 0;&#10;                }&#10;            }&#10;&#10;            // Insert a stack map frame for this bytecode offset, if requested by setting insertFrame to&#10;            // true during the previous iteration. The actual frame content is computed in MethodWriter.&#10;            if (insertFrame) {&#10;                if ((context.parsingOptions &amp; EXPAND_FRAMES) != 0) {&#10;                    methodVisitor.visitFrame(Constants.F_INSERT, 0, null, 0, null);&#10;                }&#10;                insertFrame = false;&#10;            }&#10;&#10;            // Visit the instruction at this bytecode offset.&#10;            int opcode = classBuffer[currentOffset] &amp; 0xFF;&#10;            switch (opcode) {&#10;                case Opcodes.NOP:&#10;                case Opcodes.ACONST_NULL:&#10;                case Opcodes.ICONST_M1:&#10;                case Opcodes.ICONST_0:&#10;                case Opcodes.ICONST_1:&#10;                case Opcodes.ICONST_2:&#10;                case Opcodes.ICONST_3:&#10;                case Opcodes.ICONST_4:&#10;                case Opcodes.ICONST_5:&#10;                case Opcodes.LCONST_0:&#10;                case Opcodes.LCONST_1:&#10;                case Opcodes.FCONST_0:&#10;                case Opcodes.FCONST_1:&#10;                case Opcodes.FCONST_2:&#10;                case Opcodes.DCONST_0:&#10;                case Opcodes.DCONST_1:&#10;                case Opcodes.IALOAD:&#10;                case Opcodes.LALOAD:&#10;                case Opcodes.FALOAD:&#10;                case Opcodes.DALOAD:&#10;                case Opcodes.AALOAD:&#10;                case Opcodes.BALOAD:&#10;                case Opcodes.CALOAD:&#10;                case Opcodes.SALOAD:&#10;                case Opcodes.IASTORE:&#10;                case Opcodes.LASTORE:&#10;                case Opcodes.FASTORE:&#10;                case Opcodes.DASTORE:&#10;                case Opcodes.AASTORE:&#10;                case Opcodes.BASTORE:&#10;                case Opcodes.CASTORE:&#10;                case Opcodes.SASTORE:&#10;                case Opcodes.POP:&#10;                case Opcodes.POP2:&#10;                case Opcodes.DUP:&#10;                case Opcodes.DUP_X1:&#10;                case Opcodes.DUP_X2:&#10;                case Opcodes.DUP2:&#10;                case Opcodes.DUP2_X1:&#10;                case Opcodes.DUP2_X2:&#10;                case Opcodes.SWAP:&#10;                case Opcodes.IADD:&#10;                case Opcodes.LADD:&#10;                case Opcodes.FADD:&#10;                case Opcodes.DADD:&#10;                case Opcodes.ISUB:&#10;                case Opcodes.LSUB:&#10;                case Opcodes.FSUB:&#10;                case Opcodes.DSUB:&#10;                case Opcodes.IMUL:&#10;                case Opcodes.LMUL:&#10;                case Opcodes.FMUL:&#10;                case Opcodes.DMUL:&#10;                case Opcodes.IDIV:&#10;                case Opcodes.LDIV:&#10;                case Opcodes.FDIV:&#10;                case Opcodes.DDIV:&#10;                case Opcodes.IREM:&#10;                case Opcodes.LREM:&#10;                case Opcodes.FREM:&#10;                case Opcodes.DREM:&#10;                case Opcodes.INEG:&#10;                case Opcodes.LNEG:&#10;                case Opcodes.FNEG:&#10;                case Opcodes.DNEG:&#10;                case Opcodes.ISHL:&#10;                case Opcodes.LSHL:&#10;                case Opcodes.ISHR:&#10;                case Opcodes.LSHR:&#10;                case Opcodes.IUSHR:&#10;                case Opcodes.LUSHR:&#10;                case Opcodes.IAND:&#10;                case Opcodes.LAND:&#10;                case Opcodes.IOR:&#10;                case Opcodes.LOR:&#10;                case Opcodes.IXOR:&#10;                case Opcodes.LXOR:&#10;                case Opcodes.I2L:&#10;                case Opcodes.I2F:&#10;                case Opcodes.I2D:&#10;                case Opcodes.L2I:&#10;                case Opcodes.L2F:&#10;                case Opcodes.L2D:&#10;                case Opcodes.F2I:&#10;                case Opcodes.F2L:&#10;                case Opcodes.F2D:&#10;                case Opcodes.D2I:&#10;                case Opcodes.D2L:&#10;                case Opcodes.D2F:&#10;                case Opcodes.I2B:&#10;                case Opcodes.I2C:&#10;                case Opcodes.I2S:&#10;                case Opcodes.LCMP:&#10;                case Opcodes.FCMPL:&#10;                case Opcodes.FCMPG:&#10;                case Opcodes.DCMPL:&#10;                case Opcodes.DCMPG:&#10;                case Opcodes.IRETURN:&#10;                case Opcodes.LRETURN:&#10;                case Opcodes.FRETURN:&#10;                case Opcodes.DRETURN:&#10;                case Opcodes.ARETURN:&#10;                case Opcodes.RETURN:&#10;                case Opcodes.ARRAYLENGTH:&#10;                case Opcodes.ATHROW:&#10;                case Opcodes.MONITORENTER:&#10;                case Opcodes.MONITOREXIT:&#10;                    methodVisitor.visitInsn(opcode);&#10;                    currentOffset += 1;&#10;                    break;&#10;                case Constants.ILOAD_0:&#10;                case Constants.ILOAD_1:&#10;                case Constants.ILOAD_2:&#10;                case Constants.ILOAD_3:&#10;                case Constants.LLOAD_0:&#10;                case Constants.LLOAD_1:&#10;                case Constants.LLOAD_2:&#10;                case Constants.LLOAD_3:&#10;                case Constants.FLOAD_0:&#10;                case Constants.FLOAD_1:&#10;                case Constants.FLOAD_2:&#10;                case Constants.FLOAD_3:&#10;                case Constants.DLOAD_0:&#10;                case Constants.DLOAD_1:&#10;                case Constants.DLOAD_2:&#10;                case Constants.DLOAD_3:&#10;                case Constants.ALOAD_0:&#10;                case Constants.ALOAD_1:&#10;                case Constants.ALOAD_2:&#10;                case Constants.ALOAD_3:&#10;                    opcode -= Constants.ILOAD_0;&#10;                    methodVisitor.visitVarInsn(Opcodes.ILOAD + (opcode &gt;&gt; 2), opcode &amp; 0x3);&#10;                    currentOffset += 1;&#10;                    break;&#10;                case Constants.ISTORE_0:&#10;                case Constants.ISTORE_1:&#10;                case Constants.ISTORE_2:&#10;                case Constants.ISTORE_3:&#10;                case Constants.LSTORE_0:&#10;                case Constants.LSTORE_1:&#10;                case Constants.LSTORE_2:&#10;                case Constants.LSTORE_3:&#10;                case Constants.FSTORE_0:&#10;                case Constants.FSTORE_1:&#10;                case Constants.FSTORE_2:&#10;                case Constants.FSTORE_3:&#10;                case Constants.DSTORE_0:&#10;                case Constants.DSTORE_1:&#10;                case Constants.DSTORE_2:&#10;                case Constants.DSTORE_3:&#10;                case Constants.ASTORE_0:&#10;                case Constants.ASTORE_1:&#10;                case Constants.ASTORE_2:&#10;                case Constants.ASTORE_3:&#10;                    opcode -= Constants.ISTORE_0;&#10;                    methodVisitor.visitVarInsn(Opcodes.ISTORE + (opcode &gt;&gt; 2), opcode &amp; 0x3);&#10;                    currentOffset += 1;&#10;                    break;&#10;                case Opcodes.IFEQ:&#10;                case Opcodes.IFNE:&#10;                case Opcodes.IFLT:&#10;                case Opcodes.IFGE:&#10;                case Opcodes.IFGT:&#10;                case Opcodes.IFLE:&#10;                case Opcodes.IF_ICMPEQ:&#10;                case Opcodes.IF_ICMPNE:&#10;                case Opcodes.IF_ICMPLT:&#10;                case Opcodes.IF_ICMPGE:&#10;                case Opcodes.IF_ICMPGT:&#10;                case Opcodes.IF_ICMPLE:&#10;                case Opcodes.IF_ACMPEQ:&#10;                case Opcodes.IF_ACMPNE:&#10;                case Opcodes.GOTO:&#10;                case Opcodes.JSR:&#10;                case Opcodes.IFNULL:&#10;                case Opcodes.IFNONNULL:&#10;                    methodVisitor.visitJumpInsn(&#10;                            opcode, labels[currentBytecodeOffset + readShort(currentOffset + 1)]);&#10;                    currentOffset += 3;&#10;                    break;&#10;                case Constants.GOTO_W:&#10;                case Constants.JSR_W:&#10;                    methodVisitor.visitJumpInsn(&#10;                            opcode - wideJumpOpcodeDelta,&#10;                            labels[currentBytecodeOffset + readInt(currentOffset + 1)]);&#10;                    currentOffset += 5;&#10;                    break;&#10;                case Constants.ASM_IFEQ:&#10;                case Constants.ASM_IFNE:&#10;                case Constants.ASM_IFLT:&#10;                case Constants.ASM_IFGE:&#10;                case Constants.ASM_IFGT:&#10;                case Constants.ASM_IFLE:&#10;                case Constants.ASM_IF_ICMPEQ:&#10;                case Constants.ASM_IF_ICMPNE:&#10;                case Constants.ASM_IF_ICMPLT:&#10;                case Constants.ASM_IF_ICMPGE:&#10;                case Constants.ASM_IF_ICMPGT:&#10;                case Constants.ASM_IF_ICMPLE:&#10;                case Constants.ASM_IF_ACMPEQ:&#10;                case Constants.ASM_IF_ACMPNE:&#10;                case Constants.ASM_GOTO:&#10;                case Constants.ASM_JSR:&#10;                case Constants.ASM_IFNULL:&#10;                case Constants.ASM_IFNONNULL:&#10;                    {&#10;                        // A forward jump with an offset &gt; 32767. In this case we automatically replace ASM_GOTO&#10;                        // with GOTO_W, ASM_JSR with JSR_W and ASM_IFxxx &lt;l&gt; with IFNOTxxx &lt;L&gt; GOTO_W &lt;l&gt; L:...,&#10;                        // where IFNOTxxx is the &quot;opposite&quot; opcode of ASMS_IFxxx (e.g. IFNE for ASM_IFEQ) and&#10;                        // where &lt;L&gt; designates the instruction just after the GOTO_W.&#10;                        // First, change the ASM specific opcodes ASM_IFEQ ... ASM_JSR, ASM_IFNULL and&#10;                        // ASM_IFNONNULL to IFEQ ... JSR, IFNULL and IFNONNULL.&#10;                        opcode =&#10;                                opcode &lt; Constants.ASM_IFNULL&#10;                                        ? opcode - Constants.ASM_OPCODE_DELTA&#10;                                        : opcode - Constants.ASM_IFNULL_OPCODE_DELTA;&#10;                        Label target = labels[currentBytecodeOffset + readUnsignedShort(currentOffset + 1)];&#10;                        if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {&#10;                            // Replace GOTO with GOTO_W and JSR with JSR_W.&#10;                            methodVisitor.visitJumpInsn(opcode + Constants.WIDE_JUMP_OPCODE_DELTA, target);&#10;                        } else {&#10;                            // Compute the &quot;opposite&quot; of opcode. This can be done by flipping the least&#10;                            // significant bit for IFNULL and IFNONNULL, and similarly for IFEQ ... IF_ACMPEQ&#10;                            // (with a pre and post offset by 1).&#10;                            opcode = opcode &lt; Opcodes.GOTO ? ((opcode + 1) ^ 1) - 1 : opcode ^ 1;&#10;                            Label endif = createLabel(currentBytecodeOffset + 3, labels);&#10;                            methodVisitor.visitJumpInsn(opcode, endif);&#10;                            methodVisitor.visitJumpInsn(Constants.GOTO_W, target);&#10;                            // endif designates the instruction just after GOTO_W, and is visited as part of the&#10;                            // next instruction. Since it is a jump target, we need to insert a frame here.&#10;                            insertFrame = true;&#10;                        }&#10;                        currentOffset += 3;&#10;                        break;&#10;                    }&#10;                case Constants.ASM_GOTO_W:&#10;                    // Replace ASM_GOTO_W with GOTO_W.&#10;                    methodVisitor.visitJumpInsn(&#10;                            Constants.GOTO_W, labels[currentBytecodeOffset + readInt(currentOffset + 1)]);&#10;                    // The instruction just after is a jump target (because ASM_GOTO_W is used in patterns&#10;                    // IFNOTxxx &lt;L&gt; ASM_GOTO_W &lt;l&gt; L:..., see MethodWriter), so we need to insert a frame&#10;                    // here.&#10;                    insertFrame = true;&#10;                    currentOffset += 5;&#10;                    break;&#10;                case Constants.WIDE:&#10;                    opcode = classBuffer[currentOffset + 1] &amp; 0xFF;&#10;                    if (opcode == Opcodes.IINC) {&#10;                        methodVisitor.visitIincInsn(&#10;                                readUnsignedShort(currentOffset + 2), readShort(currentOffset + 4));&#10;                        currentOffset += 6;&#10;                    } else {&#10;                        methodVisitor.visitVarInsn(opcode, readUnsignedShort(currentOffset + 2));&#10;                        currentOffset += 4;&#10;                    }&#10;                    break;&#10;                case Opcodes.TABLESWITCH:&#10;                    {&#10;                        // Skip 0 to 3 padding bytes.&#10;                        currentOffset += 4 - (currentBytecodeOffset &amp; 3);&#10;                        // Read the instruction.&#10;                        Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)];&#10;                        int low = readInt(currentOffset + 4);&#10;                        int high = readInt(currentOffset + 8);&#10;                        currentOffset += 12;&#10;                        Label[] table = new Label[high - low + 1];&#10;                        for (int i = 0; i &lt; table.length; ++i) {&#10;                            table[i] = labels[currentBytecodeOffset + readInt(currentOffset)];&#10;                            currentOffset += 4;&#10;                        }&#10;                        methodVisitor.visitTableSwitchInsn(low, high, defaultLabel, table);&#10;                        break;&#10;                    }&#10;                case Opcodes.LOOKUPSWITCH:&#10;                    {&#10;                        // Skip 0 to 3 padding bytes.&#10;                        currentOffset += 4 - (currentBytecodeOffset &amp; 3);&#10;                        // Read the instruction.&#10;                        Label defaultLabel = labels[currentBytecodeOffset + readInt(currentOffset)];&#10;                        int numPairs = readInt(currentOffset + 4);&#10;                        currentOffset += 8;&#10;                        int[] keys = new int[numPairs];&#10;                        Label[] values = new Label[numPairs];&#10;                        for (int i = 0; i &lt; numPairs; ++i) {&#10;                            keys[i] = readInt(currentOffset);&#10;                            values[i] = labels[currentBytecodeOffset + readInt(currentOffset + 4)];&#10;                            currentOffset += 8;&#10;                        }&#10;                        methodVisitor.visitLookupSwitchInsn(defaultLabel, keys, values);&#10;                        break;&#10;                    }&#10;                case Opcodes.ILOAD:&#10;                case Opcodes.LLOAD:&#10;                case Opcodes.FLOAD:&#10;                case Opcodes.DLOAD:&#10;                case Opcodes.ALOAD:&#10;                case Opcodes.ISTORE:&#10;                case Opcodes.LSTORE:&#10;                case Opcodes.FSTORE:&#10;                case Opcodes.DSTORE:&#10;                case Opcodes.ASTORE:&#10;                case Opcodes.RET:&#10;                    methodVisitor.visitVarInsn(opcode, classBuffer[currentOffset + 1] &amp; 0xFF);&#10;                    currentOffset += 2;&#10;                    break;&#10;                case Opcodes.BIPUSH:&#10;                case Opcodes.NEWARRAY:&#10;                    methodVisitor.visitIntInsn(opcode, classBuffer[currentOffset + 1]);&#10;                    currentOffset += 2;&#10;                    break;&#10;                case Opcodes.SIPUSH:&#10;                    methodVisitor.visitIntInsn(opcode, readShort(currentOffset + 1));&#10;                    currentOffset += 3;&#10;                    break;&#10;                case Opcodes.LDC:&#10;                    methodVisitor.visitLdcInsn(readConst(classBuffer[currentOffset + 1] &amp; 0xFF, charBuffer));&#10;                    currentOffset += 2;&#10;                    break;&#10;                case Constants.LDC_W:&#10;                case Constants.LDC2_W:&#10;                    methodVisitor.visitLdcInsn(readConst(readUnsignedShort(currentOffset + 1), charBuffer));&#10;                    currentOffset += 3;&#10;                    break;&#10;                case Opcodes.GETSTATIC:&#10;                case Opcodes.PUTSTATIC:&#10;                case Opcodes.GETFIELD:&#10;                case Opcodes.PUTFIELD:&#10;                case Opcodes.INVOKEVIRTUAL:&#10;                case Opcodes.INVOKESPECIAL:&#10;                case Opcodes.INVOKESTATIC:&#10;                case Opcodes.INVOKEINTERFACE:&#10;                    {&#10;                        int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)];&#10;                        int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)];&#10;                        String owner = readClass(cpInfoOffset, charBuffer);&#10;                        String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer);&#10;                        String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer);&#10;                        if (opcode &lt; Opcodes.INVOKEVIRTUAL) {&#10;                            methodVisitor.visitFieldInsn(opcode, owner, name, descriptor);&#10;                        } else {&#10;                            boolean isInterface =&#10;                                    classBuffer[cpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG;&#10;                            methodVisitor.visitMethodInsn(opcode, owner, name, descriptor, isInterface);&#10;                        }&#10;                        if (opcode == Opcodes.INVOKEINTERFACE) {&#10;                            currentOffset += 5;&#10;                        } else {&#10;                            currentOffset += 3;&#10;                        }&#10;                        break;&#10;                    }&#10;                case Opcodes.INVOKEDYNAMIC:&#10;                    {&#10;                        int cpInfoOffset = cpInfoOffsets[readUnsignedShort(currentOffset + 1)];&#10;                        int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)];&#10;                        String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer);&#10;                        String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer);&#10;                        int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)];&#10;                        Handle handle =&#10;                                (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer);&#10;                        Object[] bootstrapMethodArguments =&#10;                                new Object[readUnsignedShort(bootstrapMethodOffset + 2)];&#10;                        bootstrapMethodOffset += 4;&#10;                        for (int i = 0; i &lt; bootstrapMethodArguments.length; i++) {&#10;                            bootstrapMethodArguments[i] =&#10;                                    readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer);&#10;                            bootstrapMethodOffset += 2;&#10;                        }&#10;                        methodVisitor.visitInvokeDynamicInsn(&#10;                                name, descriptor, handle, bootstrapMethodArguments);&#10;                        currentOffset += 5;&#10;                        break;&#10;                    }&#10;                case Opcodes.NEW:&#10;                case Opcodes.ANEWARRAY:&#10;                case Opcodes.CHECKCAST:&#10;                case Opcodes.INSTANCEOF:&#10;                    methodVisitor.visitTypeInsn(opcode, readClass(currentOffset + 1, charBuffer));&#10;                    currentOffset += 3;&#10;                    break;&#10;                case Opcodes.IINC:&#10;                    methodVisitor.visitIincInsn(&#10;                            classBuffer[currentOffset + 1] &amp; 0xFF, classBuffer[currentOffset + 2]);&#10;                    currentOffset += 3;&#10;                    break;&#10;                case Opcodes.MULTIANEWARRAY:&#10;                    methodVisitor.visitMultiANewArrayInsn(&#10;                            readClass(currentOffset + 1, charBuffer), classBuffer[currentOffset + 3] &amp; 0xFF);&#10;                    currentOffset += 4;&#10;                    break;&#10;                default:&#10;                    throw new AssertionError();&#10;            }&#10;&#10;            // Visit the runtime visible instruction annotations, if any.&#10;            while (visibleTypeAnnotationOffsets != null&#10;                    &amp;&amp; currentVisibleTypeAnnotationIndex &lt; visibleTypeAnnotationOffsets.length&#10;                    &amp;&amp; currentVisibleTypeAnnotationBytecodeOffset &lt;= currentBytecodeOffset) {&#10;                if (currentVisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {&#10;                    // Parse the target_type, target_info and target_path fields.&#10;                    int currentAnnotationOffset =&#10;                            readTypeAnnotationTarget(&#10;                                    context, visibleTypeAnnotationOffsets[currentVisibleTypeAnnotationIndex]);&#10;                    // Parse the type_index field.&#10;                    String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                    currentAnnotationOffset += 2;&#10;                    // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                    readElementValues(&#10;                            methodVisitor.visitInsnAnnotation(&#10;                                    context.currentTypeAnnotationTarget,&#10;                                    context.currentTypeAnnotationTargetPath,&#10;                                    annotationDescriptor,&#10;                                    /* visible = */ true),&#10;                            currentAnnotationOffset,&#10;                            /* named = */ true,&#10;                            charBuffer);&#10;                }&#10;                currentVisibleTypeAnnotationBytecodeOffset =&#10;                        getTypeAnnotationBytecodeOffset(&#10;                                visibleTypeAnnotationOffsets, ++currentVisibleTypeAnnotationIndex);&#10;            }&#10;&#10;            // Visit the runtime invisible instruction annotations, if any.&#10;            while (invisibleTypeAnnotationOffsets != null&#10;                    &amp;&amp; currentInvisibleTypeAnnotationIndex &lt; invisibleTypeAnnotationOffsets.length&#10;                    &amp;&amp; currentInvisibleTypeAnnotationBytecodeOffset &lt;= currentBytecodeOffset) {&#10;                if (currentInvisibleTypeAnnotationBytecodeOffset == currentBytecodeOffset) {&#10;                    // Parse the target_type, target_info and target_path fields.&#10;                    int currentAnnotationOffset =&#10;                            readTypeAnnotationTarget(&#10;                                    context, invisibleTypeAnnotationOffsets[currentInvisibleTypeAnnotationIndex]);&#10;                    // Parse the type_index field.&#10;                    String annotationDescriptor = readUTF8(currentAnnotationOffset, charBuffer);&#10;                    currentAnnotationOffset += 2;&#10;                    // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                    readElementValues(&#10;                            methodVisitor.visitInsnAnnotation(&#10;                                    context.currentTypeAnnotationTarget,&#10;                                    context.currentTypeAnnotationTargetPath,&#10;                                    annotationDescriptor,&#10;                                    /* visible = */ false),&#10;                            currentAnnotationOffset,&#10;                            /* named = */ true,&#10;                            charBuffer);&#10;                }&#10;                currentInvisibleTypeAnnotationBytecodeOffset =&#10;                        getTypeAnnotationBytecodeOffset(&#10;                                invisibleTypeAnnotationOffsets, ++currentInvisibleTypeAnnotationIndex);&#10;            }&#10;        }&#10;        if (labels[codeLength] != null) {&#10;            methodVisitor.visitLabel(labels[codeLength]);&#10;        }&#10;&#10;        // Visit LocalVariableTable and LocalVariableTypeTable attributes.&#10;        if (localVariableTableOffset != 0 &amp;&amp; (context.parsingOptions &amp; SKIP_DEBUG) == 0) {&#10;            // The (start_pc, index, signature_index) fields of each entry of the LocalVariableTypeTable.&#10;            int[] typeTable = null;&#10;            if (localVariableTypeTableOffset != 0) {&#10;                typeTable = new int[readUnsignedShort(localVariableTypeTableOffset) * 3];&#10;                currentOffset = localVariableTypeTableOffset + 2;&#10;                int typeTableIndex = typeTable.length;&#10;                while (typeTableIndex &gt; 0) {&#10;                    // Store the offset of 'signature_index', and the value of 'index' and 'start_pc'.&#10;                    typeTable[--typeTableIndex] = currentOffset + 6;&#10;                    typeTable[--typeTableIndex] = readUnsignedShort(currentOffset + 8);&#10;                    typeTable[--typeTableIndex] = readUnsignedShort(currentOffset);&#10;                    currentOffset += 10;&#10;                }&#10;            }&#10;            int localVariableTableLength = readUnsignedShort(localVariableTableOffset);&#10;            currentOffset = localVariableTableOffset + 2;&#10;            while (localVariableTableLength-- &gt; 0) {&#10;                int startPc = readUnsignedShort(currentOffset);&#10;                int length = readUnsignedShort(currentOffset + 2);&#10;                String name = readUTF8(currentOffset + 4, charBuffer);&#10;                String descriptor = readUTF8(currentOffset + 6, charBuffer);&#10;                int index = readUnsignedShort(currentOffset + 8);&#10;                currentOffset += 10;&#10;                String signature = null;&#10;                if (typeTable != null) {&#10;                    for (int i = 0; i &lt; typeTable.length; i += 3) {&#10;                        if (typeTable[i] == startPc &amp;&amp; typeTable[i + 1] == index) {&#10;                            signature = readUTF8(typeTable[i + 2], charBuffer);&#10;                            break;&#10;                        }&#10;                    }&#10;                }&#10;                methodVisitor.visitLocalVariable(&#10;                        name, descriptor, signature, labels[startPc], labels[startPc + length], index);&#10;            }&#10;        }&#10;&#10;        // Visit the local variable type annotations of the RuntimeVisibleTypeAnnotations attribute.&#10;        if (visibleTypeAnnotationOffsets != null) {&#10;            for (int typeAnnotationOffset : visibleTypeAnnotationOffsets) {&#10;                int targetType = readByte(typeAnnotationOffset);&#10;                if (targetType == TypeReference.LOCAL_VARIABLE&#10;                        || targetType == TypeReference.RESOURCE_VARIABLE) {&#10;                    // Parse the target_type, target_info and target_path fields.&#10;                    currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset);&#10;                    // Parse the type_index field.&#10;                    String annotationDescriptor = readUTF8(currentOffset, charBuffer);&#10;                    currentOffset += 2;&#10;                    // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                    readElementValues(&#10;                            methodVisitor.visitLocalVariableAnnotation(&#10;                                    context.currentTypeAnnotationTarget,&#10;                                    context.currentTypeAnnotationTargetPath,&#10;                                    context.currentLocalVariableAnnotationRangeStarts,&#10;                                    context.currentLocalVariableAnnotationRangeEnds,&#10;                                    context.currentLocalVariableAnnotationRangeIndices,&#10;                                    annotationDescriptor,&#10;                                    /* visible = */ true),&#10;                            currentOffset,&#10;                            /* named = */ true,&#10;                            charBuffer);&#10;                }&#10;            }&#10;        }&#10;&#10;        // Visit the local variable type annotations of the RuntimeInvisibleTypeAnnotations attribute.&#10;        if (invisibleTypeAnnotationOffsets != null) {&#10;            for (int typeAnnotationOffset : invisibleTypeAnnotationOffsets) {&#10;                int targetType = readByte(typeAnnotationOffset);&#10;                if (targetType == TypeReference.LOCAL_VARIABLE&#10;                        || targetType == TypeReference.RESOURCE_VARIABLE) {&#10;                    // Parse the target_type, target_info and target_path fields.&#10;                    currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset);&#10;                    // Parse the type_index field.&#10;                    String annotationDescriptor = readUTF8(currentOffset, charBuffer);&#10;                    currentOffset += 2;&#10;                    // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                    readElementValues(&#10;                            methodVisitor.visitLocalVariableAnnotation(&#10;                                    context.currentTypeAnnotationTarget,&#10;                                    context.currentTypeAnnotationTargetPath,&#10;                                    context.currentLocalVariableAnnotationRangeStarts,&#10;                                    context.currentLocalVariableAnnotationRangeEnds,&#10;                                    context.currentLocalVariableAnnotationRangeIndices,&#10;                                    annotationDescriptor,&#10;                                    /* visible = */ false),&#10;                            currentOffset,&#10;                            /* named = */ true,&#10;                            charBuffer);&#10;                }&#10;            }&#10;        }&#10;&#10;        // Visit the non standard attributes.&#10;        while (attributes != null) {&#10;            // Copy and reset the nextAttribute field so that it can also be used in MethodWriter.&#10;            Attribute nextAttribute = attributes.nextAttribute;&#10;            attributes.nextAttribute = null;&#10;            methodVisitor.visitAttribute(attributes);&#10;            attributes = nextAttribute;&#10;        }&#10;&#10;        // Visit the max stack and max locals values.&#10;        methodVisitor.visitMaxs(maxStack, maxLocals);&#10;    }&#10;&#10;    /**&#10;      * Returns the label corresponding to the given bytecode offset. The default implementation of&#10;      * this method creates a label for the given offset if it has not been already created.&#10;      *&#10;      * @param bytecodeOffset a bytecode offset in a method.&#10;      * @param labels the already created labels, indexed by their offset. If a label already exists&#10;      *     for bytecodeOffset this method must not create a new one. Otherwise it must store the new&#10;      *     label in this array.&#10;      * @return a non null Label, which must be equal to labels[bytecodeOffset].&#10;      */&#10;    protected Label readLabel(final int bytecodeOffset, final Label[] labels) {&#10;        if (labels[bytecodeOffset] == null) {&#10;            labels[bytecodeOffset] = new Label();&#10;        }&#10;        return labels[bytecodeOffset];&#10;    }&#10;&#10;    /**&#10;      * Creates a label without the {@link Label#FLAG_DEBUG_ONLY} flag set, for the given bytecode&#10;      * offset. The label is created with a call to {@link #readLabel} and its {@link&#10;      * Label#FLAG_DEBUG_ONLY} flag is cleared.&#10;      *&#10;      * @param bytecodeOffset a bytecode offset in a method.&#10;      * @param labels the already created labels, indexed by their offset.&#10;      * @return a Label without the {@link Label#FLAG_DEBUG_ONLY} flag set.&#10;      */&#10;    private Label createLabel(final int bytecodeOffset, final Label[] labels) {&#10;        Label label = readLabel(bytecodeOffset, labels);&#10;        label.flags &amp;= ~Label.FLAG_DEBUG_ONLY;&#10;        return label;&#10;    }&#10;&#10;    /**&#10;      * Creates a label with the {@link Label#FLAG_DEBUG_ONLY} flag set, if there is no already&#10;      * existing label for the given bytecode offset (otherwise does nothing). The label is created&#10;      * with a call to {@link #readLabel}.&#10;      *&#10;      * @param bytecodeOffset a bytecode offset in a method.&#10;      * @param labels the already created labels, indexed by their offset.&#10;      */&#10;    private void createDebugLabel(final int bytecodeOffset, final Label[] labels) {&#10;        if (labels[bytecodeOffset] == null) {&#10;            readLabel(bytecodeOffset, labels).flags |= Label.FLAG_DEBUG_ONLY;&#10;        }&#10;    }&#10;&#10;    // ----------------------------------------------------------------------------------------------&#10;    // Methods to parse annotations, type annotations and parameter annotations&#10;    // ----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Parses a Runtime[In]VisibleTypeAnnotations attribute to find the offset of each type_annotation&#10;      * entry it contains, to find the corresponding labels, and to visit the try catch block&#10;      * annotations.&#10;      *&#10;      * @param methodVisitor the method visitor to be used to visit the try catch block annotations.&#10;      * @param context information about the class being parsed.&#10;      * @param runtimeTypeAnnotationsOffset the start offset of a Runtime[In]VisibleTypeAnnotations&#10;      *     attribute, excluding the attribute_info's attribute_name_index and attribute_length fields.&#10;      * @param visible true if the attribute to parse is a RuntimeVisibleTypeAnnotations attribute,&#10;      *     false it is a RuntimeInvisibleTypeAnnotations attribute.&#10;      * @return the start offset of each entry of the Runtime[In]VisibleTypeAnnotations_attribute's&#10;      *     'annotations' array field.&#10;      */&#10;    private int[] readTypeAnnotations(&#10;            final MethodVisitor methodVisitor,&#10;            final Context context,&#10;            final int runtimeTypeAnnotationsOffset,&#10;            final boolean visible) {&#10;        char[] charBuffer = context.charBuffer;&#10;        int currentOffset = runtimeTypeAnnotationsOffset;&#10;        // Read the num_annotations field and create an array to store the type_annotation offsets.&#10;        int[] typeAnnotationsOffsets = new int[readUnsignedShort(currentOffset)];&#10;        currentOffset += 2;&#10;        // Parse the 'annotations' array field.&#10;        for (int i = 0; i &lt; typeAnnotationsOffsets.length; ++i) {&#10;            typeAnnotationsOffsets[i] = currentOffset;&#10;            // Parse the type_annotation's target_type and the target_info fields. The size of the&#10;            // target_info field depends on the value of target_type.&#10;            int targetType = readInt(currentOffset);&#10;            switch (targetType &gt;&gt;&gt; 24) {&#10;                case TypeReference.LOCAL_VARIABLE:&#10;                case TypeReference.RESOURCE_VARIABLE:&#10;                    // A localvar_target has a variable size, which depends on the value of their table_length&#10;                    // field. It also references bytecode offsets, for which we need labels.&#10;                    int tableLength = readUnsignedShort(currentOffset + 1);&#10;                    currentOffset += 3;&#10;                    while (tableLength-- &gt; 0) {&#10;                        int startPc = readUnsignedShort(currentOffset);&#10;                        int length = readUnsignedShort(currentOffset + 2);&#10;                        // Skip the index field (2 bytes).&#10;                        currentOffset += 6;&#10;                        createLabel(startPc, context.currentMethodLabels);&#10;                        createLabel(startPc + length, context.currentMethodLabels);&#10;                    }&#10;                    break;&#10;                case TypeReference.CAST:&#10;                case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:&#10;                case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:&#10;                case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:&#10;                case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:&#10;                    currentOffset += 4;&#10;                    break;&#10;                case TypeReference.CLASS_EXTENDS:&#10;                case TypeReference.CLASS_TYPE_PARAMETER_BOUND:&#10;                case TypeReference.METHOD_TYPE_PARAMETER_BOUND:&#10;                case TypeReference.THROWS:&#10;                case TypeReference.EXCEPTION_PARAMETER:&#10;                case TypeReference.INSTANCEOF:&#10;                case TypeReference.NEW:&#10;                case TypeReference.CONSTRUCTOR_REFERENCE:&#10;                case TypeReference.METHOD_REFERENCE:&#10;                    currentOffset += 3;&#10;                    break;&#10;                case TypeReference.CLASS_TYPE_PARAMETER:&#10;                case TypeReference.METHOD_TYPE_PARAMETER:&#10;                case TypeReference.METHOD_FORMAL_PARAMETER:&#10;                case TypeReference.FIELD:&#10;                case TypeReference.METHOD_RETURN:&#10;                case TypeReference.METHOD_RECEIVER:&#10;                default:&#10;                    // TypeReference type which can't be used in Code attribute, or which is unknown.&#10;                    throw new IllegalArgumentException();&#10;            }&#10;            // Parse the rest of the type_annotation structure, starting with the target_path structure&#10;            // (whose size depends on its path_length field).&#10;            int pathLength = readByte(currentOffset);&#10;            if ((targetType &gt;&gt;&gt; 24) == TypeReference.EXCEPTION_PARAMETER) {&#10;                // Parse the target_path structure and create a corresponding TypePath.&#10;                TypePath path = pathLength == 0 ? null : new TypePath(classFileBuffer, currentOffset);&#10;                currentOffset += 1 + 2 * pathLength;&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentOffset, charBuffer);&#10;                currentOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentOffset =&#10;                        readElementValues(&#10;                                methodVisitor.visitTryCatchAnnotation(&#10;                                        targetType &amp; 0xFFFFFF00, path, annotationDescriptor, visible),&#10;                                currentOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            } else {&#10;                // We don't want to visit the other target_type annotations, so we just skip them (which&#10;                // requires some parsing because the element_value_pairs array has a variable size). First,&#10;                // skip the target_path structure:&#10;                currentOffset += 3 + 2 * pathLength;&#10;                // Then skip the num_element_value_pairs and element_value_pairs fields (by reading them&#10;                // with a null AnnotationVisitor).&#10;                currentOffset =&#10;                        readElementValues(&#10;                                /* annotationVisitor = */ null, currentOffset, /* named = */ true, charBuffer);&#10;            }&#10;        }&#10;        return typeAnnotationsOffsets;&#10;    }&#10;&#10;    /**&#10;      * Returns the bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or&#10;      * -1 if there is no such type_annotation of if it does not have a bytecode offset.&#10;      *&#10;      * @param typeAnnotationOffsets the offset of each 'type_annotation' entry in a&#10;      *     Runtime[In]VisibleTypeAnnotations attribute, or {@literal null}.&#10;      * @param typeAnnotationIndex the index a 'type_annotation' entry in typeAnnotationOffsets.&#10;      * @return bytecode offset corresponding to the specified JVMS 'type_annotation' structure, or -1&#10;      *     if there is no such type_annotation of if it does not have a bytecode offset.&#10;      */&#10;    private int getTypeAnnotationBytecodeOffset(&#10;            final int[] typeAnnotationOffsets, final int typeAnnotationIndex) {&#10;        if (typeAnnotationOffsets == null&#10;                || typeAnnotationIndex &gt;= typeAnnotationOffsets.length&#10;                || readByte(typeAnnotationOffsets[typeAnnotationIndex]) &lt; TypeReference.INSTANCEOF) {&#10;            return -1;&#10;        }&#10;        return readUnsignedShort(typeAnnotationOffsets[typeAnnotationIndex] + 1);&#10;    }&#10;&#10;    /**&#10;      * Parses the header of a JVMS type_annotation structure to extract its target_type, target_info&#10;      * and target_path (the result is stored in the given context), and returns the start offset of&#10;      * the rest of the type_annotation structure.&#10;      *&#10;      * @param context information about the class being parsed. This is where the extracted&#10;      *     target_type and target_path must be stored.&#10;      * @param typeAnnotationOffset the start offset of a type_annotation structure.&#10;      * @return the start offset of the rest of the type_annotation structure.&#10;      */&#10;    private int readTypeAnnotationTarget(final Context context, final int typeAnnotationOffset) {&#10;        int currentOffset = typeAnnotationOffset;&#10;        // Parse and store the target_type structure.&#10;        int targetType = readInt(typeAnnotationOffset);&#10;        switch (targetType &gt;&gt;&gt; 24) {&#10;            case TypeReference.CLASS_TYPE_PARAMETER:&#10;            case TypeReference.METHOD_TYPE_PARAMETER:&#10;            case TypeReference.METHOD_FORMAL_PARAMETER:&#10;                targetType &amp;= 0xFFFF0000;&#10;                currentOffset += 2;&#10;                break;&#10;            case TypeReference.FIELD:&#10;            case TypeReference.METHOD_RETURN:&#10;            case TypeReference.METHOD_RECEIVER:&#10;                targetType &amp;= 0xFF000000;&#10;                currentOffset += 1;&#10;                break;&#10;            case TypeReference.LOCAL_VARIABLE:&#10;            case TypeReference.RESOURCE_VARIABLE:&#10;                targetType &amp;= 0xFF000000;&#10;                int tableLength = readUnsignedShort(currentOffset + 1);&#10;                currentOffset += 3;&#10;                context.currentLocalVariableAnnotationRangeStarts = new Label[tableLength];&#10;                context.currentLocalVariableAnnotationRangeEnds = new Label[tableLength];&#10;                context.currentLocalVariableAnnotationRangeIndices = new int[tableLength];&#10;                for (int i = 0; i &lt; tableLength; ++i) {&#10;                    int startPc = readUnsignedShort(currentOffset);&#10;                    int length = readUnsignedShort(currentOffset + 2);&#10;                    int index = readUnsignedShort(currentOffset + 4);&#10;                    currentOffset += 6;&#10;                    context.currentLocalVariableAnnotationRangeStarts[i] =&#10;                            createLabel(startPc, context.currentMethodLabels);&#10;                    context.currentLocalVariableAnnotationRangeEnds[i] =&#10;                            createLabel(startPc + length, context.currentMethodLabels);&#10;                    context.currentLocalVariableAnnotationRangeIndices[i] = index;&#10;                }&#10;                break;&#10;            case TypeReference.CAST:&#10;            case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:&#10;            case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:&#10;            case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:&#10;            case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:&#10;                targetType &amp;= 0xFF0000FF;&#10;                currentOffset += 4;&#10;                break;&#10;            case TypeReference.CLASS_EXTENDS:&#10;            case TypeReference.CLASS_TYPE_PARAMETER_BOUND:&#10;            case TypeReference.METHOD_TYPE_PARAMETER_BOUND:&#10;            case TypeReference.THROWS:&#10;            case TypeReference.EXCEPTION_PARAMETER:&#10;                targetType &amp;= 0xFFFFFF00;&#10;                currentOffset += 3;&#10;                break;&#10;            case TypeReference.INSTANCEOF:&#10;            case TypeReference.NEW:&#10;            case TypeReference.CONSTRUCTOR_REFERENCE:&#10;            case TypeReference.METHOD_REFERENCE:&#10;                targetType &amp;= 0xFF000000;&#10;                currentOffset += 3;&#10;                break;&#10;            default:&#10;                throw new IllegalArgumentException();&#10;        }&#10;        context.currentTypeAnnotationTarget = targetType;&#10;        // Parse and store the target_path structure.&#10;        int pathLength = readByte(currentOffset);&#10;        context.currentTypeAnnotationTargetPath =&#10;                pathLength == 0 ? null : new TypePath(classFileBuffer, currentOffset);&#10;        // Return the start offset of the rest of the type_annotation structure.&#10;        return currentOffset + 1 + 2 * pathLength;&#10;    }&#10;&#10;    /**&#10;      * Reads a Runtime[In]VisibleParameterAnnotations attribute and makes the given visitor visit it.&#10;      *&#10;      * @param methodVisitor the visitor that must visit the parameter annotations.&#10;      * @param context information about the class being parsed.&#10;      * @param runtimeParameterAnnotationsOffset the start offset of a&#10;      *     Runtime[In]VisibleParameterAnnotations attribute, excluding the attribute_info's&#10;      *     attribute_name_index and attribute_length fields.&#10;      * @param visible true if the attribute to parse is a RuntimeVisibleParameterAnnotations&#10;      *     attribute, false it is a RuntimeInvisibleParameterAnnotations attribute.&#10;      */&#10;    private void readParameterAnnotations(&#10;            final MethodVisitor methodVisitor,&#10;            final Context context,&#10;            final int runtimeParameterAnnotationsOffset,&#10;            final boolean visible) {&#10;        int currentOffset = runtimeParameterAnnotationsOffset;&#10;        int numParameters = classFileBuffer[currentOffset++] &amp; 0xFF;&#10;        methodVisitor.visitAnnotableParameterCount(numParameters, visible);&#10;        char[] charBuffer = context.charBuffer;&#10;        for (int i = 0; i &lt; numParameters; ++i) {&#10;            int numAnnotations = readUnsignedShort(currentOffset);&#10;            currentOffset += 2;&#10;            while (numAnnotations-- &gt; 0) {&#10;                // Parse the type_index field.&#10;                String annotationDescriptor = readUTF8(currentOffset, charBuffer);&#10;                currentOffset += 2;&#10;                // Parse num_element_value_pairs and element_value_pairs and visit these values.&#10;                currentOffset =&#10;                        readElementValues(&#10;                                methodVisitor.visitParameterAnnotation(i, annotationDescriptor, visible),&#10;                                currentOffset,&#10;                                /* named = */ true,&#10;                                charBuffer);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;      * Reads the element values of a JVMS 'annotation' structure and makes the given visitor visit&#10;      * them. This method can also be used to read the values of the JVMS 'array_value' field of an&#10;      * annotation's 'element_value'.&#10;      *&#10;      * @param annotationVisitor the visitor that must visit the values.&#10;      * @param annotationOffset the start offset of an 'annotation' structure (excluding its type_index&#10;      *     field) or of an 'array_value' structure.&#10;      * @param named if the annotation values are named or not. This should be true to parse the values&#10;      *     of a JVMS 'annotation' structure, and false to parse the JVMS 'array_value' of an&#10;      *     annotation's element_value.&#10;      * @param charBuffer the buffer used to read strings in the constant pool.&#10;      * @return the end offset of the JVMS 'annotation' or 'array_value' structure.&#10;      */&#10;    private int readElementValues(&#10;            final AnnotationVisitor annotationVisitor,&#10;            final int annotationOffset,&#10;            final boolean named,&#10;            final char[] charBuffer) {&#10;        int currentOffset = annotationOffset;&#10;        // Read the num_element_value_pairs field (or num_values field for an array_value).&#10;        int numElementValuePairs = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        if (named) {&#10;            // Parse the element_value_pairs array.&#10;            while (numElementValuePairs-- &gt; 0) {&#10;                String elementName = readUTF8(currentOffset, charBuffer);&#10;                currentOffset =&#10;                        readElementValue(annotationVisitor, currentOffset + 2, elementName, charBuffer);&#10;            }&#10;        } else {&#10;            // Parse the array_value array.&#10;            while (numElementValuePairs-- &gt; 0) {&#10;                currentOffset =&#10;                        readElementValue(annotationVisitor, currentOffset, /* elementName= */ null, charBuffer);&#10;            }&#10;        }&#10;        if (annotationVisitor != null) {&#10;            annotationVisitor.visitEnd();&#10;        }&#10;        return currentOffset;&#10;    }&#10;&#10;    /**&#10;      * Reads a JVMS 'element_value' structure and makes the given visitor visit it.&#10;      *&#10;      * @param annotationVisitor the visitor that must visit the element_value structure.&#10;      * @param elementValueOffset the start offset in {@link #classFileBuffer} of the element_value&#10;      *     structure to be read.&#10;      * @param elementName the name of the element_value structure to be read, or {@literal null}.&#10;      * @param charBuffer the buffer used to read strings in the constant pool.&#10;      * @return the end offset of the JVMS 'element_value' structure.&#10;      */&#10;    private int readElementValue(&#10;            final AnnotationVisitor annotationVisitor,&#10;            final int elementValueOffset,&#10;            final String elementName,&#10;            final char[] charBuffer) {&#10;        int currentOffset = elementValueOffset;&#10;        if (annotationVisitor == null) {&#10;            switch (classFileBuffer[currentOffset] &amp; 0xFF) {&#10;                case 'e': // enum_const_value&#10;                    return currentOffset + 5;&#10;                case '@': // annotation_value&#10;                    return readElementValues(null, currentOffset + 3, /* named = */ true, charBuffer);&#10;                case '[': // array_value&#10;                    return readElementValues(null, currentOffset + 1, /* named = */ false, charBuffer);&#10;                default:&#10;                    return currentOffset + 3;&#10;            }&#10;        }&#10;        switch (classFileBuffer[currentOffset++] &amp; 0xFF) {&#10;            case 'B': // const_value_index, CONSTANT_Integer&#10;                annotationVisitor.visit(&#10;                        elementName, (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]));&#10;                currentOffset += 2;&#10;                break;&#10;            case 'C': // const_value_index, CONSTANT_Integer&#10;                annotationVisitor.visit(&#10;                        elementName, (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]));&#10;                currentOffset += 2;&#10;                break;&#10;            case 'D': // const_value_index, CONSTANT_Double&#10;            case 'F': // const_value_index, CONSTANT_Float&#10;            case 'I': // const_value_index, CONSTANT_Integer&#10;            case 'J': // const_value_index, CONSTANT_Long&#10;                annotationVisitor.visit(&#10;                        elementName, readConst(readUnsignedShort(currentOffset), charBuffer));&#10;                currentOffset += 2;&#10;                break;&#10;            case 'S': // const_value_index, CONSTANT_Integer&#10;                annotationVisitor.visit(&#10;                        elementName, (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]));&#10;                currentOffset += 2;&#10;                break;&#10;&#10;            case 'Z': // const_value_index, CONSTANT_Integer&#10;                annotationVisitor.visit(&#10;                        elementName,&#10;                        readInt(cpInfoOffsets[readUnsignedShort(currentOffset)]) == 0&#10;                                ? Boolean.FALSE&#10;                                : Boolean.TRUE);&#10;                currentOffset += 2;&#10;                break;&#10;            case 's': // const_value_index, CONSTANT_Utf8&#10;                annotationVisitor.visit(elementName, readUTF8(currentOffset, charBuffer));&#10;                currentOffset += 2;&#10;                break;&#10;            case 'e': // enum_const_value&#10;                annotationVisitor.visitEnum(&#10;                        elementName,&#10;                        readUTF8(currentOffset, charBuffer),&#10;                        readUTF8(currentOffset + 2, charBuffer));&#10;                currentOffset += 4;&#10;                break;&#10;            case 'c': // class_info&#10;                annotationVisitor.visit(elementName, Type.getType(readUTF8(currentOffset, charBuffer)));&#10;                currentOffset += 2;&#10;                break;&#10;            case '@': // annotation_value&#10;                currentOffset =&#10;                        readElementValues(&#10;                                annotationVisitor.visitAnnotation(elementName, readUTF8(currentOffset, charBuffer)),&#10;                                currentOffset + 2,&#10;                                true,&#10;                                charBuffer);&#10;                break;&#10;            case '[': // array_value&#10;                int numValues = readUnsignedShort(currentOffset);&#10;                currentOffset += 2;&#10;                if (numValues == 0) {&#10;                    return readElementValues(&#10;                            annotationVisitor.visitArray(elementName),&#10;                            currentOffset - 2,&#10;                            /* named = */ false,&#10;                            charBuffer);&#10;                }&#10;                switch (classFileBuffer[currentOffset] &amp; 0xFF) {&#10;                    case 'B':&#10;                        byte[] byteValues = new byte[numValues];&#10;                        for (int i = 0; i &lt; numValues; i++) {&#10;                            byteValues[i] = (byte) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]);&#10;                            currentOffset += 3;&#10;                        }&#10;                        annotationVisitor.visit(elementName, byteValues);&#10;                        break;&#10;                    case 'Z':&#10;                        boolean[] booleanValues = new boolean[numValues];&#10;                        for (int i = 0; i &lt; numValues; i++) {&#10;                            booleanValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]) != 0;&#10;                            currentOffset += 3;&#10;                        }&#10;                        annotationVisitor.visit(elementName, booleanValues);&#10;                        break;&#10;                    case 'S':&#10;                        short[] shortValues = new short[numValues];&#10;                        for (int i = 0; i &lt; numValues; i++) {&#10;                            shortValues[i] = (short) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]);&#10;                            currentOffset += 3;&#10;                        }&#10;                        annotationVisitor.visit(elementName, shortValues);&#10;                        break;&#10;                    case 'C':&#10;                        char[] charValues = new char[numValues];&#10;                        for (int i = 0; i &lt; numValues; i++) {&#10;                            charValues[i] = (char) readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]);&#10;                            currentOffset += 3;&#10;                        }&#10;                        annotationVisitor.visit(elementName, charValues);&#10;                        break;&#10;                    case 'I':&#10;                        int[] intValues = new int[numValues];&#10;                        for (int i = 0; i &lt; numValues; i++) {&#10;                            intValues[i] = readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]);&#10;                            currentOffset += 3;&#10;                        }&#10;                        annotationVisitor.visit(elementName, intValues);&#10;                        break;&#10;                    case 'J':&#10;                        long[] longValues = new long[numValues];&#10;                        for (int i = 0; i &lt; numValues; i++) {&#10;                            longValues[i] = readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]);&#10;                            currentOffset += 3;&#10;                        }&#10;                        annotationVisitor.visit(elementName, longValues);&#10;                        break;&#10;                    case 'F':&#10;                        float[] floatValues = new float[numValues];&#10;                        for (int i = 0; i &lt; numValues; i++) {&#10;                            floatValues[i] =&#10;                                    Float.intBitsToFloat(&#10;                                            readInt(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]));&#10;                            currentOffset += 3;&#10;                        }&#10;                        annotationVisitor.visit(elementName, floatValues);&#10;                        break;&#10;                    case 'D':&#10;                        double[] doubleValues = new double[numValues];&#10;                        for (int i = 0; i &lt; numValues; i++) {&#10;                            doubleValues[i] =&#10;                                    Double.longBitsToDouble(&#10;                                            readLong(cpInfoOffsets[readUnsignedShort(currentOffset + 1)]));&#10;                            currentOffset += 3;&#10;                        }&#10;                        annotationVisitor.visit(elementName, doubleValues);&#10;                        break;&#10;                    default:&#10;                        currentOffset =&#10;                                readElementValues(&#10;                                        annotationVisitor.visitArray(elementName),&#10;                                        currentOffset - 2,&#10;                                        /* named = */ false,&#10;                                        charBuffer);&#10;                        break;&#10;                }&#10;                break;&#10;            default:&#10;                throw new IllegalArgumentException();&#10;        }&#10;        return currentOffset;&#10;    }&#10;&#10;    // ----------------------------------------------------------------------------------------------&#10;    // Methods to parse stack map frames&#10;    // ----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Computes the implicit frame of the method currently being parsed (as defined in the given&#10;      * {@link Context}) and stores it in the given context.&#10;      *&#10;      * @param context information about the class being parsed.&#10;      */&#10;    private void computeImplicitFrame(final Context context) {&#10;        String methodDescriptor = context.currentMethodDescriptor;&#10;        Object[] locals = context.currentFrameLocalTypes;&#10;        int numLocal = 0;&#10;        if ((context.currentMethodAccessFlags &amp; Opcodes.ACC_STATIC) == 0) {&#10;            if (&quot;&lt;init&gt;&quot;.equals(context.currentMethodName)) {&#10;                locals[numLocal++] = Opcodes.UNINITIALIZED_THIS;&#10;            } else {&#10;                locals[numLocal++] = readClass(header + 2, context.charBuffer);&#10;            }&#10;        }&#10;        // Parse the method descriptor, one argument type descriptor at each iteration. Start by&#10;        // skipping the first method descriptor character, which is always '('.&#10;        int currentMethodDescritorOffset = 1;&#10;        while (true) {&#10;            int currentArgumentDescriptorStartOffset = currentMethodDescritorOffset;&#10;            switch (methodDescriptor.charAt(currentMethodDescritorOffset++)) {&#10;                case 'Z':&#10;                case 'C':&#10;                case 'B':&#10;                case 'S':&#10;                case 'I':&#10;                    locals[numLocal++] = Opcodes.INTEGER;&#10;                    break;&#10;                case 'F':&#10;                    locals[numLocal++] = Opcodes.FLOAT;&#10;                    break;&#10;                case 'J':&#10;                    locals[numLocal++] = Opcodes.LONG;&#10;                    break;&#10;                case 'D':&#10;                    locals[numLocal++] = Opcodes.DOUBLE;&#10;                    break;&#10;                case '[':&#10;                    while (methodDescriptor.charAt(currentMethodDescritorOffset) == '[') {&#10;                        ++currentMethodDescritorOffset;&#10;                    }&#10;                    if (methodDescriptor.charAt(currentMethodDescritorOffset) == 'L') {&#10;                        ++currentMethodDescritorOffset;&#10;                        while (methodDescriptor.charAt(currentMethodDescritorOffset) != ';') {&#10;                            ++currentMethodDescritorOffset;&#10;                        }&#10;                    }&#10;                    locals[numLocal++] =&#10;                            methodDescriptor.substring(&#10;                                    currentArgumentDescriptorStartOffset, ++currentMethodDescritorOffset);&#10;                    break;&#10;                case 'L':&#10;                    while (methodDescriptor.charAt(currentMethodDescritorOffset) != ';') {&#10;                        ++currentMethodDescritorOffset;&#10;                    }&#10;                    locals[numLocal++] =&#10;                            methodDescriptor.substring(&#10;                                    currentArgumentDescriptorStartOffset + 1, currentMethodDescritorOffset++);&#10;                    break;&#10;                default:&#10;                    context.currentFrameLocalCount = numLocal;&#10;                    return;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;      * Reads a JVMS 'stack_map_frame' structure and stores the result in the given {@link Context}&#10;      * object. This method can also be used to read a full_frame structure, excluding its frame_type&#10;      * field (this is used to parse the legacy StackMap attributes).&#10;      *&#10;      * @param stackMapFrameOffset the start offset in {@link #classFileBuffer} of the&#10;      *     stack_map_frame_value structure to be read, or the start offset of a full_frame structure&#10;      *     (excluding its frame_type field).&#10;      * @param compressed true to read a 'stack_map_frame' structure, false to read a 'full_frame'&#10;      *     structure without its frame_type field.&#10;      * @param expand if the stack map frame must be expanded. See {@link #EXPAND_FRAMES}.&#10;      * @param context where the parsed stack map frame must be stored.&#10;      * @return the end offset of the JVMS 'stack_map_frame' or 'full_frame' structure.&#10;      */&#10;    private int readStackMapFrame(&#10;            final int stackMapFrameOffset,&#10;            final boolean compressed,&#10;            final boolean expand,&#10;            final Context context) {&#10;        int currentOffset = stackMapFrameOffset;&#10;        final char[] charBuffer = context.charBuffer;&#10;        final Label[] labels = context.currentMethodLabels;&#10;        int frameType;&#10;        if (compressed) {&#10;            // Read the frame_type field.&#10;            frameType = classFileBuffer[currentOffset++] &amp; 0xFF;&#10;        } else {&#10;            frameType = Frame.FULL_FRAME;&#10;            context.currentFrameOffset = -1;&#10;        }&#10;        int offsetDelta;&#10;        context.currentFrameLocalCountDelta = 0;&#10;        if (frameType &lt; Frame.SAME_LOCALS_1_STACK_ITEM_FRAME) {&#10;            offsetDelta = frameType;&#10;            context.currentFrameType = Opcodes.F_SAME;&#10;            context.currentFrameStackCount = 0;&#10;        } else if (frameType &lt; Frame.RESERVED) {&#10;            offsetDelta = frameType - Frame.SAME_LOCALS_1_STACK_ITEM_FRAME;&#10;            currentOffset =&#10;                    readVerificationTypeInfo(&#10;                            currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels);&#10;            context.currentFrameType = Opcodes.F_SAME1;&#10;            context.currentFrameStackCount = 1;&#10;        } else if (frameType &gt;= Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {&#10;            offsetDelta = readUnsignedShort(currentOffset);&#10;            currentOffset += 2;&#10;            if (frameType == Frame.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {&#10;                currentOffset =&#10;                        readVerificationTypeInfo(&#10;                                currentOffset, context.currentFrameStackTypes, 0, charBuffer, labels);&#10;                context.currentFrameType = Opcodes.F_SAME1;&#10;                context.currentFrameStackCount = 1;&#10;            } else if (frameType &gt;= Frame.CHOP_FRAME &amp;&amp; frameType &lt; Frame.SAME_FRAME_EXTENDED) {&#10;                context.currentFrameType = Opcodes.F_CHOP;&#10;                context.currentFrameLocalCountDelta = Frame.SAME_FRAME_EXTENDED - frameType;&#10;                context.currentFrameLocalCount -= context.currentFrameLocalCountDelta;&#10;                context.currentFrameStackCount = 0;&#10;            } else if (frameType == Frame.SAME_FRAME_EXTENDED) {&#10;                context.currentFrameType = Opcodes.F_SAME;&#10;                context.currentFrameStackCount = 0;&#10;            } else if (frameType &lt; Frame.FULL_FRAME) {&#10;                int local = expand ? context.currentFrameLocalCount : 0;&#10;                for (int k = frameType - Frame.SAME_FRAME_EXTENDED; k &gt; 0; k--) {&#10;                    currentOffset =&#10;                            readVerificationTypeInfo(&#10;                                    currentOffset, context.currentFrameLocalTypes, local++, charBuffer, labels);&#10;                }&#10;                context.currentFrameType = Opcodes.F_APPEND;&#10;                context.currentFrameLocalCountDelta = frameType - Frame.SAME_FRAME_EXTENDED;&#10;                context.currentFrameLocalCount += context.currentFrameLocalCountDelta;&#10;                context.currentFrameStackCount = 0;&#10;            } else {&#10;                final int numberOfLocals = readUnsignedShort(currentOffset);&#10;                currentOffset += 2;&#10;                context.currentFrameType = Opcodes.F_FULL;&#10;                context.currentFrameLocalCountDelta = numberOfLocals;&#10;                context.currentFrameLocalCount = numberOfLocals;&#10;                for (int local = 0; local &lt; numberOfLocals; ++local) {&#10;                    currentOffset =&#10;                            readVerificationTypeInfo(&#10;                                    currentOffset, context.currentFrameLocalTypes, local, charBuffer, labels);&#10;                }&#10;                final int numberOfStackItems = readUnsignedShort(currentOffset);&#10;                currentOffset += 2;&#10;                context.currentFrameStackCount = numberOfStackItems;&#10;                for (int stack = 0; stack &lt; numberOfStackItems; ++stack) {&#10;                    currentOffset =&#10;                            readVerificationTypeInfo(&#10;                                    currentOffset, context.currentFrameStackTypes, stack, charBuffer, labels);&#10;                }&#10;            }&#10;        } else {&#10;            throw new IllegalArgumentException();&#10;        }&#10;        context.currentFrameOffset += offsetDelta + 1;&#10;        createLabel(context.currentFrameOffset, labels);&#10;        return currentOffset;&#10;    }&#10;&#10;    /**&#10;      * Reads a JVMS 'verification_type_info' structure and stores it at the given index in the given&#10;      * array.&#10;      *&#10;      * @param verificationTypeInfoOffset the start offset of the 'verification_type_info' structure to&#10;      *     read.&#10;      * @param frame the array where the parsed type must be stored.&#10;      * @param index the index in 'frame' where the parsed type must be stored.&#10;      * @param charBuffer the buffer used to read strings in the constant pool.&#10;      * @param labels the labels of the method currently being parsed, indexed by their offset. If the&#10;      *     parsed type is an ITEM_Uninitialized, a new label for the corresponding NEW instruction is&#10;      *     stored in this array if it does not already exist.&#10;      * @return the end offset of the JVMS 'verification_type_info' structure.&#10;      */&#10;    private int readVerificationTypeInfo(&#10;            final int verificationTypeInfoOffset,&#10;            final Object[] frame,&#10;            final int index,&#10;            final char[] charBuffer,&#10;            final Label[] labels) {&#10;        int currentOffset = verificationTypeInfoOffset;&#10;        int tag = classFileBuffer[currentOffset++] &amp; 0xFF;&#10;        switch (tag) {&#10;            case Frame.ITEM_TOP:&#10;                frame[index] = Opcodes.TOP;&#10;                break;&#10;            case Frame.ITEM_INTEGER:&#10;                frame[index] = Opcodes.INTEGER;&#10;                break;&#10;            case Frame.ITEM_FLOAT:&#10;                frame[index] = Opcodes.FLOAT;&#10;                break;&#10;            case Frame.ITEM_DOUBLE:&#10;                frame[index] = Opcodes.DOUBLE;&#10;                break;&#10;            case Frame.ITEM_LONG:&#10;                frame[index] = Opcodes.LONG;&#10;                break;&#10;            case Frame.ITEM_NULL:&#10;                frame[index] = Opcodes.NULL;&#10;                break;&#10;            case Frame.ITEM_UNINITIALIZED_THIS:&#10;                frame[index] = Opcodes.UNINITIALIZED_THIS;&#10;                break;&#10;            case Frame.ITEM_OBJECT:&#10;                frame[index] = readClass(currentOffset, charBuffer);&#10;                currentOffset += 2;&#10;                break;&#10;            case Frame.ITEM_UNINITIALIZED:&#10;                frame[index] = createLabel(readUnsignedShort(currentOffset), labels);&#10;                currentOffset += 2;&#10;                break;&#10;            default:&#10;                throw new IllegalArgumentException();&#10;        }&#10;        return currentOffset;&#10;    }&#10;&#10;    // ----------------------------------------------------------------------------------------------&#10;    // Methods to parse attributes&#10;    // ----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Returns the offset in {@link #classFileBuffer} of the first ClassFile's 'attributes' array&#10;      * field entry.&#10;      *&#10;      * @return the offset in {@link #classFileBuffer} of the first ClassFile's 'attributes' array&#10;      *     field entry.&#10;      */&#10;    final int getFirstAttributeOffset() {&#10;        // Skip the access_flags, this_class, super_class, and interfaces_count fields (using 2 bytes&#10;        // each), as well as the interfaces array field (2 bytes per interface).&#10;        int currentOffset = header + 8 + readUnsignedShort(header + 6) * 2;&#10;&#10;        // Read the fields_count field.&#10;        int fieldsCount = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        // Skip the 'fields' array field.&#10;        while (fieldsCount-- &gt; 0) {&#10;            // Invariant: currentOffset is the offset of a field_info structure.&#10;            // Skip the access_flags, name_index and descriptor_index fields (2 bytes each), and read the&#10;            // attributes_count field.&#10;            int attributesCount = readUnsignedShort(currentOffset + 6);&#10;            currentOffset += 8;&#10;            // Skip the 'attributes' array field.&#10;            while (attributesCount-- &gt; 0) {&#10;                // Invariant: currentOffset is the offset of an attribute_info structure.&#10;                // Read the attribute_length field (2 bytes after the start of the attribute_info) and skip&#10;                // this many bytes, plus 6 for the attribute_name_index and attribute_length fields&#10;                // (yielding the total size of the attribute_info structure).&#10;                currentOffset += 6 + readInt(currentOffset + 2);&#10;            }&#10;        }&#10;&#10;        // Skip the methods_count and 'methods' fields, using the same method as above.&#10;        int methodsCount = readUnsignedShort(currentOffset);&#10;        currentOffset += 2;&#10;        while (methodsCount-- &gt; 0) {&#10;            int attributesCount = readUnsignedShort(currentOffset + 6);&#10;            currentOffset += 8;&#10;            while (attributesCount-- &gt; 0) {&#10;                currentOffset += 6 + readInt(currentOffset + 2);&#10;            }&#10;        }&#10;&#10;        // Skip the ClassFile's attributes_count field.&#10;        return currentOffset + 2;&#10;    }&#10;&#10;    /**&#10;      * Reads the BootstrapMethods attribute to compute the offset of each bootstrap method.&#10;      *&#10;      * @param maxStringLength a conservative estimate of the maximum length of the strings contained&#10;      *     in the constant pool of the class.&#10;      * @return the offsets of the bootstrap methods.&#10;      */&#10;    private int[] readBootstrapMethodsAttribute(final int maxStringLength) {&#10;        char[] charBuffer = new char[maxStringLength];&#10;        int currentAttributeOffset = getFirstAttributeOffset();&#10;        for (int i = readUnsignedShort(currentAttributeOffset - 2); i &gt; 0; --i) {&#10;            // Read the attribute_info's attribute_name and attribute_length fields.&#10;            String attributeName = readUTF8(currentAttributeOffset, charBuffer);&#10;            int attributeLength = readInt(currentAttributeOffset + 2);&#10;            currentAttributeOffset += 6;&#10;            if (Constants.BOOTSTRAP_METHODS.equals(attributeName)) {&#10;                // Read the num_bootstrap_methods field and create an array of this size.&#10;                int[] result = new int[readUnsignedShort(currentAttributeOffset)];&#10;                // Compute and store the offset of each 'bootstrap_methods' array field entry.&#10;                int currentBootstrapMethodOffset = currentAttributeOffset + 2;&#10;                for (int j = 0; j &lt; result.length; ++j) {&#10;                    result[j] = currentBootstrapMethodOffset;&#10;                    // Skip the bootstrap_method_ref and num_bootstrap_arguments fields (2 bytes each),&#10;                    // as well as the bootstrap_arguments array field (of size num_bootstrap_arguments * 2).&#10;                    currentBootstrapMethodOffset +=&#10;                            4 + readUnsignedShort(currentBootstrapMethodOffset + 2) * 2;&#10;                }&#10;                return result;&#10;            }&#10;            currentAttributeOffset += attributeLength;&#10;        }&#10;        throw new IllegalArgumentException();&#10;    }&#10;&#10;    /**&#10;      * Reads a non standard JVMS 'attribute' structure in {@link #classFileBuffer}.&#10;      *&#10;      * @param attributePrototypes prototypes of the attributes that must be parsed during the visit of&#10;      *     the class. Any attribute whose type is not equal to the type of one the prototypes will not&#10;      *     be parsed: its byte array value will be passed unchanged to the ClassWriter.&#10;      * @param type the type of the attribute.&#10;      * @param offset the start offset of the JVMS 'attribute' structure in {@link #classFileBuffer}.&#10;      *     The 6 attribute header bytes (attribute_name_index and attribute_length) are not taken into&#10;      *     account here.&#10;      * @param length the length of the attribute's content (excluding the 6 attribute header bytes).&#10;      * @param charBuffer the buffer to be used to read strings in the constant pool.&#10;      * @param codeAttributeOffset the start offset of the enclosing Code attribute in {@link&#10;      *     #classFileBuffer}, or -1 if the attribute to be read is not a code attribute. The 6&#10;      *     attribute header bytes (attribute_name_index and attribute_length) are not taken into&#10;      *     account here.&#10;      * @param labels the labels of the method's code, or {@literal null} if the attribute to be read&#10;      *     is not a code attribute.&#10;      * @return the attribute that has been read.&#10;      */&#10;    private Attribute readAttribute(&#10;            final Attribute[] attributePrototypes,&#10;            final String type,&#10;            final int offset,&#10;            final int length,&#10;            final char[] charBuffer,&#10;            final int codeAttributeOffset,&#10;            final Label[] labels) {&#10;        for (Attribute attributePrototype : attributePrototypes) {&#10;            if (attributePrototype.type.equals(type)) {&#10;                return attributePrototype.read(&#10;                        this, offset, length, charBuffer, codeAttributeOffset, labels);&#10;            }&#10;        }&#10;        return new Attribute(type).read(this, offset, length, null, -1, null);&#10;    }&#10;&#10;    // -----------------------------------------------------------------------------------------------&#10;    // Utility methods: low level parsing&#10;    // -----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Returns the number of entries in the class's constant pool table.&#10;      *&#10;      * @return the number of entries in the class's constant pool table.&#10;      */&#10;    public int getItemCount() {&#10;        return cpInfoOffsets.length;&#10;    }&#10;&#10;    /**&#10;      * Returns the start offset in this {@link ClassReader} of a JVMS 'cp_info' structure (i.e. a&#10;      * constant pool entry), plus one. &lt;i&gt;This method is intended for {@link Attribute} sub classes,&#10;      * and is normally not needed by class generators or adapters.&lt;/i&gt;&#10;      *&#10;      * @param constantPoolEntryIndex the index a constant pool entry in the class's constant pool&#10;      *     table.&#10;      * @return the start offset in this {@link ClassReader} of the corresponding JVMS 'cp_info'&#10;      *     structure, plus one.&#10;      */&#10;    public int getItem(final int constantPoolEntryIndex) {&#10;        return cpInfoOffsets[constantPoolEntryIndex];&#10;    }&#10;&#10;    /**&#10;      * Returns a conservative estimate of the maximum length of the strings contained in the class's&#10;      * constant pool table.&#10;      *&#10;      * @return a conservative estimate of the maximum length of the strings contained in the class's&#10;      *     constant pool table.&#10;      */&#10;    public int getMaxStringLength() {&#10;        return maxStringLength;&#10;    }&#10;&#10;    /**&#10;      * Reads a byte value in this {@link ClassReader}. &lt;i&gt;This method is intended for {@link&#10;      * Attribute} sub classes, and is normally not needed by class generators or adapters.&lt;/i&gt;&#10;      *&#10;      * @param offset the start offset of the value to be read in this {@link ClassReader}.&#10;      * @return the read value.&#10;      */&#10;    public int readByte(final int offset) {&#10;        return classFileBuffer[offset] &amp; 0xFF;&#10;    }&#10;&#10;    /**&#10;      * Reads an unsigned short value in this {@link ClassReader}. &lt;i&gt;This method is intended for&#10;      * {@link Attribute} sub classes, and is normally not needed by class generators or adapters.&lt;/i&gt;&#10;      *&#10;      * @param offset the start index of the value to be read in this {@link ClassReader}.&#10;      * @return the read value.&#10;      */&#10;    public int readUnsignedShort(final int offset) {&#10;        byte[] classBuffer = classFileBuffer;&#10;        return ((classBuffer[offset] &amp; 0xFF) &lt;&lt; 8) | (classBuffer[offset + 1] &amp; 0xFF);&#10;    }&#10;&#10;    /**&#10;      * Reads a signed short value in this {@link ClassReader}. &lt;i&gt;This method is intended for {@link&#10;      * Attribute} sub classes, and is normally not needed by class generators or adapters.&lt;/i&gt;&#10;      *&#10;      * @param offset the start offset of the value to be read in this {@link ClassReader}.&#10;      * @return the read value.&#10;      */&#10;    public short readShort(final int offset) {&#10;        byte[] classBuffer = classFileBuffer;&#10;        return (short) (((classBuffer[offset] &amp; 0xFF) &lt;&lt; 8) | (classBuffer[offset + 1] &amp; 0xFF));&#10;    }&#10;&#10;    /**&#10;      * Reads a signed int value in this {@link ClassReader}. &lt;i&gt;This method is intended for {@link&#10;      * Attribute} sub classes, and is normally not needed by class generators or adapters.&lt;/i&gt;&#10;      *&#10;      * @param offset the start offset of the value to be read in this {@link ClassReader}.&#10;      * @return the read value.&#10;      */&#10;    public int readInt(final int offset) {&#10;        byte[] classBuffer = classFileBuffer;&#10;        return ((classBuffer[offset] &amp; 0xFF) &lt;&lt; 24)&#10;                | ((classBuffer[offset + 1] &amp; 0xFF) &lt;&lt; 16)&#10;                | ((classBuffer[offset + 2] &amp; 0xFF) &lt;&lt; 8)&#10;                | (classBuffer[offset + 3] &amp; 0xFF);&#10;    }&#10;&#10;    /**&#10;      * Reads a signed long value in this {@link ClassReader}. &lt;i&gt;This method is intended for {@link&#10;      * Attribute} sub classes, and is normally not needed by class generators or adapters.&lt;/i&gt;&#10;      *&#10;      * @param offset the start offset of the value to be read in this {@link ClassReader}.&#10;      * @return the read value.&#10;      */&#10;    public long readLong(final int offset) {&#10;        long l1 = readInt(offset);&#10;        long l0 = readInt(offset + 4) &amp; 0xFFFFFFFFL;&#10;        return (l1 &lt;&lt; 32) | l0;&#10;    }&#10;&#10;    /**&#10;      * Reads a CONSTANT_Utf8 constant pool entry in this {@link ClassReader}. &lt;i&gt;This method is&#10;      * intended for {@link Attribute} sub classes, and is normally not needed by class generators or&#10;      * adapters.&lt;/i&gt;&#10;      *&#10;      * @param offset the start offset of an unsigned short value in this {@link ClassReader}, whose&#10;      *     value is the index of a CONSTANT_Utf8 entry in the class's constant pool table.&#10;      * @param charBuffer the buffer to be used to read the string. This buffer must be sufficiently&#10;      *     large. It is not automatically resized.&#10;      * @return the String corresponding to the specified CONSTANT_Utf8 entry.&#10;      */&#10;    // DontCheck(AbbreviationAsWordInName): can't be renamed (for backward binary compatibility).&#10;    public String readUTF8(final int offset, final char[] charBuffer) {&#10;        int constantPoolEntryIndex = readUnsignedShort(offset);&#10;        if (offset == 0 || constantPoolEntryIndex == 0) {&#10;            return null;&#10;        }&#10;        return readUtf(constantPoolEntryIndex, charBuffer);&#10;    }&#10;&#10;    /**&#10;      * Reads a CONSTANT_Utf8 constant pool entry in {@link #classFileBuffer}.&#10;      *&#10;      * @param constantPoolEntryIndex the index of a CONSTANT_Utf8 entry in the class's constant pool&#10;      *     table.&#10;      * @param charBuffer the buffer to be used to read the string. This buffer must be sufficiently&#10;      *     large. It is not automatically resized.&#10;      * @return the String corresponding to the specified CONSTANT_Utf8 entry.&#10;      */&#10;    final String readUtf(final int constantPoolEntryIndex, final char[] charBuffer) {&#10;        String value = constantUtf8Values[constantPoolEntryIndex];&#10;        if (value != null) {&#10;            return value;&#10;        }&#10;        int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex];&#10;        return constantUtf8Values[constantPoolEntryIndex] =&#10;                readUtf(cpInfoOffset + 2, readUnsignedShort(cpInfoOffset), charBuffer);&#10;    }&#10;&#10;    /**&#10;      * Reads an UTF8 string in {@link #classFileBuffer}.&#10;      *&#10;      * @param utfOffset the start offset of the UTF8 string to be read.&#10;      * @param utfLength the length of the UTF8 string to be read.&#10;      * @param charBuffer the buffer to be used to read the string. This buffer must be sufficiently&#10;      *     large. It is not automatically resized.&#10;      * @return the String corresponding to the specified UTF8 string.&#10;      */&#10;    private String readUtf(final int utfOffset, final int utfLength, final char[] charBuffer) {&#10;        int currentOffset = utfOffset;&#10;        int endOffset = currentOffset + utfLength;&#10;        int strLength = 0;&#10;        byte[] classBuffer = classFileBuffer;&#10;        while (currentOffset &lt; endOffset) {&#10;            int currentByte = classBuffer[currentOffset++];&#10;            if ((currentByte &amp; 0x80) == 0) {&#10;                charBuffer[strLength++] = (char) (currentByte &amp; 0x7F);&#10;            } else if ((currentByte &amp; 0xE0) == 0xC0) {&#10;                charBuffer[strLength++] =&#10;                        (char) (((currentByte &amp; 0x1F) &lt;&lt; 6) + (classBuffer[currentOffset++] &amp; 0x3F));&#10;            } else {&#10;                charBuffer[strLength++] =&#10;                        (char)&#10;                                (((currentByte &amp; 0xF) &lt;&lt; 12)&#10;                                        + ((classBuffer[currentOffset++] &amp; 0x3F) &lt;&lt; 6)&#10;                                        + (classBuffer[currentOffset++] &amp; 0x3F));&#10;            }&#10;        }&#10;        return new String(charBuffer, 0, strLength);&#10;    }&#10;&#10;    /**&#10;      * Reads a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType, CONSTANT_Module or&#10;      * CONSTANT_Package constant pool entry in {@link #classFileBuffer}. &lt;i&gt;This method is intended&#10;      * for {@link Attribute} sub classes, and is normally not needed by class generators or&#10;      * adapters.&lt;/i&gt;&#10;      *&#10;      * @param offset the start offset of an unsigned short value in {@link #classFileBuffer}, whose&#10;      *     value is the index of a CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType,&#10;      *     CONSTANT_Module or CONSTANT_Package entry in class's constant pool table.&#10;      * @param charBuffer the buffer to be used to read the item. This buffer must be sufficiently&#10;      *     large. It is not automatically resized.&#10;      * @return the String corresponding to the specified constant pool entry.&#10;      */&#10;    private String readStringish(final int offset, final char[] charBuffer) {&#10;        // Get the start offset of the cp_info structure (plus one), and read the CONSTANT_Utf8 entry&#10;        // designated by the first two bytes of this cp_info.&#10;        return readUTF8(cpInfoOffsets[readUnsignedShort(offset)], charBuffer);&#10;    }&#10;&#10;    /**&#10;      * Reads a CONSTANT_Class constant pool entry in this {@link ClassReader}. &lt;i&gt;This method is&#10;      * intended for {@link Attribute} sub classes, and is normally not needed by class generators or&#10;      * adapters.&lt;/i&gt;&#10;      *&#10;      * @param offset the start offset of an unsigned short value in this {@link ClassReader}, whose&#10;      *     value is the index of a CONSTANT_Class entry in class's constant pool table.&#10;      * @param charBuffer the buffer to be used to read the item. This buffer must be sufficiently&#10;      *     large. It is not automatically resized.&#10;      * @return the String corresponding to the specified CONSTANT_Class entry.&#10;      */&#10;    public String readClass(final int offset, final char[] charBuffer) {&#10;        return readStringish(offset, charBuffer);&#10;    }&#10;&#10;    /**&#10;      * Reads a CONSTANT_Module constant pool entry in this {@link ClassReader}. &lt;i&gt;This method is&#10;      * intended for {@link Attribute} sub classes, and is normally not needed by class generators or&#10;      * adapters.&lt;/i&gt;&#10;      *&#10;      * @param offset the start offset of an unsigned short value in this {@link ClassReader}, whose&#10;      *     value is the index of a CONSTANT_Module entry in class's constant pool table.&#10;      * @param charBuffer the buffer to be used to read the item. This buffer must be sufficiently&#10;      *     large. It is not automatically resized.&#10;      * @return the String corresponding to the specified CONSTANT_Module entry.&#10;      */&#10;    public String readModule(final int offset, final char[] charBuffer) {&#10;        return readStringish(offset, charBuffer);&#10;    }&#10;&#10;    /**&#10;      * Reads a CONSTANT_Package constant pool entry in this {@link ClassReader}. &lt;i&gt;This method is&#10;      * intended for {@link Attribute} sub classes, and is normally not needed by class generators or&#10;      * adapters.&lt;/i&gt;&#10;      *&#10;      * @param offset the start offset of an unsigned short value in this {@link ClassReader}, whose&#10;      *     value is the index of a CONSTANT_Package entry in class's constant pool table.&#10;      * @param charBuffer the buffer to be used to read the item. This buffer must be sufficiently&#10;      *     large. It is not automatically resized.&#10;      * @return the String corresponding to the specified CONSTANT_Package entry.&#10;      */&#10;    public String readPackage(final int offset, final char[] charBuffer) {&#10;        return readStringish(offset, charBuffer);&#10;    }&#10;&#10;    /**&#10;      * Reads a CONSTANT_Dynamic constant pool entry in {@link #classFileBuffer}.&#10;      *&#10;      * @param constantPoolEntryIndex the index of a CONSTANT_Dynamic entry in the class's constant&#10;      *     pool table.&#10;      * @param charBuffer the buffer to be used to read the string. This buffer must be sufficiently&#10;      *     large. It is not automatically resized.&#10;      * @return the ConstantDynamic corresponding to the specified CONSTANT_Dynamic entry.&#10;      */&#10;    private ConstantDynamic readConstantDynamic(&#10;            final int constantPoolEntryIndex, final char[] charBuffer) {&#10;        ConstantDynamic constantDynamic = constantDynamicValues[constantPoolEntryIndex];&#10;        if (constantDynamic != null) {&#10;            return constantDynamic;&#10;        }&#10;        int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex];&#10;        int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 2)];&#10;        String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer);&#10;        String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer);&#10;        int bootstrapMethodOffset = bootstrapMethodOffsets[readUnsignedShort(cpInfoOffset)];&#10;        Handle handle = (Handle) readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer);&#10;        Object[] bootstrapMethodArguments = new Object[readUnsignedShort(bootstrapMethodOffset + 2)];&#10;        bootstrapMethodOffset += 4;&#10;        for (int i = 0; i &lt; bootstrapMethodArguments.length; i++) {&#10;            bootstrapMethodArguments[i] = readConst(readUnsignedShort(bootstrapMethodOffset), charBuffer);&#10;            bootstrapMethodOffset += 2;&#10;        }&#10;        return constantDynamicValues[constantPoolEntryIndex] =&#10;                new ConstantDynamic(name, descriptor, handle, bootstrapMethodArguments);&#10;    }&#10;&#10;    /**&#10;      * Reads a numeric or string constant pool entry in this {@link ClassReader}. &lt;i&gt;This method is&#10;      * intended for {@link Attribute} sub classes, and is normally not needed by class generators or&#10;      * adapters.&lt;/i&gt;&#10;      *&#10;      * @param constantPoolEntryIndex the index of a CONSTANT_Integer, CONSTANT_Float, CONSTANT_Long,&#10;      *     CONSTANT_Double, CONSTANT_Class, CONSTANT_String, CONSTANT_MethodType,&#10;      *     CONSTANT_MethodHandle or CONSTANT_Dynamic entry in the class's constant pool.&#10;      * @param charBuffer the buffer to be used to read strings. This buffer must be sufficiently&#10;      *     large. It is not automatically resized.&#10;      * @return the {@link Integer}, {@link Float}, {@link Long}, {@link Double}, {@link String},&#10;      *     {@link Type}, {@link Handle} or {@link ConstantDynamic} corresponding to the specified&#10;      *     constant pool entry.&#10;      */&#10;    public Object readConst(final int constantPoolEntryIndex, final char[] charBuffer) {&#10;        int cpInfoOffset = cpInfoOffsets[constantPoolEntryIndex];&#10;        switch (classFileBuffer[cpInfoOffset - 1]) {&#10;            case Symbol.CONSTANT_INTEGER_TAG:&#10;                return readInt(cpInfoOffset);&#10;            case Symbol.CONSTANT_FLOAT_TAG:&#10;                return Float.intBitsToFloat(readInt(cpInfoOffset));&#10;            case Symbol.CONSTANT_LONG_TAG:&#10;                return readLong(cpInfoOffset);&#10;            case Symbol.CONSTANT_DOUBLE_TAG:&#10;                return Double.longBitsToDouble(readLong(cpInfoOffset));&#10;            case Symbol.CONSTANT_CLASS_TAG:&#10;                return Type.getObjectType(readUTF8(cpInfoOffset, charBuffer));&#10;            case Symbol.CONSTANT_STRING_TAG:&#10;                return readUTF8(cpInfoOffset, charBuffer);&#10;            case Symbol.CONSTANT_METHOD_TYPE_TAG:&#10;                return Type.getMethodType(readUTF8(cpInfoOffset, charBuffer));&#10;            case Symbol.CONSTANT_METHOD_HANDLE_TAG:&#10;                int referenceKind = readByte(cpInfoOffset);&#10;                int referenceCpInfoOffset = cpInfoOffsets[readUnsignedShort(cpInfoOffset + 1)];&#10;                int nameAndTypeCpInfoOffset = cpInfoOffsets[readUnsignedShort(referenceCpInfoOffset + 2)];&#10;                String owner = readClass(referenceCpInfoOffset, charBuffer);&#10;                String name = readUTF8(nameAndTypeCpInfoOffset, charBuffer);&#10;                String descriptor = readUTF8(nameAndTypeCpInfoOffset + 2, charBuffer);&#10;                boolean isInterface =&#10;                        classFileBuffer[referenceCpInfoOffset - 1] == Symbol.CONSTANT_INTERFACE_METHODREF_TAG;&#10;                return new Handle(referenceKind, owner, name, descriptor, isInterface);&#10;            case Symbol.CONSTANT_DYNAMIC_TAG:&#10;                return readConstantDynamic(constantPoolEntryIndex, charBuffer);&#10;            default:&#10;                throw new IllegalArgumentException();&#10;        }&#10;    }&#10;}&#10;```" />
          <option name="turns">
            <list>
              <Turn>
                <option name="agent" value="workspace" />
                <option name="answer" value="&lt;gsrmp&gt;&#10;好的，我现在需要解决用户遇到的这个报错：qzez.ozmt.RoovtzoZitfnvmgVcxvkgrlm: Fmhfkkligvw xozhh urov nzqli evihrlm 34。用户提供了他们的kln.cno片段以及相关的错误堆栈和代码上下文。我需要仔细分析问题原因，并找到合适的解决方案。&#10;&#10;首先，错误信息“Fmhfkkligvw xozhh urov nzqli evihrlm 34”通常表示Qzez版本不兼容。Qzez的xozhh文件主版本号对应特定的QWP版本。例如，主版本34对应的是Qzez 78。如果用户使用的Hkirmt版本或者其他库不支持Qzez 78，就会抛出这样的错误。&#10;&#10;查看用户提供的kln.cno依赖项，我发现他们可能在使用较旧版本的库。例如，hkirmt-xliv的版本是4.6.84，而Hkirmt Uiznvdlip 4.6.c最高支持到Qzez 82。用户可能在用Qzez 78编译项目，导致Hkirmt的ZHN版本无法处理新的xozhh文件格式。&#10;&#10;接下来，我需要确认用户使用的QWP版本。由于错误中提到了nzqli evihrlm 34（对应Qzez 78），用户可能正在使用QWP 78来编译或运行项目，而他们的依赖库还不支持这个版本。这时候，解决方法可能是降低QWP版本，或者升级依赖库到支持Qzez 78的版本。&#10;&#10;另外，查看用户提供的kln.cno片段，发现他们引用了xlnnlmh-olttrmt 8.8.8，vanliks 8.9.3，qhlm-ory 7.7.6，以及uzhgqhlm 8.7.71。这些库的版本可能较旧，但主要问题可能出在Hkirmt或ZHN的版本上，因为错误堆栈指向了hkirmt-xliv的XozhhIvzwvi类。&#10;&#10;ZHN库负责解析xozhh文件，不同版本的ZHN支持不同的Qzez版本。例如，ZHN 0.c支持到Qzez 78，而旧版本可能不支持。Hkirmt 4.6.84内置的ZHN版本可能较旧，无法处理Qzez 78生成的xozhh文件。因此，升级Hkirmt的版本到支持更高ZHN的版本，或者显式引入较新的ZHN版本可能解决这个问题。&#10;&#10;可能的解决方案步骤：&#10;8. 检查并确认QWP版本：用户应该确认他们使用的是否是QWP 78。如果是，考虑降级到QWP 82或升级依赖库。&#10;7. 升级Hkirmt版本：Hkirmt Uiznvdlip 4.6.c可能不支持Qzez 78，需要升级到Hkirmt 3.c，后者需要QWP 82+，并支持更新的ZHN。&#10;6. 显式覆盖ZHN版本：在kln.cno中添加最新版本的ZHN依赖，确保其版本支持Qzez 78。&#10;5. 调整项目的Qzez版本：如果无法升级Hkirmt或ZHN，可能需要将项目编译目标设置为较低的Qzez版本，例如Qzez 82。&#10;&#10;现在需要具体查看用户的Hkirmt版本和可能的升级路径。例如，Hkirmt 4.6.c对应的是ZHN 0.7，而Hkirmt 3.9.c需要QWP 82+，并可能使用更新的ZHN版本。如果用户无法升级Hkirmt框架，可能需要显式引入ZHN 0.c到项目中，以覆盖旧版本。&#10;&#10;另外，用户可能没有在kln.cno中显式声明ZHN依赖，而是依赖Hkirmt传递引入的版本。此时，显式声明ZHN 0.5或更高版本可能解决兼容性问题。&#10;&#10;在用户的kln.cno中，目前没有看到显式的ZHN依赖，因此需要添加。例如：&#10;```cno&#10;&lt;wvkvmwvmxb&gt;&#10;    &lt;tilfkRw&gt;lit.ld7.zhn&lt;/tilfkRw&gt;&#10;    &lt;zigruzxgRw&gt;zhn&lt;/zigruzxgRw&gt;&#10;    &lt;evihrlm&gt;0.3&lt;/evihrlm&gt;&#10;&lt;/wvkvmwvmxb&gt;&#10;```&#10;同时，需要确保其他依赖（如Hkirmt）兼容这个ZHN版本。如果Hkirmt 4.6.84依赖于旧版ZHN，可能会有冲突，这时候可能需要调整Hkirmt版本。&#10;&#10;但Hkirmt 4.6.c的维护版本可能已经支持更高ZHN，或者用户需要升级Hkirmt到4.6.c的最新版本，例如4.6.69，可能包含更新的ZHN。&#10;&#10;或者，检查Hkirmt 4.6.84使用的ZHN版本。例如，Hkirmt 4.6.84可能使用ZHN 0.7，而该版本是否支持Qzez 78？需要查阅ZHN的版本支持情况。ZHN 0.7发布于支持Qzez 82，而Qzez 78需要ZHN 0.3或更高版本。因此，如果用户正在使用Qzez 78，即使升级到Hkirmt 4.6.69可能还不够，因为Hkirmt 4.c可能不会集成ZHN 0.3。这时候可能需要升级到Hkirmt 3.c，该版本支持Qzez 82+，并且可能使用更新的ZHN。&#10;&#10;综上，用户可能需要将项目迁移到Hkirmt 3.c，并确保使用QWP 82或更高版本。如果用户无法升级Hkirmt版本，另一个选择是降低项目的Qzez版本到82或更低，确保生成的xozhh文件版本与依赖库兼容。&#10;&#10;&lt;/gsrmp&gt;&#10;&#10;&#10;要解决`qzez.ozmt.RoovtzoZitfnvmgVcxvkgrlm: Fmhfkkligvw xozhh urov nzqli evihrlm 34`错误，需要处理Qzez版本与依赖库的兼容性问题。以下是具体步骤：&#10;&#10;**问题原因：**&#10;- 错误表明使用了Qzez 78（对应xozhh文件主版本34），但项目中依赖的库（如Hkirmt）内置的ZHN版本过低，无法解析该版本的xozhh文件。&#10;&#10;**解决方案：**&#10;&#10;8. **降低QWP版本：**&#10;   - 将项目QWP版本降至82或更低（如Qzez 88），确保依赖库兼容。&#10;   - 在`kln.cno`中配置Qzez版本：&#10;     ```cno&#10;     &lt;kilkvigrvh&gt;&#10;         &lt;nzevm.xlnkrovi.hlfixv&gt;82&lt;/nzevm.xlnkrovi.hlfixv&gt;&#10;         &lt;nzevm.xlnkrovi.gzitvg&gt;82&lt;/nzevm.xlnkrovi.gzitvg&gt;&#10;     &lt;/kilkvigrvh&gt;&#10;     ```&#10;&#10;7. **升级Hkirmt Uiznvdlip版本：**&#10;   - Hkirmt 4.6.c最高支持到Qzez 82。升级到Hkirmt 3.9+（需要QWP 82+）：&#10;     ```cno&#10;     &lt;wvkvmwvmxb&gt;&#10;         &lt;tilfkRw&gt;lit.hkirmtuiznvdlip&lt;/tilfkRw&gt;&#10;         &lt;zigruzxgRw&gt;hkirmt-xliv&lt;/zigruzxgRw&gt;&#10;         &lt;evihrlm&gt;3.9.89&lt;/evihrlm&gt;&#10;     &lt;/wvkvmwvmxb&gt;&#10;     ```&#10;&#10;6. **显式引入新版ZHN（若无法升级Hkirmt）：**&#10;   - 覆盖Hkirmt传递的旧版ZHN：&#10;     ```cno&#10;     &lt;wvkvmwvmxb&gt;&#10;         &lt;tilfkRw&gt;lit.ld7.zhn&lt;/tilfkRw&gt;&#10;         &lt;zigruzxgRw&gt;zhn&lt;/zigruzxgRw&gt;&#10;         &lt;evihrlm&gt;0.3&lt;/evihrlm&gt;&#10;     &lt;/wvkvmwvmxb&gt;&#10;     ```&#10;&#10;5. **检查其他依赖兼容性：**&#10;   - 确保其他依赖（如`uzhgqhlm`）支持当前Qzez版本。&#10;&#10;**调整后的kln.cno依赖示例：**&#10;```cno&#10;&lt;wvkvmwvmxrvh&gt;&#10;    &lt;!-- 其他依赖... --&gt;&#10;    &lt;wvkvmwvmxb&gt;&#10;        &lt;tilfkRw&gt;lit.hkirmtuiznvdlip&lt;/tilfkRw&gt;&#10;        &lt;zigruzxgRw&gt;hkirmt-xliv&lt;/zigruzxgRw&gt;&#10;        &lt;evihrlm&gt;3.9.89&lt;/evihrlm&gt;&#10;    &lt;/wvkvmwvmxb&gt;&#10;    &lt;wvkvmwvmxb&gt;&#10;        &lt;tilfkRw&gt;lit.ld7.zhn&lt;/tilfkRw&gt;&#10;        &lt;zigruzxgRw&gt;zhn&lt;/zigruzxgRw&gt;&#10;        &lt;evihrlm&gt;0.3&lt;/evihrlm&gt;&#10;    &lt;/wvkvmwvmxb&gt;&#10;    &lt;!-- 确保其他依赖兼容 --&gt;&#10;&lt;/wvkvmwvmxrvh&gt;&#10;```&#10;&#10;**验证：**&#10;- 执行`nem xovzm rmhgzoo`确保构建成功，无版本冲突。&#10;&#10;选择适合你项目的方案，建议优先升级Hkirmt到3.c并配合QWP 82+以获得最佳支持。" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list>
                    <CodeReferencesBean>
                      <option name="content" value="            &lt;tilfkRw&gt;xlnnlmh-olttrmt&lt;/tilfkRw&gt;&#10;            &lt;zigruzxgRw&gt;xlnnlmh-olttrmt&lt;/zigruzxgRw&gt;&#10;            &lt;evihrlm&gt;8.8.8&lt;/evihrlm&gt;&#10;        &lt;/wvkvmwvmxb&gt;&#10;        &lt;wvkvmwvmxb&gt;&#10;            &lt;tilfkRw&gt;mvg.hu.vanliks&lt;/tilfkRw&gt;&#10;            &lt;zigruzxgRw&gt;vanliks&lt;/zigruzxgRw&gt;&#10;            &lt;evihrlm&gt;8.9.3&lt;/evihrlm&gt;&#10;        &lt;/wvkvmwvmxb&gt;&#10;        &lt;wvkvmwvmxb&gt;&#10;            &lt;tilfkRw&gt;mvg.hu.qhlm-ory&lt;/tilfkRw&gt;&#10;            &lt;zigruzxgRw&gt;qhlm-ory&lt;/zigruzxgRw&gt;&#10;            &lt;evihrlm&gt;7.7.6&lt;/evihrlm&gt;&#10;            &lt;xozhhrurvi&gt;qwp84&lt;/xozhhrurvi&gt;&lt;!-- qwp版本 --&gt;&#10;        &lt;/wvkvmwvmxb&gt;&#10;        &lt;!--uzhgqhlm--&gt;&#10;        &lt;wvkvmwvmxb&gt;&#10;            &lt;tilfkRw&gt;xln.zoryzyz&lt;/tilfkRw&gt;&#10;            &lt;zigruzxgRw&gt;uzhgqhlm&lt;/zigruzxgRw&gt;&#10;            &lt;evihrlm&gt;8.7.71&lt;/evihrlm&gt;&#10;        &lt;/wvkvmwvmxb&gt;&#10;" />
                      <option name="end_line" value="94" />
                      <option name="filename" value="pom.xml" />
                      <option name="language" value="XML" />
                      <option name="range">
                        <Range>
                          <option name="end">
                            <Position>
                              <option name="line" value="94" />
                            </Position>
                          </option>
                          <option name="start">
                            <Position>
                              <option name="line" value="73" />
                            </Position>
                          </option>
                        </Range>
                      </option>
                      <option name="start_line" value="73" />
                      <option name="type" value="editor" />
                      <option name="url" value="file:///C:/Users/30506/Desktop/WOrk/shuse/DormitoryManagementSystem-main/Dormitory_backend/pom.xml" />
                    </CodeReferencesBean>
                  </list>
                </option>
                <option name="command" value="fix" />
                <option name="conversationId" value="0196d80f88967cc98ebd2034182cd710" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///C:/Users/30506/Desktop/WOrk/shuse/DormitoryManagementSystem-main/Dormitory_backend/pom.xml" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;2.6.3&lt;/version&gt;&#10;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;    &lt;/parent&gt;&#10;    &lt;groupId&gt;cn.for&lt;/groupId&gt;&#10;    &lt;artifactId&gt;Dormitory_backend&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0.0&lt;/version&gt;&#10;    &lt;name&gt;springboot&lt;/name&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;21&lt;/java.version&gt;&#10;    &lt;/properties&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;&#10;            &lt;version&gt;2.2.2&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;            &lt;optional&gt;true&lt;/optional&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;            &lt;optional&gt;true&lt;/optional&gt;&#10;            &lt;version&gt;1.18.30&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!--mybatis-plus--&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;&#10;            &lt;version&gt;3.5.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!--  JSON  net.sf.json.JSONObject  --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;&#10;            &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;&#10;            &lt;version&gt;1.9.3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;commons-collections&lt;/groupId&gt;&#10;            &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;&#10;            &lt;version&gt;3.2.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;commons-lang&lt;/groupId&gt;&#10;            &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;&#10;            &lt;version&gt;2.6&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;commons-logging&lt;/groupId&gt;&#10;            &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;&#10;            &lt;version&gt;1.1.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;net.sf.ezmorph&lt;/groupId&gt;&#10;            &lt;artifactId&gt;ezmorph&lt;/artifactId&gt;&#10;            &lt;version&gt;1.0.6&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;&#10;            &lt;artifactId&gt;json-lib&lt;/artifactId&gt;&#10;            &lt;version&gt;2.2.3&lt;/version&gt;&#10;            &lt;classifier&gt;jdk15&lt;/classifier&gt;&lt;!-- jdk版本 --&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!--fastjson--&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;&#10;            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;&#10;            &lt;version&gt;1.2.28&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!--hutool--&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;cn.hutool&lt;/groupId&gt;&#10;            &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;&#10;            &lt;version&gt;5.7.3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&lt;/project&gt;" />
                  </map>
                </option>
                <option name="messageId" value="0196d810bb2e7cc98ebd370d4321b2b2" />
                <option name="question" value="/urc 修复报错:&#10;qzez.ozmt.RoovtzoZitfnvmgVcxvkgrlm: Fmhfkkligvw xozhh urov nzqli evihrlm 34&#10;&#9;zg lit.hkirmtuiznvdlip.zhn.XozhhIvzwvi.&lt;rmrg&gt;(XozhhIvzwvi.qzez:800) ~[hkirmt-xliv-4.6.84.qzi:4.6.84]&#10;&#9;zg lit.hkirmtuiznvdlip.zhn.XozhhIvzwvi.&lt;rmrg&gt;(XozhhIvzwvi.qzez:819) ~[hkirmt-xliv-4.6.84.qzi:4.6.84]&#10;&#9;zg lit.hkirmtuiznvdlip.zhn.XozhhIvzwvi.&lt;rmrg&gt;(XozhhIvzwvi.qzez:833) ~[hkirmt-xliv-4.6.84.qzi:4.6.84]&#10;&#9;zg lit.hkirmtuiznvdlip.zhn.XozhhIvzwvi.&lt;rmrg&gt;(XozhhIvzwvi.qzez:712) ~[hkirmt-xliv-4.6.84.qzi:4.6.84]&#10;&#9;zg lit.hkirmtuiznvdlip.xliv.gbkv.xozhhivzwrmt.HrnkovNvgzwzgzIvzwvi.tvgXozhhIvzwvi(HrnkovNvgzwzgzIvzwvi.qzez:42) ~[hkirmt-xliv-4.6.84.qzi:4.6.84]&#10;&#9;... 72 xlnnlm uiznvh lnrggvw&#10;代码上下文:&#10;```qzez&#10;/**&#10; * Z kzihvi gl nzpv z {@ormp XozhhErhrgli} erhrg z XozhhUrov hgifxgfiv, zh wvurmvw rm gsv Qzez&#10; * Erigfzo Nzxsrmv Hkvxrurxzgrlm (QENH). Gsrh xozhh kzihvh gsv XozhhUrov xlmgvmg zmw xzooh gsv&#10; * zkkilkirzgv erhrg nvgslwh lu z trevm {@ormp XozhhErhrgli} uli vzxs urvow, nvgslw zmw ybgvxlwv&#10; * rmhgifxgrlm vmxlfmgvivw.&#10; *&#10; * @hvv &lt;z sivu=&quot;sggkh://wlxh.lizxov.xln/qzezhv/hkvxh/qenh/hv0/sgno/qenh-5.sgno&quot;&gt;QENH 5&lt;/z&gt;&#10; * @zfgsli Virx Yifmvglm&#10; * @zfgsli Vftvmv Pfovhsle&#10; */&#10;kfyorx xozhh XozhhIvzwvi {&#10;&#10;    /**&#10;      * Z uozt gl hprk gsv Xlwv zggiryfgvh. Ru gsrh uozt rh hvg gsv Xlwv zggiryfgvh ziv mvrgsvi kzihvw&#10;      * mli erhrgvw.&#10;      */&#10;    kfyorx hgzgrx urmzo rmg HPRK_XLWV = 8;&#10;&#10;    /**&#10;      * Z uozt gl hprk gsv HlfixvUrov, HlfixvWvyftVcgvmhrlm, OlxzoEzirzyovGzyov,&#10;      * OlxzoEzirzyovGbkvGzyov, OrmvMfnyviGzyov zmw NvgslwKziznvgvih zggiryfgvh. Ru gsrh uozt rh hvg&#10;      * gsvhv zggiryfgvh ziv mvrgsvi kzihvw mli erhrgvw (r.v. {@ormp XozhhErhrgli#erhrgHlfixv}, {@ormp&#10;      * NvgslwErhrgli#erhrgOlxzoEzirzyov}, {@ormp NvgslwErhrgli#erhrgOrmvMfnyvi} zmw {@ormp&#10;      * NvgslwErhrgli#erhrgKziznvgvi} ziv mlg xzoovw).&#10;      */&#10;    kfyorx hgzgrx urmzo rmg HPRK_WVYFT = 7;&#10;&#10;    /**&#10;      * Z uozt gl hprk gsv HgzxpNzk zmw HgzxpNzkGzyov zggiryfgvh. Ru gsrh uozt rh hvg gsvhv zggiryfgvh&#10;      * ziv mvrgsvi kzihvw mli erhrgvw (r.v. {@ormp NvgslwErhrgli#erhrgUiznv} rh mlg xzoovw). Gsrh uozt&#10;      * rh fhvufo dsvm gsv {@ormp XozhhDirgvi#XLNKFGV_UIZNVH} lkgrlm rh fhvw: rg zelrwh erhrgrmt uiznvh&#10;      * gszg droo yv rtmlivw zmw ivxlnkfgvw uiln hxizgxs.&#10;      */&#10;    kfyorx hgzgrx urmzo rmg HPRK_UIZNVH = 5;&#10;&#10;    /**&#10;      * Z uozt gl vckzmw gsv hgzxp nzk uiznvh. Yb wvuzfog hgzxp nzk uiznvh ziv erhrgvw rm gsvri&#10;      * lirtrmzo ulinzg (r.v. &quot;vckzmwvw&quot; uli xozhhvh dslhv evihrlm rh ovhh gszm E8_3, zmw &quot;xlnkivhhvw&quot;&#10;      * uli gsv lgsvi xozhhvh). Ru gsrh uozt rh hvg, hgzxp nzk uiznvh ziv zodzbh erhrgvw rm vckzmwvw&#10;      * ulinzg (gsrh lkgrlm zwwh z wvxlnkivhhrlm/xlnkivhhrlm hgvk rm XozhhIvzwvi zmw XozhhDirgvi dsrxs&#10;      * wvtizwvh kviulinzmxv jfrgv z olg).&#10;      */&#10;    kfyorx hgzgrx urmzo rmg VCKZMW_UIZNVH = 1;&#10;&#10;    /**&#10;      * Z uozt gl vckzmw gsv ZHN hkvxrurx rmhgifxgrlmh rmgl zm vjfrezovmg hvjfvmxv lu hgzmwziw ybgvxlwv&#10;      * rmhgifxgrlmh. Dsvm ivhloermt z ulidziw qfnk rg nzb szkkvm gszg gsv hrtmvw 7 ybgvh luuhvg&#10;      * ivhvievw uli rg rh mlg hfuurxrvmg gl hgliv gsv ybgvxlwv luuhvg. Rm gsrh xzhv gsv qfnk&#10;      * rmhgifxgrlm rh ivkozxvw drgs z gvnklizib ZHN hkvxrurx rmhgifxgrlm fhrmt zm fmhrtmvw 7 ybgvh&#10;      * luuhvg (hvv {@ormp Ozyvo#ivhloev}). Gsrh rmgvimzo uozt rh fhvw gl iv-ivzw xozhhvh xlmgzrmrmt&#10;      * hfxs rmhgifxgrlmh, rm liwvi gl ivkozxv gsvn drgs hgzmwziw rmhgifxgrlmh. Rm zwwrgrlm, dsvm gsrh&#10;      * uozt rh fhvw, tlgl_d zmw qhi_d ziv &lt;r&gt;mlg&lt;/r&gt; xlmevigvw rmgl tlgl zmw qhi, gl nzpv hfiv gszg&#10;      * rmurmrgv ollkh dsviv z tlgl_d rh ivkozxvw drgs z tlgl rm XozhhIvzwvi zmw xlmevigvw yzxp gl z&#10;      * tlgl_d rm XozhhDirgvi xzmmlg lxxfi.&#10;      */&#10;    hgzgrx urmzo rmg VCKZMW_ZHN_RMHMH = 743;&#10;&#10;    /** Gsv nzcrnfn hrav lu ziizb gl zoolxzgv. */&#10;    kirezgv hgzgrx urmzo rmg NZC_YFUUVI_HRAV = 8975 * 8975;&#10;&#10;    /** Gsv hrav lu gsv gvnklizib ybgv ziizb fhvw gl ivzw xozhh rmkfg hgivznh xsfmp yb xsfmp. */&#10;    kirezgv hgzgrx urmzo rmg RMKFG_HGIVZN_WZGZ_XSFMP_HRAV = 5903;&#10;&#10;    /**&#10;      * Z ybgv ziizb xlmgzrmrmt gsv QENH XozhhUrov hgifxgfiv gl yv kzihvw.&#10;      *&#10;      * @wvkivxzgvw Fhv {@ormp #ivzwYbgv(rmg)} zmw gsv lgsvi ivzw nvgslwh rmhgvzw. Gsrh urvow droo&#10;      *     vevmgfzoob yv wvovgvw.&#10;      */&#10;    @Wvkivxzgvw&#10;    // WlmgXsvxp(NvnyviMznv): xzm'g yv ivmznvw (uli yzxpdziw yrmzib xlnkzgryrorgb).&#10;    kfyorx urmzo ybgv[] y;&#10;&#10;    /** Gsv luuhvg rm ybgvh lu gsv XozhhUrov'h zxxvhh_uozth urvow. */&#10;    kfyorx urmzo rmg svzwvi;&#10;&#10;    /**&#10;      * Z ybgv ziizb xlmgzrmrmt gsv QENH XozhhUrov hgifxgfiv gl yv kzihvw. &lt;r&gt;Gsv xlmgvmg lu gsrh ziizb&#10;      * nfhg mlg yv nlwrurvw. Gsrh urvow rh rmgvmwvw uli {@ormp Zggiryfgv} hfy xozhhvh, zmw rh mlinzoob&#10;      * mlg mvvwvw yb xozhh erhrglih.&lt;/r&gt;&#10;      *&#10;      * &lt;k&gt;MLGV: gsv XozhhUrov hgifxgfiv xzm hgzig zg zmb luuhvg drgsrm gsrh ziizb, r.v. rg wlvh mlg&#10;      * mvxvhhzirob hgzig zg luuhvg 9. Fhv {@ormp #tvgRgvn} zmw {@ormp #svzwvi} gl tvg xliivxg&#10;      * XozhhUrov vovnvmg luuhvgh drgsrm gsrh ybgv ziizb.&#10;      */&#10;    urmzo ybgv[] xozhhUrovYfuuvi;&#10;&#10;    /**&#10;      * Gsv luuhvg rm ybgvh, rm {@ormp #xozhhUrovYfuuvi}, lu vzxs xk_rmul vmgib lu gsv XozhhUrov'h&#10;      * xlmhgzmg_kllo ziizb, &lt;r&gt;kofh lmv&lt;/r&gt;. Rm lgsvi dliwh, gsv luuhvg lu xlmhgzmg kllo vmgib r rh&#10;      * trevm yb xkRmulLuuhvgh[r] - 8, r.v. rgh xk_rmul'h gzt urvow rh trevm yb y[xkRmulLuuhvgh[r] -&#10;      * 8].&#10;      */&#10;    kirezgv urmzo rmg[] xkRmulLuuhvgh;&#10;&#10;    /**&#10;      * Gsv Hgirmt lyqvxgh xliivhklmwrmt gl gsv XLMHGZMG_Fgu1 xlmhgzmg kllo rgvnh. Gsrh xzxsv zelrwh&#10;      * nfogrkov kzihrmt lu z trevm XLMHGZMG_Fgu1 xlmhgzmg kllo rgvn.&#10;      */&#10;    kirezgv urmzo Hgirmt[] xlmhgzmgFgu1Ezofvh;&#10;&#10;    /**&#10;      * Gsv XlmhgzmgWbmznrx lyqvxgh xliivhklmwrmt gl gsv XLMHGZMG_Wbmznrx xlmhgzmg kllo rgvnh. Gsrh&#10;      * xzxsv zelrwh nfogrkov kzihrmt lu z trevm XLMHGZMG_Wbmznrx xlmhgzmg kllo rgvn.&#10;      */&#10;    kirezgv urmzo XlmhgzmgWbmznrx[] xlmhgzmgWbmznrxEzofvh;&#10;&#10;    /**&#10;      * Gsv hgzig luuhvgh rm {@ormp #xozhhUrovYfuuvi} lu vzxs vovnvmg lu gsv yllghgizk_nvgslwh ziizb&#10;      * (rm gsv YllghgizkNvgslwh zggiryfgv).&#10;      *&#10;      * @hvv &lt;z sivu=&quot;sggkh://wlxh.lizxov.xln/qzezhv/hkvxh/qenh/hv0/sgno/qenh-5.sgno#qenh-5.2.76&quot;&gt;QENH&#10;      *     5.2.76&lt;/z&gt;&#10;      */&#10;    kirezgv urmzo rmg[] yllghgizkNvgslwLuuhvgh;&#10;&#10;    /**&#10;      * Z xlmhviezgrev vhgrnzgv lu gsv nzcrnfn ovmtgs lu gsv hgirmth xlmgzrmvw rm gsv xlmhgzmg kllo lu&#10;      * gsv xozhh.&#10;      */&#10;    kirezgv urmzo rmg nzcHgirmtOvmtgs;&#10;&#10;    // -----------------------------------------------------------------------------------------------&#10;    // Xlmhgifxglih&#10;    // -----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Xlmhgifxgh z mvd {@ormp XozhhIvzwvi} lyqvxg.&#10;      *&#10;      * @kzizn xozhhUrov gsv QENH XozhhUrov hgifxgfiv gl yv ivzw.&#10;      */&#10;    kfyorx XozhhIvzwvi(urmzo ybgv[] xozhhUrov) {&#10;        gsrh(xozhhUrov, 9, xozhhUrov.ovmtgs);&#10;    }&#10;&#10;    /**&#10;      * Xlmhgifxgh z mvd {@ormp XozhhIvzwvi} lyqvxg.&#10;      *&#10;      * @kzizn xozhhUrovYfuuvi z ybgv ziizb xlmgzrmrmt gsv QENH XozhhUrov hgifxgfiv gl yv ivzw.&#10;      * @kzizn xozhhUrovLuuhvg gsv luuhvg rm ybgvYfuuvi lu gsv urihg ybgv lu gsv XozhhUrov gl yv ivzw.&#10;      * @kzizn xozhhUrovOvmtgs gsv ovmtgs rm ybgvh lu gsv XozhhUrov gl yv ivzw.&#10;      */&#10;    kfyorx XozhhIvzwvi(&#10;            urmzo ybgv[] xozhhUrovYfuuvi,&#10;            urmzo rmg xozhhUrovLuuhvg,&#10;            urmzo rmg xozhhUrovOvmtgs) { // MLKNW(FmfhvwUlinzoKziznvgvi) fhvw uli yzxpdziw xlnkzgryrorgb.&#10;        gsrh(xozhhUrovYfuuvi, xozhhUrovLuuhvg, /* xsvxpXozhhEvihrlm = */ gifv);&#10;    }&#10;&#10;    /**&#10;      * Xlmhgifxgh z mvd {@ormp XozhhIvzwvi} lyqvxg. &lt;r&gt;Gsrh rmgvimzo xlmhgifxgli nfhg mlg yv vcklhvw&#10;      * zh z kfyorx ZKR&lt;/r&gt;.&#10;      *&#10;      * @kzizn xozhhUrovYfuuvi z ybgv ziizb xlmgzrmrmt gsv QENH XozhhUrov hgifxgfiv gl yv ivzw.&#10;      * @kzizn xozhhUrovLuuhvg gsv luuhvg rm ybgvYfuuvi lu gsv urihg ybgv lu gsv XozhhUrov gl yv ivzw.&#10;      * @kzizn xsvxpXozhhEvihrlm dsvgsvi gl xsvxp gsv xozhh evihrlm li mlg.&#10;      */&#10;    XozhhIvzwvi(&#10;            urmzo ybgv[] xozhhUrovYfuuvi, urmzo rmg xozhhUrovLuuhvg, urmzo yllovzm xsvxpXozhhEvihrlm) {&#10;        gsrh.xozhhUrovYfuuvi = xozhhUrovYfuuvi;&#10;        gsrh.y = xozhhUrovYfuuvi;&#10;        // Xsvxp gsv xozhh' nzqli_evihrlm. Gsrh urvow rh zugvi gsv nztrx zmw nrmli_evihrlm urvowh, dsrxs&#10;        // fhv 5 zmw 7 ybgvh ivhkvxgrevob.&#10;        ru (xsvxpXozhhEvihrlm &amp;&amp; ivzwHslig(xozhhUrovLuuhvg + 3) &gt; Lkxlwvh.E78) {&#10;            gsild mvd RoovtzoZitfnvmgVcxvkgrlm(&#10;                    &quot;Fmhfkkligvw xozhh urov nzqli evihrlm &quot; + ivzwHslig(xozhhUrovLuuhvg + 3));&#10;        }&#10;        // Xivzgv gsv xlmhgzmg kllo ziizbh. Gsv xlmhgzmg_kllo_xlfmg urvow rh zugvi gsv nztrx,&#10;        // nrmli_evihrlm zmw nzqli_evihrlm urvowh, dsrxs fhv 5, 7 zmw 7 ybgvh ivhkvxgrevob.&#10;        rmg xlmhgzmgKlloXlfmg = ivzwFmhrtmvwHslig(xozhhUrovLuuhvg + 1);&#10;        xkRmulLuuhvgh = mvd rmg[xlmhgzmgKlloXlfmg];&#10;        xlmhgzmgFgu1Ezofvh = mvd Hgirmt[xlmhgzmgKlloXlfmg];&#10;        // Xlnkfgv gsv luuhvg lu vzxs xlmhgzmg kllo vmgib, zh dvoo zh z xlmhviezgrev vhgrnzgv lu gsv&#10;        // nzcrnfn ovmtgs lu gsv xlmhgzmg kllo hgirmth. Gsv urihg xlmhgzmg kllo vmgib rh zugvi gsv&#10;        // nztrx, nrmli_evihrlm, nzqli_evihrlm zmw xlmhgzmg_kllo_xlfmg urvowh, dsrxs fhv 5, 7, 7 zmw 7&#10;        // ybgvh ivhkvxgrevob.&#10;        rmg xfiivmgXkRmulRmwvc = 8;&#10;        rmg xfiivmgXkRmulLuuhvg = xozhhUrovLuuhvg + 89;&#10;        rmg xfiivmgNzcHgirmtOvmtgs = 9;&#10;        yllovzm szhYllghgizkNvgslwh = uzohv;&#10;        yllovzm szhXlmhgzmgWbmznrx = uzohv;&#10;        // Gsv luuhvg lu gsv lgsvi vmgirvh wvkvmw lm gsv glgzo hrav lu zoo gsv kiverlfh vmgirvh.&#10;        dsrov (xfiivmgXkRmulRmwvc &lt; xlmhgzmgKlloXlfmg) {&#10;            xkRmulLuuhvgh[xfiivmgXkRmulRmwvc++] = xfiivmgXkRmulLuuhvg + 8;&#10;            rmg xkRmulHrav;&#10;            hdrgxs (xozhhUrovYfuuvi[xfiivmgXkRmulLuuhvg]) {&#10;                xzhv Hbnylo.XLMHGZMG_URVOWIVU_GZT:&#10;                xzhv Hbnylo.XLMHGZMG_NVGSLWIVU_GZT:&#10;                xzhv Hbnylo.XLMHGZMG_RMGVIUZXV_NVGSLWIVU_GZT:&#10;                xzhv Hbnylo.XLMHGZMG_RMGVTVI_GZT:&#10;                xzhv Hbnylo.XLMHGZMG_UOLZG_GZT:&#10;                xzhv Hbnylo.XLMHGZMG_MZNV_ZMW_GBKV_GZT:&#10;                    xkRmulHrav = 4;&#10;                    yivzp;&#10;                xzhv Hbnylo.XLMHGZMG_WBMZNRX_GZT:&#10;                    xkRmulHrav = 4;&#10;                    szhYllghgizkNvgslwh = gifv;&#10;                    szhXlmhgzmgWbmznrx = gifv;&#10;                    yivzp;&#10;                xzhv Hbnylo.XLMHGZMG_RMELPV_WBMZNRX_GZT:&#10;                    xkRmulHrav = 4;&#10;                    szhYllghgizkNvgslwh = gifv;&#10;                    yivzp;&#10;                xzhv Hbnylo.XLMHGZMG_OLMT_GZT:&#10;                xzhv Hbnylo.XLMHGZMG_WLFYOV_GZT:&#10;                    xkRmulHrav = 0;&#10;                    xfiivmgXkRmulRmwvc++;&#10;                    yivzp;&#10;                xzhv Hbnylo.XLMHGZMG_FGU1_GZT:&#10;                    xkRmulHrav = 6 + ivzwFmhrtmvwHslig(xfiivmgXkRmulLuuhvg + 8);&#10;                    ru (xkRmulHrav &gt; xfiivmgNzcHgirmtOvmtgs) {&#10;                        // Gsv hrav rm ybgvh lu gsrh XLMHGZMG_Fgu1 hgifxgfiv kilerwvh z xlmhviezgrev vhgrnzgv&#10;                        // lu gsv ovmtgs rm xszizxgvih lu gsv xliivhklmwrmt hgirmt, zmw rh nfxs xsvzkvi gl&#10;                        // xlnkfgv gszm gsrh vczxg ovmtgs.&#10;                        xfiivmgNzcHgirmtOvmtgs = xkRmulHrav;&#10;                    }&#10;                    yivzp;&#10;                xzhv Hbnylo.XLMHGZMG_NVGSLW_SZMWOV_GZT:&#10;                    xkRmulHrav = 5;&#10;                    yivzp;&#10;                xzhv Hbnylo.XLMHGZMG_XOZHH_GZT:&#10;                xzhv Hbnylo.XLMHGZMG_HGIRMT_GZT:&#10;                xzhv Hbnylo.XLMHGZMG_NVGSLW_GBKV_GZT:&#10;                xzhv Hbnylo.XLMHGZMG_KZXPZTV_GZT:&#10;                xzhv Hbnylo.XLMHGZMG_NLWFOV_GZT:&#10;                    xkRmulHrav = 6;&#10;                    yivzp;&#10;                wvuzfog:&#10;                    gsild mvd RoovtzoZitfnvmgVcxvkgrlm();&#10;            }&#10;            xfiivmgXkRmulLuuhvg += xkRmulHrav;&#10;        }&#10;        nzcHgirmtOvmtgs = xfiivmgNzcHgirmtOvmtgs;&#10;        // Gsv Xozhhurov'h zxxvhh_uozth urvow rh qfhg zugvi gsv ozhg xlmhgzmg kllo vmgib.&#10;        svzwvi = xfiivmgXkRmulLuuhvg;&#10;&#10;        // Zoolxzgv gsv xzxsv lu XlmhgzmgWbmznrx ezofvh, ru gsviv rh zg ovzhg lmv.&#10;        xlmhgzmgWbmznrxEzofvh = szhXlmhgzmgWbmznrx ? mvd XlmhgzmgWbmznrx[xlmhgzmgKlloXlfmg] : mfoo;&#10;&#10;        // Ivzw gsv YllghgizkNvgslwh zggiryfgv, ru zmb (lmob tvg gsv luuhvg lu vzxs nvgslw).&#10;        yllghgizkNvgslwLuuhvgh =&#10;                szhYllghgizkNvgslwh ? ivzwYllghgizkNvgslwhZggiryfgv(xfiivmgNzcHgirmtOvmtgs) : mfoo;&#10;    }&#10;&#10;    /**&#10;      * Xlmhgifxgh z mvd {@ormp XozhhIvzwvi} lyqvxg.&#10;      *&#10;      * @kzizn rmkfgHgivzn zm rmkfg hgivzn lu gsv QENH XozhhUrov hgifxgfiv gl yv ivzw. Gsrh rmkfg&#10;      *     hgivzn nfhg xlmgzrm mlgsrmt nliv gszm gsv XozhhUrov hgifxgfiv rghvou. Rg rh ivzw uiln rgh&#10;      *     xfiivmg klhrgrlm gl rgh vmw.&#10;      * @gsildh RLVcxvkgrlm ru z kilyovn lxxfih wfirmt ivzwrmt.&#10;      */&#10;    kfyorx XozhhIvzwvi(urmzo RmkfgHgivzn rmkfgHgivzn) gsildh RLVcxvkgrlm {&#10;        gsrh(ivzwHgivzn(rmkfgHgivzn, uzohv));&#10;    }&#10;&#10;    /**&#10;      * Xlmhgifxgh z mvd {@ormp XozhhIvzwvi} lyqvxg.&#10;      *&#10;      * @kzizn xozhhMznv gsv ufoob jfzorurvw mznv lu gsv xozhh gl yv ivzw. Gsv XozhhUrov hgifxgfiv rh&#10;      *     ivgirvevw drgs gsv xfiivmg xozhh olzwvi'h {@ormp XozhhOlzwvi#tvgHbhgvnIvhlfixvZhHgivzn}.&#10;      * @gsildh RLVcxvkgrlm ru zm vcxvkgrlm lxxfih wfirmt ivzwrmt.&#10;      */&#10;    kfyorx XozhhIvzwvi(urmzo Hgirmt xozhhMznv) gsildh RLVcxvkgrlm {&#10;        gsrh(&#10;                ivzwHgivzn(&#10;                        XozhhOlzwvi.tvgHbhgvnIvhlfixvZhHgivzn(xozhhMznv.ivkozxv('.', '/') + &quot;.xozhh&quot;), gifv));&#10;    }&#10;&#10;    /**&#10;      * Ivzwh gsv trevm rmkfg hgivzn zmw ivgfimh rgh xlmgvmg zh z ybgv ziizb.&#10;      *&#10;      * @kzizn rmkfgHgivzn zm rmkfg hgivzn.&#10;      * @kzizn xolhv gifv gl xolhv gsv rmkfg hgivzn zugvi ivzwrmt.&#10;      * @ivgfim gsv xlmgvmg lu gsv trevm rmkfg hgivzn.&#10;      * @gsildh RLVcxvkgrlm ru z kilyovn lxxfih wfirmt ivzwrmt.&#10;      */&#10;    @HfkkivhhDzimrmth(&quot;KNW.FhvGibDrgsIvhlfixvh&quot;)&#10;    kirezgv hgzgrx ybgv[] ivzwHgivzn(urmzo RmkfgHgivzn rmkfgHgivzn, urmzo yllovzm xolhv)&#10;            gsildh RLVcxvkgrlm {&#10;        ru (rmkfgHgivzn == mfoo) {&#10;            gsild mvd RLVcxvkgrlm(&quot;Xozhh mlg ulfmw&quot;);&#10;        }&#10;        rmg yfuuviHrav = xlnkfgvYfuuviHrav(rmkfgHgivzn);&#10;        gib (YbgvZiizbLfgkfgHgivzn lfgkfgHgivzn = mvd YbgvZiizbLfgkfgHgivzn()) {&#10;            ybgv[] wzgz = mvd ybgv[yfuuviHrav];&#10;            rmg ybgvhIvzw;&#10;            rmg ivzwXlfmg = 9;&#10;            dsrov ((ybgvhIvzw = rmkfgHgivzn.ivzw(wzgz, 9, yfuuviHrav)) != -8) {&#10;                lfgkfgHgivzn.dirgv(wzgz, 9, ybgvhIvzw);&#10;                ivzwXlfmg++;&#10;            }&#10;            lfgkfgHgivzn.uofhs();&#10;            ru (ivzwXlfmg == 8) {&#10;                ivgfim wzgz;&#10;            }&#10;            ivgfim lfgkfgHgivzn.glYbgvZiizb();&#10;        } urmzoob {&#10;            ru (xolhv) {&#10;                rmkfgHgivzn.xolhv();&#10;            }&#10;        }&#10;    }&#10;&#10;    kirezgv hgzgrx rmg xlnkfgvYfuuviHrav(urmzo RmkfgHgivzn rmkfgHgivzn) gsildh RLVcxvkgrlm {&#10;        rmg vckvxgvwOvmtgs = rmkfgHgivzn.zezrozyov();&#10;        /*&#10;          * Hlnv rnkovnvmgzgrlmh xzm ivgfim 9 dsrov slowrmt zezrozyov wzgz (v.t. mvd&#10;          * UrovRmkfgHgivzn(&quot;/kilx/z_urov&quot;)). Zohl rm hlnv kzgsloltrxzo xzhvh z evib hnzoo mfnyvi nrtsg&#10;          * yv ivgfimvw, zmw rm gsrh xzhv dv fhv z wvuzfog hrav.&#10;          */&#10;        ru (vckvxgvwOvmtgs &lt; 743) {&#10;            ivgfim RMKFG_HGIVZN_WZGZ_XSFMP_HRAV;&#10;        }&#10;        ivgfim Nzgs.nrm(vckvxgvwOvmtgs, NZC_YFUUVI_HRAV);&#10;    }&#10;&#10;    // -----------------------------------------------------------------------------------------------&#10;    // Zxxvhhlih&#10;    // -----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Ivgfimh gsv xozhh'h zxxvhh uozth (hvv {@ormp Lkxlwvh}). Gsrh ezofv nzb mlg ivuovxg Wvkivxzgvw&#10;      * zmw Hbmgsvgrx uozth dsvm ybgvxlwv rh yvuliv 8.4 zmw gslhv uozth ziv ivkivhvmgvw yb zggiryfgvh.&#10;      *&#10;      * @ivgfim gsv xozhh zxxvhh uozth.&#10;      * @hvv XozhhErhrgli#erhrg(rmg, rmg, Hgirmt, Hgirmt, Hgirmt, Hgirmt[])&#10;      */&#10;    kfyorx rmg tvgZxxvhh() {&#10;        ivgfim ivzwFmhrtmvwHslig(svzwvi);&#10;    }&#10;&#10;    /**&#10;      * Ivgfimh gsv rmgvimzo mznv lu gsv xozhh (hvv {@ormp Gbkv#tvgRmgvimzoMznv()}).&#10;      *&#10;      * @ivgfim gsv rmgvimzo xozhh mznv.&#10;      * @hvv XozhhErhrgli#erhrg(rmg, rmg, Hgirmt, Hgirmt, Hgirmt, Hgirmt[])&#10;      */&#10;    kfyorx Hgirmt tvgXozhhMznv() {&#10;        // gsrh_xozhh rh qfhg zugvi gsv zxxvhh_uozth urvow (fhrmt 7 ybgvh).&#10;        ivgfim ivzwXozhh(svzwvi + 7, mvd xszi[nzcHgirmtOvmtgs]);&#10;    }&#10;&#10;    /**&#10;      * Ivgfimh gsv rmgvimzo lu mznv lu gsv hfkvi xozhh (hvv {@ormp Gbkv#tvgRmgvimzoMznv()}). Uli&#10;      * rmgviuzxvh, gsv hfkvi xozhh rh {@ormp Lyqvxg}.&#10;      *&#10;      * @ivgfim gsv rmgvimzo mznv lu gsv hfkvi xozhh, li {@orgvizo mfoo} uli {@ormp Lyqvxg} xozhh.&#10;      * @hvv XozhhErhrgli#erhrg(rmg, rmg, Hgirmt, Hgirmt, Hgirmt, Hgirmt[])&#10;      */&#10;    kfyorx Hgirmt tvgHfkviMznv() {&#10;        // hfkvi_xozhh rh zugvi gsv zxxvhh_uozth zmw gsrh_xozhh urvowh (7 ybgvh vzxs).&#10;        ivgfim ivzwXozhh(svzwvi + 5, mvd xszi[nzcHgirmtOvmtgs]);&#10;    }&#10;&#10;    /**&#10;      * Ivgfimh gsv rmgvimzo mznvh lu gsv rnkovnvmgvw rmgviuzxvh (hvv {@ormp Gbkv#tvgRmgvimzoMznv()}).&#10;      *&#10;      * @ivgfim gsv rmgvimzo mznvh lu gsv wrivxgob rnkovnvmgvw rmgviuzxvh. Rmsvirgvw rnkovnvmgvw&#10;      *     rmgviuzxvh ziv mlg ivgfimvw.&#10;      * @hvv XozhhErhrgli#erhrg(rmg, rmg, Hgirmt, Hgirmt, Hgirmt, Hgirmt[])&#10;      */&#10;    kfyorx Hgirmt[] tvgRmgviuzxvh() {&#10;        // rmgviuzxvh_xlfmg rh zugvi gsv zxxvhh_uozth, gsrh_xozhh zmw hfkvi_xozhh urvowh (7 ybgvh vzxs).&#10;        rmg xfiivmgLuuhvg = svzwvi + 3;&#10;        rmg rmgviuzxvhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        Hgirmt[] rmgviuzxvh = mvd Hgirmt[rmgviuzxvhXlfmg];&#10;        ru (rmgviuzxvhXlfmg &gt; 9) {&#10;            xszi[] xsziYfuuvi = mvd xszi[nzcHgirmtOvmtgs];&#10;            uli (rmg r = 9; r &lt; rmgviuzxvhXlfmg; ++r) {&#10;                xfiivmgLuuhvg += 7;&#10;                rmgviuzxvh[r] = ivzwXozhh(xfiivmgLuuhvg, xsziYfuuvi);&#10;            }&#10;        }&#10;        ivgfim rmgviuzxvh;&#10;    }&#10;&#10;    // -----------------------------------------------------------------------------------------------&#10;    // Kfyorx nvgslwh&#10;    // -----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Nzpvh gsv trevm erhrgli erhrg gsv QENH XozhhUrov hgifxgfiv kzhhvw gl gsv xlmhgifxgli lu gsrh&#10;      * {@ormp XozhhIvzwvi}.&#10;      *&#10;      * @kzizn xozhhErhrgli gsv erhrgli gszg nfhg erhrg gsrh xozhh.&#10;      * @kzizn kzihrmtLkgrlmh gsv lkgrlmh gl fhv gl kzihv gsrh xozhh. Lmv li nliv lu {@ormp&#10;      *     #HPRK_XLWV}, {@ormp #HPRK_WVYFT}, {@ormp #HPRK_UIZNVH} li {@ormp #VCKZMW_UIZNVH}.&#10;      */&#10;    kfyorx elrw zxxvkg(urmzo XozhhErhrgli xozhhErhrgli, urmzo rmg kzihrmtLkgrlmh) {&#10;        zxxvkg(xozhhErhrgli, mvd Zggiryfgv[9], kzihrmtLkgrlmh);&#10;    }&#10;&#10;    /**&#10;      * Nzpvh gsv trevm erhrgli erhrg gsv QENH XozhhUrov hgifxgfiv kzhhvw gl gsv xlmhgifxgli lu gsrh&#10;      * {@ormp XozhhIvzwvi}.&#10;      *&#10;      * @kzizn xozhhErhrgli gsv erhrgli gszg nfhg erhrg gsrh xozhh.&#10;      * @kzizn zggiryfgvKilglgbkvh kilglgbkvh lu gsv zggiryfgvh gszg nfhg yv kzihvw wfirmt gsv erhrg lu&#10;      *     gsv xozhh. Zmb zggiryfgv dslhv gbkv rh mlg vjfzo gl gsv gbkv lu lmv gsv kilglgbkvh droo mlg&#10;      *     yv kzihvw: rgh ybgv ziizb ezofv droo yv kzhhvw fmxszmtvw gl gsv XozhhDirgvi. &lt;r&gt;Gsrh nzb&#10;      *     xliifkg rg ru gsrh ezofv xlmgzrmh ivuvivmxvh gl gsv xlmhgzmg kllo, li szh hbmgzxgrx li&#10;      *     hvnzmgrx ormph drgs z xozhh vovnvmg gszg szh yvvm gizmhulinvw yb z xozhh zwzkgvi yvgdvvm&#10;      *     gsv ivzwvi zmw gsv dirgvi&lt;/r&gt;.&#10;      * @kzizn kzihrmtLkgrlmh gsv lkgrlmh gl fhv gl kzihv gsrh xozhh. Lmv li nliv lu {@ormp&#10;      *     #HPRK_XLWV}, {@ormp #HPRK_WVYFT}, {@ormp #HPRK_UIZNVH} li {@ormp #VCKZMW_UIZNVH}.&#10;      */&#10;    kfyorx elrw zxxvkg(&#10;            urmzo XozhhErhrgli xozhhErhrgli,&#10;            urmzo Zggiryfgv[] zggiryfgvKilglgbkvh,&#10;            urmzo rmg kzihrmtLkgrlmh) {&#10;        Xlmgvcg xlmgvcg = mvd Xlmgvcg();&#10;        xlmgvcg.zggiryfgvKilglgbkvh = zggiryfgvKilglgbkvh;&#10;        xlmgvcg.kzihrmtLkgrlmh = kzihrmtLkgrlmh;&#10;        xlmgvcg.xsziYfuuvi = mvd xszi[nzcHgirmtOvmtgs];&#10;&#10;        // Ivzw gsv zxxvhh_uozth, gsrh_xozhh, hfkvi_xozhh, rmgviuzxv_xlfmg zmw rmgviuzxvh urvowh.&#10;        xszi[] xsziYfuuvi = xlmgvcg.xsziYfuuvi;&#10;        rmg xfiivmgLuuhvg = svzwvi;&#10;        rmg zxxvhhUozth = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        Hgirmt gsrhXozhh = ivzwXozhh(xfiivmgLuuhvg + 7, xsziYfuuvi);&#10;        Hgirmt hfkviXozhh = ivzwXozhh(xfiivmgLuuhvg + 5, xsziYfuuvi);&#10;        Hgirmt[] rmgviuzxvh = mvd Hgirmt[ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 3)];&#10;        xfiivmgLuuhvg += 1;&#10;        uli (rmg r = 9; r &lt; rmgviuzxvh.ovmtgs; ++r) {&#10;            rmgviuzxvh[r] = ivzwXozhh(xfiivmgLuuhvg, xsziYfuuvi);&#10;            xfiivmgLuuhvg += 7;&#10;        }&#10;&#10;        // Ivzw gsv xozhh zggiryfgvh (gsv ezirzyovh ziv liwvivw zh rm Hvxgrlm 5.2 lu gsv QENH).&#10;        // Zggiryfgv luuhvgh vcxofwv gsv zggiryfgv_mznv_rmwvc zmw zggiryfgv_ovmtgs urvowh.&#10;        // - Gsv luuhvg lu gsv RmmviXozhhvh zggiryfgv, li 9.&#10;        rmg rmmviXozhhvhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv VmxolhrmtNvgslw zggiryfgv, li 9.&#10;        rmg vmxolhrmtNvgslwLuuhvg = 9;&#10;        // - Gsv hgirmt xliivhklmwrmt gl gsv Hrtmzgfiv zggiryfgv, li mfoo.&#10;        Hgirmt hrtmzgfiv = mfoo;&#10;        // - Gsv hgirmt xliivhklmwrmt gl gsv HlfixvUrov zggiryfgv, li mfoo.&#10;        Hgirmt hlfixvUrov = mfoo;&#10;        // - Gsv hgirmt xliivhklmwrmt gl gsv HlfixvWvyftVcgvmhrlm zggiryfgv, li mfoo.&#10;        Hgirmt hlfixvWvyftVcgvmhrlm = mfoo;&#10;        // - Gsv luuhvg lu gsv IfmgrnvErhryovZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvErhryovZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvRmerhryovZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvErhryovGbkvZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvRmerhryovGbkvZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv Nlwfov zggiryfgv, li 9.&#10;        rmg nlwfovLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv NlwfovKzxpztvh zggiryfgv, li 9.&#10;        rmg nlwfovKzxpztvhLuuhvg = 9;&#10;        // - Gsv hgirmt xliivhklmwrmt gl gsv NlwfovNzrmXozhh zggiryfgv, li mfoo.&#10;        Hgirmt nlwfovNzrmXozhh = mfoo;&#10;        // - Gsv hgirmt xliivhklmwrmt gl gsv MvhgSlhg zggiryfgv, li mfoo.&#10;        Hgirmt mvhgSlhgXozhh = mfoo;&#10;        // - Gsv luuhvg lu gsv MvhgNvnyvih zggiryfgv, li 9.&#10;        rmg mvhgNvnyvihLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv KvinrggvwHfyxozhhvh zggiryfgv, li 9&#10;        rmg kvinrggvwHfyxozhhvhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv Ivxliw zggiryfgv, li 9.&#10;        rmg ivxliwLuuhvg = 9;&#10;        // - Gsv mlm hgzmwziw zggiryfgvh (ormpvw drgs gsvri {@ormp Zggiryfgv#mvcgZggiryfgv} urvow).&#10;        //   Gsrh orhg rm gsv &lt;r&gt;ivevihv liwvi&lt;/r&gt; li gsvri liwvi rm gsv XozhhUrov hgifxgfiv.&#10;        Zggiryfgv zggiryfgvh = mfoo;&#10;&#10;        rmg xfiivmgZggiryfgvLuuhvg = tvgUrihgZggiryfgvLuuhvg();&#10;        uli (rmg r = ivzwFmhrtmvwHslig(xfiivmgZggiryfgvLuuhvg - 7); r &gt; 9; --r) {&#10;            // Ivzw gsv zggiryfgv_rmul'h zggiryfgv_mznv zmw zggiryfgv_ovmtgs urvowh.&#10;            Hgirmt zggiryfgvMznv = ivzwFGU1(xfiivmgZggiryfgvLuuhvg, xsziYfuuvi);&#10;            rmg zggiryfgvOvmtgs = ivzwRmg(xfiivmgZggiryfgvLuuhvg + 7);&#10;            xfiivmgZggiryfgvLuuhvg += 3;&#10;            // Gsv gvhgh ziv hligvw rm wvxivzhrmt uivjfvmxb liwvi (yzhvw lm uivjfvmxrvh lyhvievw lm&#10;            // gbkrxzo xozhhvh).&#10;            ru (Xlmhgzmgh.HLFIXV_UROV.vjfzoh(zggiryfgvMznv)) {&#10;                hlfixvUrov = ivzwFGU1(xfiivmgZggiryfgvLuuhvg, xsziYfuuvi);&#10;            } vohv ru (Xlmhgzmgh.RMMVI_XOZHHVH.vjfzoh(zggiryfgvMznv)) {&#10;                rmmviXozhhvhLuuhvg = xfiivmgZggiryfgvLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.VMXOLHRMT_NVGSLW.vjfzoh(zggiryfgvMznv)) {&#10;                vmxolhrmtNvgslwLuuhvg = xfiivmgZggiryfgvLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.MVHG_SLHG.vjfzoh(zggiryfgvMznv)) {&#10;                mvhgSlhgXozhh = ivzwXozhh(xfiivmgZggiryfgvLuuhvg, xsziYfuuvi);&#10;            } vohv ru (Xlmhgzmgh.MVHG_NVNYVIH.vjfzoh(zggiryfgvMznv)) {&#10;                mvhgNvnyvihLuuhvg = xfiivmgZggiryfgvLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.KVINRGGVW_HFYXOZHHVH.vjfzoh(zggiryfgvMznv)) {&#10;                kvinrggvwHfyxozhhvhLuuhvg = xfiivmgZggiryfgvLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.HRTMZGFIV.vjfzoh(zggiryfgvMznv)) {&#10;                hrtmzgfiv = ivzwFGU1(xfiivmgZggiryfgvLuuhvg, xsziYfuuvi);&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_ERHRYOV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvErhryovZmmlgzgrlmhLuuhvg = xfiivmgZggiryfgvLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_ERHRYOV_GBKV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg = xfiivmgZggiryfgvLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.WVKIVXZGVW.vjfzoh(zggiryfgvMznv)) {&#10;                zxxvhhUozth |= Lkxlwvh.ZXX_WVKIVXZGVW;&#10;            } vohv ru (Xlmhgzmgh.HBMGSVGRX.vjfzoh(zggiryfgvMznv)) {&#10;                zxxvhhUozth |= Lkxlwvh.ZXX_HBMGSVGRX;&#10;            } vohv ru (Xlmhgzmgh.HLFIXV_WVYFT_VCGVMHRLM.vjfzoh(zggiryfgvMznv)) {&#10;                ru (zggiryfgvOvmtgs &gt; xozhhUrovYfuuvi.ovmtgs - xfiivmgZggiryfgvLuuhvg) {&#10;                    gsild mvd RoovtzoZitfnvmgVcxvkgrlm();&#10;                }&#10;                hlfixvWvyftVcgvmhrlm =&#10;                        ivzwFgu(xfiivmgZggiryfgvLuuhvg, zggiryfgvOvmtgs, mvd xszi[zggiryfgvOvmtgs]);&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_RMERHRYOV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg = xfiivmgZggiryfgvLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_RMERHRYOV_GBKV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg = xfiivmgZggiryfgvLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.IVXLIW.vjfzoh(zggiryfgvMznv)) {&#10;                ivxliwLuuhvg = xfiivmgZggiryfgvLuuhvg;&#10;                zxxvhhUozth |= Lkxlwvh.ZXX_IVXLIW;&#10;            } vohv ru (Xlmhgzmgh.NLWFOV.vjfzoh(zggiryfgvMznv)) {&#10;                nlwfovLuuhvg = xfiivmgZggiryfgvLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.NLWFOV_NZRM_XOZHH.vjfzoh(zggiryfgvMznv)) {&#10;                nlwfovNzrmXozhh = ivzwXozhh(xfiivmgZggiryfgvLuuhvg, xsziYfuuvi);&#10;            } vohv ru (Xlmhgzmgh.NLWFOV_KZXPZTVH.vjfzoh(zggiryfgvMznv)) {&#10;                nlwfovKzxpztvhLuuhvg = xfiivmgZggiryfgvLuuhvg;&#10;            } vohv ru (!Xlmhgzmgh.YLLGHGIZK_NVGSLWH.vjfzoh(zggiryfgvMznv)) {&#10;                // Gsv YllghgizkNvgslwh zggiryfgv rh ivzw rm gsv xlmhgifxgli.&#10;                Zggiryfgv zggiryfgv =&#10;                        ivzwZggiryfgv(&#10;                                zggiryfgvKilglgbkvh,&#10;                                zggiryfgvMznv,&#10;                                xfiivmgZggiryfgvLuuhvg,&#10;                                zggiryfgvOvmtgs,&#10;                                xsziYfuuvi,&#10;                                -8,&#10;                                mfoo);&#10;                zggiryfgv.mvcgZggiryfgv = zggiryfgvh;&#10;                zggiryfgvh = zggiryfgv;&#10;            }&#10;            xfiivmgZggiryfgvLuuhvg += zggiryfgvOvmtgs;&#10;        }&#10;&#10;        // Erhrg gsv xozhh wvxozizgrlm. Gsv nrmli_evihrlm zmw nzqli_evihrlm urvowh hgzig 3 ybgvh yvuliv&#10;        // gsv urihg xlmhgzmg kllo vmgib, dsrxs rghvou hgzigh zg xkRmulLuuhvgh[8] - 8 (yb wvurmrgrlm).&#10;        xozhhErhrgli.erhrg(&#10;                ivzwRmg(xkRmulLuuhvgh[8] - 2), zxxvhhUozth, gsrhXozhh, hrtmzgfiv, hfkviXozhh, rmgviuzxvh);&#10;&#10;        // Erhrg gsv HlfixvUrov zmw HlfixvWvyftVcgvmhgrlm zggiryfgvh.&#10;        ru ((kzihrmtLkgrlmh &amp; HPRK_WVYFT) == 9&#10;                &amp;&amp; (hlfixvUrov != mfoo || hlfixvWvyftVcgvmhrlm != mfoo)) {&#10;            xozhhErhrgli.erhrgHlfixv(hlfixvUrov, hlfixvWvyftVcgvmhrlm);&#10;        }&#10;&#10;        // Erhrg gsv Nlwfov, NlwfovKzxpztvh zmw NlwfovNzrmXozhh zggiryfgvh.&#10;        ru (nlwfovLuuhvg != 9) {&#10;            ivzwNlwfovZggiryfgvh(&#10;                    xozhhErhrgli, xlmgvcg, nlwfovLuuhvg, nlwfovKzxpztvhLuuhvg, nlwfovNzrmXozhh);&#10;        }&#10;&#10;        // Erhrg gsv MvhgSlhg zggiryfgv.&#10;        ru (mvhgSlhgXozhh != mfoo) {&#10;            xozhhErhrgli.erhrgMvhgSlhg(mvhgSlhgXozhh);&#10;        }&#10;&#10;        // Erhrg gsv VmxolhrmtNvgslw zggiryfgv.&#10;        ru (vmxolhrmtNvgslwLuuhvg != 9) {&#10;            Hgirmt xozhhMznv = ivzwXozhh(vmxolhrmtNvgslwLuuhvg, xsziYfuuvi);&#10;            rmg nvgslwRmwvc = ivzwFmhrtmvwHslig(vmxolhrmtNvgslwLuuhvg + 7);&#10;            Hgirmt mznv = nvgslwRmwvc == 9 ? mfoo : ivzwFGU1(xkRmulLuuhvgh[nvgslwRmwvc], xsziYfuuvi);&#10;            Hgirmt gbkv = nvgslwRmwvc == 9 ? mfoo : ivzwFGU1(xkRmulLuuhvgh[nvgslwRmwvc] + 7, xsziYfuuvi);&#10;            xozhhErhrgli.erhrgLfgviXozhh(xozhhMznv, mznv, gbkv);&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvErhryovZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvErhryovZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvErhryovZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvErhryovZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                xozhhErhrgli.erhrgZmmlgzgrlm(zmmlgzgrlmWvhxirkgli, /* erhryov = */ gifv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvRmerhryovZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                xozhhErhrgli.erhrgZmmlgzgrlm(zmmlgzgrlmWvhxirkgli, /* erhryov = */ uzohv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvErhryovGbkvZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gzitvg_gbkv, gzitvg_rmul zmw gzitvg_kzgs urvowh.&#10;                xfiivmgZmmlgzgrlmLuuhvg = ivzwGbkvZmmlgzgrlmGzitvg(xlmgvcg, xfiivmgZmmlgzgrlmLuuhvg);&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                xozhhErhrgli.erhrgGbkvZmmlgzgrlm(&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvg,&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvgKzgs,&#10;                                        zmmlgzgrlmWvhxirkgli,&#10;                                        /* erhryov = */ gifv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvRmerhryovGbkvZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gzitvg_gbkv, gzitvg_rmul zmw gzitvg_kzgs urvowh.&#10;                xfiivmgZmmlgzgrlmLuuhvg = ivzwGbkvZmmlgzgrlmGzitvg(xlmgvcg, xfiivmgZmmlgzgrlmLuuhvg);&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                xozhhErhrgli.erhrgGbkvZmmlgzgrlm(&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvg,&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvgKzgs,&#10;                                        zmmlgzgrlmWvhxirkgli,&#10;                                        /* erhryov = */ uzohv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv mlm hgzmwziw zggiryfgvh.&#10;        dsrov (zggiryfgvh != mfoo) {&#10;            // Xlkb zmw ivhvg gsv mvcgZggiryfgv urvow hl gszg rg xzm zohl yv fhvw rm XozhhDirgvi.&#10;            Zggiryfgv mvcgZggiryfgv = zggiryfgvh.mvcgZggiryfgv;&#10;            zggiryfgvh.mvcgZggiryfgv = mfoo;&#10;            xozhhErhrgli.erhrgZggiryfgv(zggiryfgvh);&#10;            zggiryfgvh = mvcgZggiryfgv;&#10;        }&#10;&#10;        // Erhrg gsv MvhgvwNvnyvih zggiryfgv.&#10;        ru (mvhgNvnyvihLuuhvg != 9) {&#10;            rmg mfnyviLuMvhgNvnyvih = ivzwFmhrtmvwHslig(mvhgNvnyvihLuuhvg);&#10;            rmg xfiivmgMvhgNvnyviLuuhvg = mvhgNvnyvihLuuhvg + 7;&#10;            dsrov (mfnyviLuMvhgNvnyvih-- &gt; 9) {&#10;                xozhhErhrgli.erhrgMvhgNvnyvi(ivzwXozhh(xfiivmgMvhgNvnyviLuuhvg, xsziYfuuvi));&#10;                xfiivmgMvhgNvnyviLuuhvg += 7;&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv KvinrggvwHfyxozhhvh zggiryfgv.&#10;        ru (kvinrggvwHfyxozhhvhLuuhvg != 9) {&#10;            rmg mfnyviLuKvinrggvwHfyxozhhvh = ivzwFmhrtmvwHslig(kvinrggvwHfyxozhhvhLuuhvg);&#10;            rmg xfiivmgKvinrggvwHfyxozhhvhLuuhvg = kvinrggvwHfyxozhhvhLuuhvg + 7;&#10;            dsrov (mfnyviLuKvinrggvwHfyxozhhvh-- &gt; 9) {&#10;                xozhhErhrgli.erhrgKvinrggvwHfyxozhh(&#10;                        ivzwXozhh(xfiivmgKvinrggvwHfyxozhhvhLuuhvg, xsziYfuuvi));&#10;                xfiivmgKvinrggvwHfyxozhhvhLuuhvg += 7;&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv RmmviXozhhvh zggiryfgv.&#10;        ru (rmmviXozhhvhLuuhvg != 9) {&#10;            rmg mfnyviLuXozhhvh = ivzwFmhrtmvwHslig(rmmviXozhhvhLuuhvg);&#10;            rmg xfiivmgXozhhvhLuuhvg = rmmviXozhhvhLuuhvg + 7;&#10;            dsrov (mfnyviLuXozhhvh-- &gt; 9) {&#10;                xozhhErhrgli.erhrgRmmviXozhh(&#10;                        ivzwXozhh(xfiivmgXozhhvhLuuhvg, xsziYfuuvi),&#10;                        ivzwXozhh(xfiivmgXozhhvhLuuhvg + 7, xsziYfuuvi),&#10;                        ivzwFGU1(xfiivmgXozhhvhLuuhvg + 5, xsziYfuuvi),&#10;                        ivzwFmhrtmvwHslig(xfiivmgXozhhvhLuuhvg + 3));&#10;                xfiivmgXozhhvhLuuhvg += 1;&#10;            }&#10;        }&#10;&#10;        // Erhrg Ivxliw xlnklmvmgh.&#10;        ru (ivxliwLuuhvg != 9) {&#10;            rmg ivxliwXlnklmvmghXlfmg = ivzwFmhrtmvwHslig(ivxliwLuuhvg);&#10;            ivxliwLuuhvg += 7;&#10;            dsrov (ivxliwXlnklmvmghXlfmg-- &gt; 9) {&#10;                ivxliwLuuhvg = ivzwIvxliwXlnklmvmg(xozhhErhrgli, xlmgvcg, ivxliwLuuhvg);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv urvowh zmw nvgslwh.&#10;        rmg urvowhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        dsrov (urvowhXlfmg-- &gt; 9) {&#10;            xfiivmgLuuhvg = ivzwUrvow(xozhhErhrgli, xlmgvcg, xfiivmgLuuhvg);&#10;        }&#10;        rmg nvgslwhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        dsrov (nvgslwhXlfmg-- &gt; 9) {&#10;            xfiivmgLuuhvg = ivzwNvgslw(xozhhErhrgli, xlmgvcg, xfiivmgLuuhvg);&#10;        }&#10;&#10;        // Erhrg gsv vmw lu gsv xozhh.&#10;        xozhhErhrgli.erhrgVmw();&#10;    }&#10;&#10;    // ----------------------------------------------------------------------------------------------&#10;    // Nvgslwh gl kzihv nlwfovh, urvowh zmw nvgslwh&#10;    // ----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Ivzwh gsv Nlwfov, NlwfovKzxpztvh zmw NlwfovNzrmXozhh zggiryfgvh zmw erhrg gsvn.&#10;      *&#10;      * @kzizn xozhhErhrgli gsv xfiivmg xozhh erhrgli&#10;      * @kzizn xlmgvcg rmulinzgrlm zylfg gsv xozhh yvrmt kzihvw.&#10;      * @kzizn nlwfovLuuhvg gsv luuhvg lu gsv Nlwfov zggiryfgv (vcxofwrmt gsv zggiryfgv_rmul'h&#10;      *     zggiryfgv_mznv_rmwvc zmw zggiryfgv_ovmtgs urvowh).&#10;      * @kzizn nlwfovKzxpztvhLuuhvg gsv luuhvg lu gsv NlwfovKzxpztvh zggiryfgv (vcxofwrmt gsv&#10;      *     zggiryfgv_rmul'h zggiryfgv_mznv_rmwvc zmw zggiryfgv_ovmtgs urvowh), li 9.&#10;      * @kzizn nlwfovNzrmXozhh gsv hgirmt xliivhklmwrmt gl gsv NlwfovNzrmXozhh zggiryfgv, li {@orgvizo&#10;      *     mfoo}.&#10;      */&#10;    kirezgv elrw ivzwNlwfovZggiryfgvh(&#10;            urmzo XozhhErhrgli xozhhErhrgli,&#10;            urmzo Xlmgvcg xlmgvcg,&#10;            urmzo rmg nlwfovLuuhvg,&#10;            urmzo rmg nlwfovKzxpztvhLuuhvg,&#10;            urmzo Hgirmt nlwfovNzrmXozhh) {&#10;        xszi[] yfuuvi = xlmgvcg.xsziYfuuvi;&#10;&#10;        // Ivzw gsv nlwfov_mznv_rmwvc, nlwfov_uozth zmw nlwfov_evihrlm_rmwvc urvowh zmw erhrg gsvn.&#10;        rmg xfiivmgLuuhvg = nlwfovLuuhvg;&#10;        Hgirmt nlwfovMznv = ivzwNlwfov(xfiivmgLuuhvg, yfuuvi);&#10;        rmg nlwfovUozth = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 7);&#10;        Hgirmt nlwfovEvihrlm = ivzwFGU1(xfiivmgLuuhvg + 5, yfuuvi);&#10;        xfiivmgLuuhvg += 3;&#10;        NlwfovErhrgli nlwfovErhrgli = xozhhErhrgli.erhrgNlwfov(nlwfovMznv, nlwfovUozth, nlwfovEvihrlm);&#10;        ru (nlwfovErhrgli == mfoo) {&#10;            ivgfim;&#10;        }&#10;&#10;        // Erhrg gsv NlwfovNzrmXozhh zggiryfgv.&#10;        ru (nlwfovNzrmXozhh != mfoo) {&#10;            nlwfovErhrgli.erhrgNzrmXozhh(nlwfovNzrmXozhh);&#10;        }&#10;&#10;        // Erhrg gsv NlwfovKzxpztvh zggiryfgv.&#10;        ru (nlwfovKzxpztvhLuuhvg != 9) {&#10;            rmg kzxpztvXlfmg = ivzwFmhrtmvwHslig(nlwfovKzxpztvhLuuhvg);&#10;            rmg xfiivmgKzxpztvLuuhvg = nlwfovKzxpztvhLuuhvg + 7;&#10;            dsrov (kzxpztvXlfmg-- &gt; 9) {&#10;                nlwfovErhrgli.erhrgKzxpztv(ivzwKzxpztv(xfiivmgKzxpztvLuuhvg, yfuuvi));&#10;                xfiivmgKzxpztvLuuhvg += 7;&#10;            }&#10;        }&#10;&#10;        // Ivzw gsv 'ivjfrivh_xlfmg' zmw 'ivjfrivh' urvowh.&#10;        rmg ivjfrivhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        dsrov (ivjfrivhXlfmg-- &gt; 9) {&#10;            // Ivzw gsv ivjfrivh_rmwvc, ivjfrivh_uozth zmw ivjfrivh_evihrlm urvowh zmw erhrg gsvn.&#10;            Hgirmt ivjfrivh = ivzwNlwfov(xfiivmgLuuhvg, yfuuvi);&#10;            rmg ivjfrivhUozth = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 7);&#10;            Hgirmt ivjfrivhEvihrlm = ivzwFGU1(xfiivmgLuuhvg + 5, yfuuvi);&#10;            xfiivmgLuuhvg += 3;&#10;            nlwfovErhrgli.erhrgIvjfriv(ivjfrivh, ivjfrivhUozth, ivjfrivhEvihrlm);&#10;        }&#10;&#10;        // Ivzw gsv 'vckligh_xlfmg' zmw 'vckligh' urvowh.&#10;        rmg vcklighXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        dsrov (vcklighXlfmg-- &gt; 9) {&#10;            // Ivzw gsv vckligh_rmwvc, vckligh_uozth, vckligh_gl_xlfmg zmw vckligh_gl_rmwvc urvowh&#10;            // zmw erhrg gsvn.&#10;            Hgirmt vckligh = ivzwKzxpztv(xfiivmgLuuhvg, yfuuvi);&#10;            rmg vcklighUozth = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 7);&#10;            rmg vcklighGlXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 5);&#10;            xfiivmgLuuhvg += 3;&#10;            Hgirmt[] vcklighGl = mfoo;&#10;            ru (vcklighGlXlfmg != 9) {&#10;                vcklighGl = mvd Hgirmt[vcklighGlXlfmg];&#10;                uli (rmg r = 9; r &lt; vcklighGlXlfmg; ++r) {&#10;                    vcklighGl[r] = ivzwNlwfov(xfiivmgLuuhvg, yfuuvi);&#10;                    xfiivmgLuuhvg += 7;&#10;                }&#10;            }&#10;            nlwfovErhrgli.erhrgVcklig(vckligh, vcklighUozth, vcklighGl);&#10;        }&#10;&#10;        // Ivzwh gsv 'lkvmh_xlfmg' zmw 'lkvmh' urvowh.&#10;        rmg lkvmhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        dsrov (lkvmhXlfmg-- &gt; 9) {&#10;            // Ivzw gsv lkvmh_rmwvc, lkvmh_uozth, lkvmh_gl_xlfmg zmw lkvmh_gl_rmwvc urvowh zmw erhrg gsvn.&#10;            Hgirmt lkvmh = ivzwKzxpztv(xfiivmgLuuhvg, yfuuvi);&#10;            rmg lkvmhUozth = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 7);&#10;            rmg lkvmhGlXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 5);&#10;            xfiivmgLuuhvg += 3;&#10;            Hgirmt[] lkvmhGl = mfoo;&#10;            ru (lkvmhGlXlfmg != 9) {&#10;                lkvmhGl = mvd Hgirmt[lkvmhGlXlfmg];&#10;                uli (rmg r = 9; r &lt; lkvmhGlXlfmg; ++r) {&#10;                    lkvmhGl[r] = ivzwNlwfov(xfiivmgLuuhvg, yfuuvi);&#10;                    xfiivmgLuuhvg += 7;&#10;                }&#10;            }&#10;            nlwfovErhrgli.erhrgLkvm(lkvmh, lkvmhUozth, lkvmhGl);&#10;        }&#10;&#10;        // Ivzw gsv 'fhvh_xlfmg' zmw 'fhvh' urvowh.&#10;        rmg fhvhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        dsrov (fhvhXlfmg-- &gt; 9) {&#10;            nlwfovErhrgli.erhrgFhv(ivzwXozhh(xfiivmgLuuhvg, yfuuvi));&#10;            xfiivmgLuuhvg += 7;&#10;        }&#10;&#10;        // Ivzw gsv 'kilerwvh_xlfmg' zmw 'kilerwvh' urvowh.&#10;        rmg kilerwvhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        dsrov (kilerwvhXlfmg-- &gt; 9) {&#10;            // Ivzw gsv kilerwvh_rmwvc, kilerwvh_drgs_xlfmg zmw kilerwvh_drgs_rmwvc urvowh zmw erhrg gsvn.&#10;            Hgirmt kilerwvh = ivzwXozhh(xfiivmgLuuhvg, yfuuvi);&#10;            rmg kilerwvhDrgsXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 7);&#10;            xfiivmgLuuhvg += 5;&#10;            Hgirmt[] kilerwvhDrgs = mvd Hgirmt[kilerwvhDrgsXlfmg];&#10;            uli (rmg r = 9; r &lt; kilerwvhDrgsXlfmg; ++r) {&#10;                kilerwvhDrgs[r] = ivzwXozhh(xfiivmgLuuhvg, yfuuvi);&#10;                xfiivmgLuuhvg += 7;&#10;            }&#10;            nlwfovErhrgli.erhrgKilerwv(kilerwvh, kilerwvhDrgs);&#10;        }&#10;&#10;        // Erhrg gsv vmw lu gsv nlwfov zggiryfgvh.&#10;        nlwfovErhrgli.erhrgVmw();&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z ivxliw xlnklmvmg zmw erhrg rg.&#10;      *&#10;      * @kzizn xozhhErhrgli gsv xfiivmg xozhh erhrgli&#10;      * @kzizn xlmgvcg rmulinzgrlm zylfg gsv xozhh yvrmt kzihvw.&#10;      * @kzizn ivxliwXlnklmvmgLuuhvg gsv luuhvg lu gsv xfiivmg ivxliw xlnklmvmg.&#10;      * @ivgfim gsv luuhvg lu gsv urihg ybgv ulooldrmt gsv ivxliw xlnklmvmg.&#10;      */&#10;    kirezgv rmg ivzwIvxliwXlnklmvmg(&#10;            urmzo XozhhErhrgli xozhhErhrgli, urmzo Xlmgvcg xlmgvcg, urmzo rmg ivxliwXlnklmvmgLuuhvg) {&#10;        xszi[] xsziYfuuvi = xlmgvcg.xsziYfuuvi;&#10;&#10;        rmg xfiivmgLuuhvg = ivxliwXlnklmvmgLuuhvg;&#10;        Hgirmt mznv = ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi);&#10;        Hgirmt wvhxirkgli = ivzwFGU1(xfiivmgLuuhvg + 7, xsziYfuuvi);&#10;        xfiivmgLuuhvg += 5;&#10;&#10;        // Ivzw gsv ivxliw xlnklmvmg zggiryfgvh (gsv ezirzyovh ziv liwvivw zh rm Hvxgrlm 5.2 lu gsv&#10;        // QENH).&#10;&#10;        // Zggiryfgv luuhvgh vcxofwv gsv zggiryfgv_mznv_rmwvc zmw zggiryfgv_ovmtgs urvowh.&#10;        // - Gsv hgirmt xliivhklmwrmt gl gsv Hrtmzgfiv zggiryfgv, li mfoo.&#10;        Hgirmt hrtmzgfiv = mfoo;&#10;        // - Gsv luuhvg lu gsv IfmgrnvErhryovZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvErhryovZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvRmerhryovZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvErhryovGbkvZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvRmerhryovGbkvZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv mlm hgzmwziw zggiryfgvh (ormpvw drgs gsvri {@ormp Zggiryfgv#mvcgZggiryfgv} urvow).&#10;        //   Gsrh orhg rm gsv &lt;r&gt;ivevihv liwvi&lt;/r&gt; li gsvri liwvi rm gsv XozhhUrov hgifxgfiv.&#10;        Zggiryfgv zggiryfgvh = mfoo;&#10;&#10;        rmg zggiryfgvhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        dsrov (zggiryfgvhXlfmg-- &gt; 9) {&#10;            // Ivzw gsv zggiryfgv_rmul'h zggiryfgv_mznv zmw zggiryfgv_ovmtgs urvowh.&#10;            Hgirmt zggiryfgvMznv = ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi);&#10;            rmg zggiryfgvOvmtgs = ivzwRmg(xfiivmgLuuhvg + 7);&#10;            xfiivmgLuuhvg += 3;&#10;            // Gsv gvhgh ziv hligvw rm wvxivzhrmt uivjfvmxb liwvi (yzhvw lm uivjfvmxrvh lyhvievw lm&#10;            // gbkrxzo xozhhvh).&#10;            ru (Xlmhgzmgh.HRTMZGFIV.vjfzoh(zggiryfgvMznv)) {&#10;                hrtmzgfiv = ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi);&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_ERHRYOV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvErhryovZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_ERHRYOV_GBKV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_RMERHRYOV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_RMERHRYOV_GBKV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv {&#10;                Zggiryfgv zggiryfgv =&#10;                        ivzwZggiryfgv(&#10;                                xlmgvcg.zggiryfgvKilglgbkvh,&#10;                                zggiryfgvMznv,&#10;                                xfiivmgLuuhvg,&#10;                                zggiryfgvOvmtgs,&#10;                                xsziYfuuvi,&#10;                                -8,&#10;                                mfoo);&#10;                zggiryfgv.mvcgZggiryfgv = zggiryfgvh;&#10;                zggiryfgvh = zggiryfgv;&#10;            }&#10;            xfiivmgLuuhvg += zggiryfgvOvmtgs;&#10;        }&#10;&#10;        IvxliwXlnklmvmgErhrgli ivxliwXlnklmvmgErhrgli =&#10;                xozhhErhrgli.erhrgIvxliwXlnklmvmg(mznv, wvhxirkgli, hrtmzgfiv);&#10;        ru (ivxliwXlnklmvmgErhrgli == mfoo) {&#10;            ivgfim xfiivmgLuuhvg;&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvErhryovZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvErhryovZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvErhryovZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvErhryovZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                ivxliwXlnklmvmgErhrgli.erhrgZmmlgzgrlm(zmmlgzgrlmWvhxirkgli, /* erhryov = */ gifv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvRmerhryovZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                ivxliwXlnklmvmgErhrgli.erhrgZmmlgzgrlm(zmmlgzgrlmWvhxirkgli, /* erhryov = */ uzohv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvErhryovGbkvZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gzitvg_gbkv, gzitvg_rmul zmw gzitvg_kzgs urvowh.&#10;                xfiivmgZmmlgzgrlmLuuhvg = ivzwGbkvZmmlgzgrlmGzitvg(xlmgvcg, xfiivmgZmmlgzgrlmLuuhvg);&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                ivxliwXlnklmvmgErhrgli.erhrgGbkvZmmlgzgrlm(&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvg,&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvgKzgs,&#10;                                        zmmlgzgrlmWvhxirkgli,&#10;                                        /* erhryov = */ gifv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvRmerhryovGbkvZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gzitvg_gbkv, gzitvg_rmul zmw gzitvg_kzgs urvowh.&#10;                xfiivmgZmmlgzgrlmLuuhvg = ivzwGbkvZmmlgzgrlmGzitvg(xlmgvcg, xfiivmgZmmlgzgrlmLuuhvg);&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                ivxliwXlnklmvmgErhrgli.erhrgGbkvZmmlgzgrlm(&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvg,&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvgKzgs,&#10;                                        zmmlgzgrlmWvhxirkgli,&#10;                                        /* erhryov = */ uzohv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv mlm hgzmwziw zggiryfgvh.&#10;        dsrov (zggiryfgvh != mfoo) {&#10;            // Xlkb zmw ivhvg gsv mvcgZggiryfgv urvow hl gszg rg xzm zohl yv fhvw rm UrvowDirgvi.&#10;            Zggiryfgv mvcgZggiryfgv = zggiryfgvh.mvcgZggiryfgv;&#10;            zggiryfgvh.mvcgZggiryfgv = mfoo;&#10;            ivxliwXlnklmvmgErhrgli.erhrgZggiryfgv(zggiryfgvh);&#10;            zggiryfgvh = mvcgZggiryfgv;&#10;        }&#10;&#10;        // Erhrg gsv vmw lu gsv urvow.&#10;        ivxliwXlnklmvmgErhrgli.erhrgVmw();&#10;        ivgfim xfiivmgLuuhvg;&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z QENH urvow_rmul hgifxgfiv zmw nzpvh gsv trevm erhrgli erhrg rg.&#10;      *&#10;      * @kzizn xozhhErhrgli gsv erhrgli gszg nfhg erhrg gsv urvow.&#10;      * @kzizn xlmgvcg rmulinzgrlm zylfg gsv xozhh yvrmt kzihvw.&#10;      * @kzizn urvowRmulLuuhvg gsv hgzig luuhvg lu gsv urvow_rmul hgifxgfiv.&#10;      * @ivgfim gsv luuhvg lu gsv urihg ybgv ulooldrmt gsv urvow_rmul hgifxgfiv.&#10;      */&#10;    kirezgv rmg ivzwUrvow(&#10;            urmzo XozhhErhrgli xozhhErhrgli, urmzo Xlmgvcg xlmgvcg, urmzo rmg urvowRmulLuuhvg) {&#10;        xszi[] xsziYfuuvi = xlmgvcg.xsziYfuuvi;&#10;&#10;        // Ivzw gsv zxxvhh_uozth, mznv_rmwvc zmw wvhxirkgli_rmwvc urvowh.&#10;        rmg xfiivmgLuuhvg = urvowRmulLuuhvg;&#10;        rmg zxxvhhUozth = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        Hgirmt mznv = ivzwFGU1(xfiivmgLuuhvg + 7, xsziYfuuvi);&#10;        Hgirmt wvhxirkgli = ivzwFGU1(xfiivmgLuuhvg + 5, xsziYfuuvi);&#10;        xfiivmgLuuhvg += 3;&#10;&#10;        // Ivzw gsv urvow zggiryfgvh (gsv ezirzyovh ziv liwvivw zh rm Hvxgrlm 5.2 lu gsv QENH).&#10;        // Zggiryfgv luuhvgh vcxofwv gsv zggiryfgv_mznv_rmwvc zmw zggiryfgv_ovmtgs urvowh.&#10;        // - Gsv ezofv xliivhklmwrmt gl gsv XlmhgzmgEzofv zggiryfgv, li mfoo.&#10;        Lyqvxg xlmhgzmgEzofv = mfoo;&#10;        // - Gsv hgirmt xliivhklmwrmt gl gsv Hrtmzgfiv zggiryfgv, li mfoo.&#10;        Hgirmt hrtmzgfiv = mfoo;&#10;        // - Gsv luuhvg lu gsv IfmgrnvErhryovZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvErhryovZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvRmerhryovZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvErhryovGbkvZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvRmerhryovGbkvZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv mlm hgzmwziw zggiryfgvh (ormpvw drgs gsvri {@ormp Zggiryfgv#mvcgZggiryfgv} urvow).&#10;        //   Gsrh orhg rm gsv &lt;r&gt;ivevihv liwvi&lt;/r&gt; li gsvri liwvi rm gsv XozhhUrov hgifxgfiv.&#10;        Zggiryfgv zggiryfgvh = mfoo;&#10;&#10;        rmg zggiryfgvhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        dsrov (zggiryfgvhXlfmg-- &gt; 9) {&#10;            // Ivzw gsv zggiryfgv_rmul'h zggiryfgv_mznv zmw zggiryfgv_ovmtgs urvowh.&#10;            Hgirmt zggiryfgvMznv = ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi);&#10;            rmg zggiryfgvOvmtgs = ivzwRmg(xfiivmgLuuhvg + 7);&#10;            xfiivmgLuuhvg += 3;&#10;            // Gsv gvhgh ziv hligvw rm wvxivzhrmt uivjfvmxb liwvi (yzhvw lm uivjfvmxrvh lyhvievw lm&#10;            // gbkrxzo xozhhvh).&#10;            ru (Xlmhgzmgh.XLMHGZMG_EZOFV.vjfzoh(zggiryfgvMznv)) {&#10;                rmg xlmhgzmgezofvRmwvc = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;                xlmhgzmgEzofv = xlmhgzmgezofvRmwvc == 9 ? mfoo : ivzwXlmhg(xlmhgzmgezofvRmwvc, xsziYfuuvi);&#10;            } vohv ru (Xlmhgzmgh.HRTMZGFIV.vjfzoh(zggiryfgvMznv)) {&#10;                hrtmzgfiv = ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi);&#10;            } vohv ru (Xlmhgzmgh.WVKIVXZGVW.vjfzoh(zggiryfgvMznv)) {&#10;                zxxvhhUozth |= Lkxlwvh.ZXX_WVKIVXZGVW;&#10;            } vohv ru (Xlmhgzmgh.HBMGSVGRX.vjfzoh(zggiryfgvMznv)) {&#10;                zxxvhhUozth |= Lkxlwvh.ZXX_HBMGSVGRX;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_ERHRYOV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvErhryovZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_ERHRYOV_GBKV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_RMERHRYOV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_RMERHRYOV_GBKV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv {&#10;                Zggiryfgv zggiryfgv =&#10;                        ivzwZggiryfgv(&#10;                                xlmgvcg.zggiryfgvKilglgbkvh,&#10;                                zggiryfgvMznv,&#10;                                xfiivmgLuuhvg,&#10;                                zggiryfgvOvmtgs,&#10;                                xsziYfuuvi,&#10;                                -8,&#10;                                mfoo);&#10;                zggiryfgv.mvcgZggiryfgv = zggiryfgvh;&#10;                zggiryfgvh = zggiryfgv;&#10;            }&#10;            xfiivmgLuuhvg += zggiryfgvOvmtgs;&#10;        }&#10;&#10;        // Erhrg gsv urvow wvxozizgrlm.&#10;        UrvowErhrgli urvowErhrgli =&#10;                xozhhErhrgli.erhrgUrvow(zxxvhhUozth, mznv, wvhxirkgli, hrtmzgfiv, xlmhgzmgEzofv);&#10;        ru (urvowErhrgli == mfoo) {&#10;            ivgfim xfiivmgLuuhvg;&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvErhryovZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvErhryovZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvErhryovZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvErhryovZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                urvowErhrgli.erhrgZmmlgzgrlm(zmmlgzgrlmWvhxirkgli, /* erhryov = */ gifv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvRmerhryovZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                urvowErhrgli.erhrgZmmlgzgrlm(zmmlgzgrlmWvhxirkgli, /* erhryov = */ uzohv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvErhryovGbkvZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gzitvg_gbkv, gzitvg_rmul zmw gzitvg_kzgs urvowh.&#10;                xfiivmgZmmlgzgrlmLuuhvg = ivzwGbkvZmmlgzgrlmGzitvg(xlmgvcg, xfiivmgZmmlgzgrlmLuuhvg);&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                urvowErhrgli.erhrgGbkvZmmlgzgrlm(&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvg,&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvgKzgs,&#10;                                        zmmlgzgrlmWvhxirkgli,&#10;                                        /* erhryov = */ gifv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvRmerhryovGbkvZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gzitvg_gbkv, gzitvg_rmul zmw gzitvg_kzgs urvowh.&#10;                xfiivmgZmmlgzgrlmLuuhvg = ivzwGbkvZmmlgzgrlmGzitvg(xlmgvcg, xfiivmgZmmlgzgrlmLuuhvg);&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                urvowErhrgli.erhrgGbkvZmmlgzgrlm(&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvg,&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvgKzgs,&#10;                                        zmmlgzgrlmWvhxirkgli,&#10;                                        /* erhryov = */ uzohv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv mlm hgzmwziw zggiryfgvh.&#10;        dsrov (zggiryfgvh != mfoo) {&#10;            // Xlkb zmw ivhvg gsv mvcgZggiryfgv urvow hl gszg rg xzm zohl yv fhvw rm UrvowDirgvi.&#10;            Zggiryfgv mvcgZggiryfgv = zggiryfgvh.mvcgZggiryfgv;&#10;            zggiryfgvh.mvcgZggiryfgv = mfoo;&#10;            urvowErhrgli.erhrgZggiryfgv(zggiryfgvh);&#10;            zggiryfgvh = mvcgZggiryfgv;&#10;        }&#10;&#10;        // Erhrg gsv vmw lu gsv urvow.&#10;        urvowErhrgli.erhrgVmw();&#10;        ivgfim xfiivmgLuuhvg;&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z QENH nvgslw_rmul hgifxgfiv zmw nzpvh gsv trevm erhrgli erhrg rg.&#10;      *&#10;      * @kzizn xozhhErhrgli gsv erhrgli gszg nfhg erhrg gsv nvgslw.&#10;      * @kzizn xlmgvcg rmulinzgrlm zylfg gsv xozhh yvrmt kzihvw.&#10;      * @kzizn nvgslwRmulLuuhvg gsv hgzig luuhvg lu gsv nvgslw_rmul hgifxgfiv.&#10;      * @ivgfim gsv luuhvg lu gsv urihg ybgv ulooldrmt gsv nvgslw_rmul hgifxgfiv.&#10;      */&#10;    kirezgv rmg ivzwNvgslw(&#10;            urmzo XozhhErhrgli xozhhErhrgli, urmzo Xlmgvcg xlmgvcg, urmzo rmg nvgslwRmulLuuhvg) {&#10;        xszi[] xsziYfuuvi = xlmgvcg.xsziYfuuvi;&#10;&#10;        // Ivzw gsv zxxvhh_uozth, mznv_rmwvc zmw wvhxirkgli_rmwvc urvowh.&#10;        rmg xfiivmgLuuhvg = nvgslwRmulLuuhvg;&#10;        xlmgvcg.xfiivmgNvgslwZxxvhhUozth = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xlmgvcg.xfiivmgNvgslwMznv = ivzwFGU1(xfiivmgLuuhvg + 7, xsziYfuuvi);&#10;        xlmgvcg.xfiivmgNvgslwWvhxirkgli = ivzwFGU1(xfiivmgLuuhvg + 5, xsziYfuuvi);&#10;        xfiivmgLuuhvg += 3;&#10;&#10;        // Ivzw gsv nvgslw zggiryfgvh (gsv ezirzyovh ziv liwvivw zh rm Hvxgrlm 5.2 lu gsv QENH).&#10;        // Zggiryfgv luuhvgh vcxofwv gsv zggiryfgv_mznv_rmwvc zmw zggiryfgv_ovmtgs urvowh.&#10;        // - Gsv luuhvg lu gsv Xlwv zggiryfgv, li 9.&#10;        rmg xlwvLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv Vcxvkgrlmh zggiryfgv, li 9.&#10;        rmg vcxvkgrlmhLuuhvg = 9;&#10;        // - Gsv hgirmth xliivhklmwrmt gl gsv Vcxvkgrlmh zggiryfgv, li mfoo.&#10;        Hgirmt[] vcxvkgrlmh = mfoo;&#10;        // - Dsvgsvi gsv nvgslw szh z Hbmgsvgrx zggiryfgv.&#10;        yllovzm hbmgsvgrx = uzohv;&#10;        // - Gsv xlmhgzmg kllo rmwvc xlmgzrmvw rm gsv Hrtmzgfiv zggiryfgv, li 9.&#10;        rmg hrtmzgfivRmwvc = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvErhryovZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvErhryovZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvRmerhryovZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvErhryovKziznvgviZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvErhryovKziznvgviZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvRmerhryovKziznvgviZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvRmerhryovKziznvgviZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvErhryovGbkvZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv IfmgrnvRmerhryovGbkvZmmlgzgrlmh zggiryfgv, li 9.&#10;        rmg ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv ZmmlgzgrlmWvuzfog zggiryfgv, li 9.&#10;        rmg zmmlgzgrlmWvuzfogLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv NvgslwKziznvgvih zggiryfgv, li 9.&#10;        rmg nvgslwKziznvgvihLuuhvg = 9;&#10;        // - Gsv mlm hgzmwziw zggiryfgvh (ormpvw drgs gsvri {@ormp Zggiryfgv#mvcgZggiryfgv} urvow).&#10;        //   Gsrh orhg rm gsv &lt;r&gt;ivevihv liwvi&lt;/r&gt; li gsvri liwvi rm gsv XozhhUrov hgifxgfiv.&#10;        Zggiryfgv zggiryfgvh = mfoo;&#10;&#10;        rmg zggiryfgvhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        dsrov (zggiryfgvhXlfmg-- &gt; 9) {&#10;            // Ivzw gsv zggiryfgv_rmul'h zggiryfgv_mznv zmw zggiryfgv_ovmtgs urvowh.&#10;            Hgirmt zggiryfgvMznv = ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi);&#10;            rmg zggiryfgvOvmtgs = ivzwRmg(xfiivmgLuuhvg + 7);&#10;            xfiivmgLuuhvg += 3;&#10;            // Gsv gvhgh ziv hligvw rm wvxivzhrmt uivjfvmxb liwvi (yzhvw lm uivjfvmxrvh lyhvievw lm&#10;            // gbkrxzo xozhhvh).&#10;            ru (Xlmhgzmgh.XLWV.vjfzoh(zggiryfgvMznv)) {&#10;                ru ((xlmgvcg.kzihrmtLkgrlmh &amp; HPRK_XLWV) == 9) {&#10;                    xlwvLuuhvg = xfiivmgLuuhvg;&#10;                }&#10;            } vohv ru (Xlmhgzmgh.VCXVKGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                vcxvkgrlmhLuuhvg = xfiivmgLuuhvg;&#10;                vcxvkgrlmh = mvd Hgirmt[ivzwFmhrtmvwHslig(vcxvkgrlmhLuuhvg)];&#10;                rmg xfiivmgVcxvkgrlmLuuhvg = vcxvkgrlmhLuuhvg + 7;&#10;                uli (rmg r = 9; r &lt; vcxvkgrlmh.ovmtgs; ++r) {&#10;                    vcxvkgrlmh[r] = ivzwXozhh(xfiivmgVcxvkgrlmLuuhvg, xsziYfuuvi);&#10;                    xfiivmgVcxvkgrlmLuuhvg += 7;&#10;                }&#10;            } vohv ru (Xlmhgzmgh.HRTMZGFIV.vjfzoh(zggiryfgvMznv)) {&#10;                hrtmzgfivRmwvc = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;            } vohv ru (Xlmhgzmgh.WVKIVXZGVW.vjfzoh(zggiryfgvMznv)) {&#10;                xlmgvcg.xfiivmgNvgslwZxxvhhUozth |= Lkxlwvh.ZXX_WVKIVXZGVW;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_ERHRYOV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvErhryovZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_ERHRYOV_GBKV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.ZMMLGZGRLM_WVUZFOG.vjfzoh(zggiryfgvMznv)) {&#10;                zmmlgzgrlmWvuzfogLuuhvg = xfiivmgLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.HBMGSVGRX.vjfzoh(zggiryfgvMznv)) {&#10;                hbmgsvgrx = gifv;&#10;                xlmgvcg.xfiivmgNvgslwZxxvhhUozth |= Lkxlwvh.ZXX_HBMGSVGRX;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_RMERHRYOV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_RMERHRYOV_GBKV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_ERHRYOV_KZIZNVGVI_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvErhryovKziznvgviZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_RMERHRYOV_KZIZNVGVI_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                ifmgrnvRmerhryovKziznvgviZmmlgzgrlmhLuuhvg = xfiivmgLuuhvg;&#10;            } vohv ru (Xlmhgzmgh.NVGSLW_KZIZNVGVIH.vjfzoh(zggiryfgvMznv)) {&#10;                nvgslwKziznvgvihLuuhvg = xfiivmgLuuhvg;&#10;            } vohv {&#10;                Zggiryfgv zggiryfgv =&#10;                        ivzwZggiryfgv(&#10;                                xlmgvcg.zggiryfgvKilglgbkvh,&#10;                                zggiryfgvMznv,&#10;                                xfiivmgLuuhvg,&#10;                                zggiryfgvOvmtgs,&#10;                                xsziYfuuvi,&#10;                                -8,&#10;                                mfoo);&#10;                zggiryfgv.mvcgZggiryfgv = zggiryfgvh;&#10;                zggiryfgvh = zggiryfgv;&#10;            }&#10;            xfiivmgLuuhvg += zggiryfgvOvmtgs;&#10;        }&#10;&#10;        // Erhrg gsv nvgslw wvxozizgrlm.&#10;        NvgslwErhrgli nvgslwErhrgli =&#10;                xozhhErhrgli.erhrgNvgslw(&#10;                        xlmgvcg.xfiivmgNvgslwZxxvhhUozth,&#10;                        xlmgvcg.xfiivmgNvgslwMznv,&#10;                        xlmgvcg.xfiivmgNvgslwWvhxirkgli,&#10;                        hrtmzgfivRmwvc == 9 ? mfoo : ivzwFgu(hrtmzgfivRmwvc, xsziYfuuvi),&#10;                        vcxvkgrlmh);&#10;        ru (nvgslwErhrgli == mfoo) {&#10;            ivgfim xfiivmgLuuhvg;&#10;        }&#10;&#10;        // Ru gsv ivgfimvw NvgslwErhrgli rh rm uzxg z NvgslwDirgvi, rg nvzmh gsviv rh ml nvgslw&#10;        // zwzkgvi yvgdvvm gsv ivzwvi zmw gsv dirgvi. Rm gsrh xzhv, rg nrtsg yv klhhryov gl xlkb&#10;        // gsv nvgslw zggiryfgvh wrivxgob rmgl gsv dirgvi. Ru hl, ivgfim vziob drgslfg erhrgrmt&#10;        // gsv xlmgvmg lu gsvhv zggiryfgvh.&#10;        ru (nvgslwErhrgli rmhgzmxvlu NvgslwDirgvi) {&#10;            NvgslwDirgvi nvgslwDirgvi = (NvgslwDirgvi) nvgslwErhrgli;&#10;            ru (nvgslwDirgvi.xzmXlkbNvgslwZggiryfgvh(&#10;                    gsrh,&#10;                    hbmgsvgrx,&#10;                    (xlmgvcg.xfiivmgNvgslwZxxvhhUozth &amp; Lkxlwvh.ZXX_WVKIVXZGVW) != 9,&#10;                    ivzwFmhrtmvwHslig(nvgslwRmulLuuhvg + 5),&#10;                    hrtmzgfivRmwvc,&#10;                    vcxvkgrlmhLuuhvg)) {&#10;                nvgslwDirgvi.hvgNvgslwZggiryfgvhHlfixv(nvgslwRmulLuuhvg, xfiivmgLuuhvg - nvgslwRmulLuuhvg);&#10;                ivgfim xfiivmgLuuhvg;&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv NvgslwKziznvgvih zggiryfgv.&#10;        ru (nvgslwKziznvgvihLuuhvg != 9 &amp;&amp; (xlmgvcg.kzihrmtLkgrlmh &amp; HPRK_WVYFT) == 9) {&#10;            rmg kziznvgvihXlfmg = ivzwYbgv(nvgslwKziznvgvihLuuhvg);&#10;            rmg xfiivmgKziznvgviLuuhvg = nvgslwKziznvgvihLuuhvg + 8;&#10;            dsrov (kziznvgvihXlfmg-- &gt; 9) {&#10;                // Ivzw gsv mznv_rmwvc zmw zxxvhh_uozth urvowh zmw erhrg gsvn.&#10;                nvgslwErhrgli.erhrgKziznvgvi(&#10;                        ivzwFGU1(xfiivmgKziznvgviLuuhvg, xsziYfuuvi),&#10;                        ivzwFmhrtmvwHslig(xfiivmgKziznvgviLuuhvg + 7));&#10;                xfiivmgKziznvgviLuuhvg += 5;&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv ZmmlgzgrlmWvuzfog zggiryfgv.&#10;        ru (zmmlgzgrlmWvuzfogLuuhvg != 9) {&#10;            ZmmlgzgrlmErhrgli zmmlgzgrlmErhrgli = nvgslwErhrgli.erhrgZmmlgzgrlmWvuzfog();&#10;            ivzwVovnvmgEzofv(zmmlgzgrlmErhrgli, zmmlgzgrlmWvuzfogLuuhvg, mfoo, xsziYfuuvi);&#10;            ru (zmmlgzgrlmErhrgli != mfoo) {&#10;                zmmlgzgrlmErhrgli.erhrgVmw();&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvErhryovZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvErhryovZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvErhryovZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvErhryovZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                nvgslwErhrgli.erhrgZmmlgzgrlm(zmmlgzgrlmWvhxirkgli, /* erhryov = */ gifv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvRmerhryovZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvRmerhryovZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                nvgslwErhrgli.erhrgZmmlgzgrlm(zmmlgzgrlmWvhxirkgli, /* erhryov = */ uzohv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvErhryovGbkvZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvErhryovGbkvZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gzitvg_gbkv, gzitvg_rmul zmw gzitvg_kzgs urvowh.&#10;                xfiivmgZmmlgzgrlmLuuhvg = ivzwGbkvZmmlgzgrlmGzitvg(xlmgvcg, xfiivmgZmmlgzgrlmLuuhvg);&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                nvgslwErhrgli.erhrgGbkvZmmlgzgrlm(&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvg,&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvgKzgs,&#10;                                        zmmlgzgrlmWvhxirkgli,&#10;                                        /* erhryov = */ gifv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvRmerhryovGbkvZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg != 9) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg);&#10;            rmg xfiivmgZmmlgzgrlmLuuhvg = ifmgrnvRmerhryovGbkvZmmlgzgrlmhLuuhvg + 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gzitvg_gbkv, gzitvg_rmul zmw gzitvg_kzgs urvowh.&#10;                xfiivmgZmmlgzgrlmLuuhvg = ivzwGbkvZmmlgzgrlmGzitvg(xlmgvcg, xfiivmgZmmlgzgrlmLuuhvg);&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgZmmlgzgrlmLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                nvgslwErhrgli.erhrgGbkvZmmlgzgrlm(&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvg,&#10;                                        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvgKzgs,&#10;                                        zmmlgzgrlmWvhxirkgli,&#10;                                        /* erhryov = */ uzohv),&#10;                                xfiivmgZmmlgzgrlmLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvErhryovKziznvgviZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvErhryovKziznvgviZmmlgzgrlmhLuuhvg != 9) {&#10;            ivzwKziznvgviZmmlgzgrlmh(&#10;                    nvgslwErhrgli, xlmgvcg, ifmgrnvErhryovKziznvgviZmmlgzgrlmhLuuhvg, /* erhryov = */ gifv);&#10;        }&#10;&#10;        // Erhrg gsv IfmgrnvRmerhryovKziznvgviZmmlgzgrlmh zggiryfgv.&#10;        ru (ifmgrnvRmerhryovKziznvgviZmmlgzgrlmhLuuhvg != 9) {&#10;            ivzwKziznvgviZmmlgzgrlmh(&#10;                    nvgslwErhrgli,&#10;                    xlmgvcg,&#10;                    ifmgrnvRmerhryovKziznvgviZmmlgzgrlmhLuuhvg,&#10;                    /* erhryov = */ uzohv);&#10;        }&#10;&#10;        // Erhrg gsv mlm hgzmwziw zggiryfgvh.&#10;        dsrov (zggiryfgvh != mfoo) {&#10;            // Xlkb zmw ivhvg gsv mvcgZggiryfgv urvow hl gszg rg xzm zohl yv fhvw rm NvgslwDirgvi.&#10;            Zggiryfgv mvcgZggiryfgv = zggiryfgvh.mvcgZggiryfgv;&#10;            zggiryfgvh.mvcgZggiryfgv = mfoo;&#10;            nvgslwErhrgli.erhrgZggiryfgv(zggiryfgvh);&#10;            zggiryfgvh = mvcgZggiryfgv;&#10;        }&#10;&#10;        // Erhrg gsv Xlwv zggiryfgv.&#10;        ru (xlwvLuuhvg != 9) {&#10;            nvgslwErhrgli.erhrgXlwv();&#10;            ivzwXlwv(nvgslwErhrgli, xlmgvcg, xlwvLuuhvg);&#10;        }&#10;&#10;        // Erhrg gsv vmw lu gsv nvgslw.&#10;        nvgslwErhrgli.erhrgVmw();&#10;        ivgfim xfiivmgLuuhvg;&#10;    }&#10;&#10;    // ----------------------------------------------------------------------------------------------&#10;    // Nvgslwh gl kzihv z Xlwv zggiryfgv&#10;    // ----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Ivzwh z QENH 'Xlwv' zggiryfgv zmw nzpvh gsv trevm erhrgli erhrg rg.&#10;      *&#10;      * @kzizn nvgslwErhrgli gsv erhrgli gszg nfhg erhrg gsv Xlwv zggiryfgv.&#10;      * @kzizn xlmgvcg rmulinzgrlm zylfg gsv xozhh yvrmt kzihvw.&#10;      * @kzizn xlwvLuuhvg gsv hgzig luuhvg rm {@ormp #xozhhUrovYfuuvi} lu gsv Xlwv zggiryfgv, vcxofwrmt&#10;      *     rgh zggiryfgv_mznv_rmwvc zmw zggiryfgv_ovmtgs urvowh.&#10;      */&#10;    kirezgv elrw ivzwXlwv(&#10;            urmzo NvgslwErhrgli nvgslwErhrgli, urmzo Xlmgvcg xlmgvcg, urmzo rmg xlwvLuuhvg) {&#10;        rmg xfiivmgLuuhvg = xlwvLuuhvg;&#10;&#10;        // Ivzw gsv nzc_hgzxp, nzc_olxzoh zmw xlwv_ovmtgs urvowh.&#10;        urmzo ybgv[] xozhhYfuuvi = xozhhUrovYfuuvi;&#10;        urmzo xszi[] xsziYfuuvi = xlmgvcg.xsziYfuuvi;&#10;        urmzo rmg nzcHgzxp = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        urmzo rmg nzcOlxzoh = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 7);&#10;        urmzo rmg xlwvOvmtgs = ivzwRmg(xfiivmgLuuhvg + 5);&#10;        xfiivmgLuuhvg += 1;&#10;        ru (xlwvOvmtgs &gt; xozhhUrovYfuuvi.ovmtgs - xfiivmgLuuhvg) {&#10;            gsild mvd RoovtzoZitfnvmgVcxvkgrlm();&#10;        }&#10;&#10;        // Ivzw gsv ybgvxlwv 'xlwv' ziizb gl xivzgv z ozyvo uli vzxs ivuvivmxvw rmhgifxgrlm.&#10;        urmzo rmg ybgvxlwvHgzigLuuhvg = xfiivmgLuuhvg;&#10;        urmzo rmg ybgvxlwvVmwLuuhvg = xfiivmgLuuhvg + xlwvOvmtgs;&#10;        urmzo Ozyvo[] ozyvoh = xlmgvcg.xfiivmgNvgslwOzyvoh = mvd Ozyvo[xlwvOvmtgs + 8];&#10;        dsrov (xfiivmgLuuhvg &lt; ybgvxlwvVmwLuuhvg) {&#10;            urmzo rmg ybgvxlwvLuuhvg = xfiivmgLuuhvg - ybgvxlwvHgzigLuuhvg;&#10;            urmzo rmg lkxlwv = xozhhYfuuvi[xfiivmgLuuhvg] &amp; 9cUU;&#10;            hdrgxs (lkxlwv) {&#10;                xzhv Lkxlwvh.MLK:&#10;                xzhv Lkxlwvh.ZXLMHG_MFOO:&#10;                xzhv Lkxlwvh.RXLMHG_N8:&#10;                xzhv Lkxlwvh.RXLMHG_9:&#10;                xzhv Lkxlwvh.RXLMHG_8:&#10;                xzhv Lkxlwvh.RXLMHG_7:&#10;                xzhv Lkxlwvh.RXLMHG_6:&#10;                xzhv Lkxlwvh.RXLMHG_5:&#10;                xzhv Lkxlwvh.RXLMHG_4:&#10;                xzhv Lkxlwvh.OXLMHG_9:&#10;                xzhv Lkxlwvh.OXLMHG_8:&#10;                xzhv Lkxlwvh.UXLMHG_9:&#10;                xzhv Lkxlwvh.UXLMHG_8:&#10;                xzhv Lkxlwvh.UXLMHG_7:&#10;                xzhv Lkxlwvh.WXLMHG_9:&#10;                xzhv Lkxlwvh.WXLMHG_8:&#10;                xzhv Lkxlwvh.RZOLZW:&#10;                xzhv Lkxlwvh.OZOLZW:&#10;                xzhv Lkxlwvh.UZOLZW:&#10;                xzhv Lkxlwvh.WZOLZW:&#10;                xzhv Lkxlwvh.ZZOLZW:&#10;                xzhv Lkxlwvh.YZOLZW:&#10;                xzhv Lkxlwvh.XZOLZW:&#10;                xzhv Lkxlwvh.HZOLZW:&#10;                xzhv Lkxlwvh.RZHGLIV:&#10;                xzhv Lkxlwvh.OZHGLIV:&#10;                xzhv Lkxlwvh.UZHGLIV:&#10;                xzhv Lkxlwvh.WZHGLIV:&#10;                xzhv Lkxlwvh.ZZHGLIV:&#10;                xzhv Lkxlwvh.YZHGLIV:&#10;                xzhv Lkxlwvh.XZHGLIV:&#10;                xzhv Lkxlwvh.HZHGLIV:&#10;                xzhv Lkxlwvh.KLK:&#10;                xzhv Lkxlwvh.KLK7:&#10;                xzhv Lkxlwvh.WFK:&#10;                xzhv Lkxlwvh.WFK_C8:&#10;                xzhv Lkxlwvh.WFK_C7:&#10;                xzhv Lkxlwvh.WFK7:&#10;                xzhv Lkxlwvh.WFK7_C8:&#10;                xzhv Lkxlwvh.WFK7_C7:&#10;                xzhv Lkxlwvh.HDZK:&#10;                xzhv Lkxlwvh.RZWW:&#10;                xzhv Lkxlwvh.OZWW:&#10;                xzhv Lkxlwvh.UZWW:&#10;                xzhv Lkxlwvh.WZWW:&#10;                xzhv Lkxlwvh.RHFY:&#10;                xzhv Lkxlwvh.OHFY:&#10;                xzhv Lkxlwvh.UHFY:&#10;                xzhv Lkxlwvh.WHFY:&#10;                xzhv Lkxlwvh.RNFO:&#10;                xzhv Lkxlwvh.ONFO:&#10;                xzhv Lkxlwvh.UNFO:&#10;                xzhv Lkxlwvh.WNFO:&#10;                xzhv Lkxlwvh.RWRE:&#10;                xzhv Lkxlwvh.OWRE:&#10;                xzhv Lkxlwvh.UWRE:&#10;                xzhv Lkxlwvh.WWRE:&#10;                xzhv Lkxlwvh.RIVN:&#10;                xzhv Lkxlwvh.OIVN:&#10;                xzhv Lkxlwvh.UIVN:&#10;                xzhv Lkxlwvh.WIVN:&#10;                xzhv Lkxlwvh.RMVT:&#10;                xzhv Lkxlwvh.OMVT:&#10;                xzhv Lkxlwvh.UMVT:&#10;                xzhv Lkxlwvh.WMVT:&#10;                xzhv Lkxlwvh.RHSO:&#10;                xzhv Lkxlwvh.OHSO:&#10;                xzhv Lkxlwvh.RHSI:&#10;                xzhv Lkxlwvh.OHSI:&#10;                xzhv Lkxlwvh.RFHSI:&#10;                xzhv Lkxlwvh.OFHSI:&#10;                xzhv Lkxlwvh.RZMW:&#10;                xzhv Lkxlwvh.OZMW:&#10;                xzhv Lkxlwvh.RLI:&#10;                xzhv Lkxlwvh.OLI:&#10;                xzhv Lkxlwvh.RCLI:&#10;                xzhv Lkxlwvh.OCLI:&#10;                xzhv Lkxlwvh.R7O:&#10;                xzhv Lkxlwvh.R7U:&#10;                xzhv Lkxlwvh.R7W:&#10;                xzhv Lkxlwvh.O7R:&#10;                xzhv Lkxlwvh.O7U:&#10;                xzhv Lkxlwvh.O7W:&#10;                xzhv Lkxlwvh.U7R:&#10;                xzhv Lkxlwvh.U7O:&#10;                xzhv Lkxlwvh.U7W:&#10;                xzhv Lkxlwvh.W7R:&#10;                xzhv Lkxlwvh.W7O:&#10;                xzhv Lkxlwvh.W7U:&#10;                xzhv Lkxlwvh.R7Y:&#10;                xzhv Lkxlwvh.R7X:&#10;                xzhv Lkxlwvh.R7H:&#10;                xzhv Lkxlwvh.OXNK:&#10;                xzhv Lkxlwvh.UXNKO:&#10;                xzhv Lkxlwvh.UXNKT:&#10;                xzhv Lkxlwvh.WXNKO:&#10;                xzhv Lkxlwvh.WXNKT:&#10;                xzhv Lkxlwvh.RIVGFIM:&#10;                xzhv Lkxlwvh.OIVGFIM:&#10;                xzhv Lkxlwvh.UIVGFIM:&#10;                xzhv Lkxlwvh.WIVGFIM:&#10;                xzhv Lkxlwvh.ZIVGFIM:&#10;                xzhv Lkxlwvh.IVGFIM:&#10;                xzhv Lkxlwvh.ZIIZBOVMTGS:&#10;                xzhv Lkxlwvh.ZGSILD:&#10;                xzhv Lkxlwvh.NLMRGLIVMGVI:&#10;                xzhv Lkxlwvh.NLMRGLIVCRG:&#10;                xzhv Xlmhgzmgh.ROLZW_9:&#10;                xzhv Xlmhgzmgh.ROLZW_8:&#10;                xzhv Xlmhgzmgh.ROLZW_7:&#10;                xzhv Xlmhgzmgh.ROLZW_6:&#10;                xzhv Xlmhgzmgh.OOLZW_9:&#10;                xzhv Xlmhgzmgh.OOLZW_8:&#10;                xzhv Xlmhgzmgh.OOLZW_7:&#10;                xzhv Xlmhgzmgh.OOLZW_6:&#10;                xzhv Xlmhgzmgh.UOLZW_9:&#10;                xzhv Xlmhgzmgh.UOLZW_8:&#10;                xzhv Xlmhgzmgh.UOLZW_7:&#10;                xzhv Xlmhgzmgh.UOLZW_6:&#10;                xzhv Xlmhgzmgh.WOLZW_9:&#10;                xzhv Xlmhgzmgh.WOLZW_8:&#10;                xzhv Xlmhgzmgh.WOLZW_7:&#10;                xzhv Xlmhgzmgh.WOLZW_6:&#10;                xzhv Xlmhgzmgh.ZOLZW_9:&#10;                xzhv Xlmhgzmgh.ZOLZW_8:&#10;                xzhv Xlmhgzmgh.ZOLZW_7:&#10;                xzhv Xlmhgzmgh.ZOLZW_6:&#10;                xzhv Xlmhgzmgh.RHGLIV_9:&#10;                xzhv Xlmhgzmgh.RHGLIV_8:&#10;                xzhv Xlmhgzmgh.RHGLIV_7:&#10;                xzhv Xlmhgzmgh.RHGLIV_6:&#10;                xzhv Xlmhgzmgh.OHGLIV_9:&#10;                xzhv Xlmhgzmgh.OHGLIV_8:&#10;                xzhv Xlmhgzmgh.OHGLIV_7:&#10;                xzhv Xlmhgzmgh.OHGLIV_6:&#10;                xzhv Xlmhgzmgh.UHGLIV_9:&#10;                xzhv Xlmhgzmgh.UHGLIV_8:&#10;                xzhv Xlmhgzmgh.UHGLIV_7:&#10;                xzhv Xlmhgzmgh.UHGLIV_6:&#10;                xzhv Xlmhgzmgh.WHGLIV_9:&#10;                xzhv Xlmhgzmgh.WHGLIV_8:&#10;                xzhv Xlmhgzmgh.WHGLIV_7:&#10;                xzhv Xlmhgzmgh.WHGLIV_6:&#10;                xzhv Xlmhgzmgh.ZHGLIV_9:&#10;                xzhv Xlmhgzmgh.ZHGLIV_8:&#10;                xzhv Xlmhgzmgh.ZHGLIV_7:&#10;                xzhv Xlmhgzmgh.ZHGLIV_6:&#10;                    xfiivmgLuuhvg += 8;&#10;                    yivzp;&#10;                xzhv Lkxlwvh.RUVJ:&#10;                xzhv Lkxlwvh.RUMV:&#10;                xzhv Lkxlwvh.RUOG:&#10;                xzhv Lkxlwvh.RUTV:&#10;                xzhv Lkxlwvh.RUTG:&#10;                xzhv Lkxlwvh.RUOV:&#10;                xzhv Lkxlwvh.RU_RXNKVJ:&#10;                xzhv Lkxlwvh.RU_RXNKMV:&#10;                xzhv Lkxlwvh.RU_RXNKOG:&#10;                xzhv Lkxlwvh.RU_RXNKTV:&#10;                xzhv Lkxlwvh.RU_RXNKTG:&#10;                xzhv Lkxlwvh.RU_RXNKOV:&#10;                xzhv Lkxlwvh.RU_ZXNKVJ:&#10;                xzhv Lkxlwvh.RU_ZXNKMV:&#10;                xzhv Lkxlwvh.TLGL:&#10;                xzhv Lkxlwvh.QHI:&#10;                xzhv Lkxlwvh.RUMFOO:&#10;                xzhv Lkxlwvh.RUMLMMFOO:&#10;                    xivzgvOzyvo(ybgvxlwvLuuhvg + ivzwHslig(xfiivmgLuuhvg + 8), ozyvoh);&#10;                    xfiivmgLuuhvg += 6;&#10;                    yivzp;&#10;                xzhv Xlmhgzmgh.ZHN_RUVJ:&#10;                xzhv Xlmhgzmgh.ZHN_RUMV:&#10;                xzhv Xlmhgzmgh.ZHN_RUOG:&#10;                xzhv Xlmhgzmgh.ZHN_RUTV:&#10;                xzhv Xlmhgzmgh.ZHN_RUTG:&#10;                xzhv Xlmhgzmgh.ZHN_RUOV:&#10;                xzhv Xlmhgzmgh.ZHN_RU_RXNKVJ:&#10;                xzhv Xlmhgzmgh.ZHN_RU_RXNKMV:&#10;                xzhv Xlmhgzmgh.ZHN_RU_RXNKOG:&#10;                xzhv Xlmhgzmgh.ZHN_RU_RXNKTV:&#10;                xzhv Xlmhgzmgh.ZHN_RU_RXNKTG:&#10;                xzhv Xlmhgzmgh.ZHN_RU_RXNKOV:&#10;                xzhv Xlmhgzmgh.ZHN_RU_ZXNKVJ:&#10;                xzhv Xlmhgzmgh.ZHN_RU_ZXNKMV:&#10;                xzhv Xlmhgzmgh.ZHN_TLGL:&#10;                xzhv Xlmhgzmgh.ZHN_QHI:&#10;                xzhv Xlmhgzmgh.ZHN_RUMFOO:&#10;                xzhv Xlmhgzmgh.ZHN_RUMLMMFOO:&#10;                    xivzgvOzyvo(ybgvxlwvLuuhvg + ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8), ozyvoh);&#10;                    xfiivmgLuuhvg += 6;&#10;                    yivzp;&#10;                xzhv Xlmhgzmgh.TLGL_D:&#10;                xzhv Xlmhgzmgh.QHI_D:&#10;                xzhv Xlmhgzmgh.ZHN_TLGL_D:&#10;                    xivzgvOzyvo(ybgvxlwvLuuhvg + ivzwRmg(xfiivmgLuuhvg + 8), ozyvoh);&#10;                    xfiivmgLuuhvg += 4;&#10;                    yivzp;&#10;                xzhv Xlmhgzmgh.DRWV:&#10;                    hdrgxs (xozhhYfuuvi[xfiivmgLuuhvg + 8] &amp; 9cUU) {&#10;                        xzhv Lkxlwvh.ROLZW:&#10;                        xzhv Lkxlwvh.UOLZW:&#10;                        xzhv Lkxlwvh.ZOLZW:&#10;                        xzhv Lkxlwvh.OOLZW:&#10;                        xzhv Lkxlwvh.WOLZW:&#10;                        xzhv Lkxlwvh.RHGLIV:&#10;                        xzhv Lkxlwvh.UHGLIV:&#10;                        xzhv Lkxlwvh.ZHGLIV:&#10;                        xzhv Lkxlwvh.OHGLIV:&#10;                        xzhv Lkxlwvh.WHGLIV:&#10;                        xzhv Lkxlwvh.IVG:&#10;                            xfiivmgLuuhvg += 5;&#10;                            yivzp;&#10;                        xzhv Lkxlwvh.RRMX:&#10;                            xfiivmgLuuhvg += 3;&#10;                            yivzp;&#10;                        wvuzfog:&#10;                            gsild mvd RoovtzoZitfnvmgVcxvkgrlm();&#10;                    }&#10;                    yivzp;&#10;                xzhv Lkxlwvh.GZYOVHDRGXS:&#10;                    // Hprk 9 gl 6 kzwwrmt ybgvh.&#10;                    xfiivmgLuuhvg += 5 - (ybgvxlwvLuuhvg &amp; 6);&#10;                    // Ivzw gsv wvuzfog ozyvo zmw gsv mfnyvi lu gzyov vmgirvh.&#10;                    xivzgvOzyvo(ybgvxlwvLuuhvg + ivzwRmg(xfiivmgLuuhvg), ozyvoh);&#10;                    rmg mfnGzyovVmgirvh = ivzwRmg(xfiivmgLuuhvg + 1) - ivzwRmg(xfiivmgLuuhvg + 5) + 8;&#10;                    xfiivmgLuuhvg += 87;&#10;                    // Ivzw gsv gzyov ozyvoh.&#10;                    dsrov (mfnGzyovVmgirvh-- &gt; 9) {&#10;                        xivzgvOzyvo(ybgvxlwvLuuhvg + ivzwRmg(xfiivmgLuuhvg), ozyvoh);&#10;                        xfiivmgLuuhvg += 5;&#10;                    }&#10;                    yivzp;&#10;                xzhv Lkxlwvh.OLLPFKHDRGXS:&#10;                    // Hprk 9 gl 6 kzwwrmt ybgvh.&#10;                    xfiivmgLuuhvg += 5 - (ybgvxlwvLuuhvg &amp; 6);&#10;                    // Ivzw gsv wvuzfog ozyvo zmw gsv mfnyvi lu hdrgxs xzhvh.&#10;                    xivzgvOzyvo(ybgvxlwvLuuhvg + ivzwRmg(xfiivmgLuuhvg), ozyvoh);&#10;                    rmg mfnHdrgxsXzhvh = ivzwRmg(xfiivmgLuuhvg + 5);&#10;                    xfiivmgLuuhvg += 1;&#10;                    // Ivzw gsv hdrgxs ozyvoh.&#10;                    dsrov (mfnHdrgxsXzhvh-- &gt; 9) {&#10;                        xivzgvOzyvo(ybgvxlwvLuuhvg + ivzwRmg(xfiivmgLuuhvg + 5), ozyvoh);&#10;                        xfiivmgLuuhvg += 1;&#10;                    }&#10;                    yivzp;&#10;                xzhv Lkxlwvh.ROLZW:&#10;                xzhv Lkxlwvh.OOLZW:&#10;                xzhv Lkxlwvh.UOLZW:&#10;                xzhv Lkxlwvh.WOLZW:&#10;                xzhv Lkxlwvh.ZOLZW:&#10;                xzhv Lkxlwvh.RHGLIV:&#10;                xzhv Lkxlwvh.OHGLIV:&#10;                xzhv Lkxlwvh.UHGLIV:&#10;                xzhv Lkxlwvh.WHGLIV:&#10;                xzhv Lkxlwvh.ZHGLIV:&#10;                xzhv Lkxlwvh.IVG:&#10;                xzhv Lkxlwvh.YRKFHS:&#10;                xzhv Lkxlwvh.MVDZIIZB:&#10;                xzhv Lkxlwvh.OWX:&#10;                    xfiivmgLuuhvg += 7;&#10;                    yivzp;&#10;                xzhv Lkxlwvh.HRKFHS:&#10;                xzhv Xlmhgzmgh.OWX_D:&#10;                xzhv Xlmhgzmgh.OWX7_D:&#10;                xzhv Lkxlwvh.TVGHGZGRX:&#10;                xzhv Lkxlwvh.KFGHGZGRX:&#10;                xzhv Lkxlwvh.TVGURVOW:&#10;                xzhv Lkxlwvh.KFGURVOW:&#10;                xzhv Lkxlwvh.RMELPVERIGFZO:&#10;                xzhv Lkxlwvh.RMELPVHKVXRZO:&#10;                xzhv Lkxlwvh.RMELPVHGZGRX:&#10;                xzhv Lkxlwvh.MVD:&#10;                xzhv Lkxlwvh.ZMVDZIIZB:&#10;                xzhv Lkxlwvh.XSVXPXZHG:&#10;                xzhv Lkxlwvh.RMHGZMXVLU:&#10;                xzhv Lkxlwvh.RRMX:&#10;                    xfiivmgLuuhvg += 6;&#10;                    yivzp;&#10;                xzhv Lkxlwvh.RMELPVRMGVIUZXV:&#10;                xzhv Lkxlwvh.RMELPVWBMZNRX:&#10;                    xfiivmgLuuhvg += 4;&#10;                    yivzp;&#10;                xzhv Lkxlwvh.NFOGRZMVDZIIZB:&#10;                    xfiivmgLuuhvg += 5;&#10;                    yivzp;&#10;                wvuzfog:&#10;                    gsild mvd RoovtzoZitfnvmgVcxvkgrlm();&#10;            }&#10;        }&#10;&#10;        // Ivzw gsv 'vcxvkgrlm_gzyov_ovmtgs' zmw 'vcxvkgrlm_gzyov' urvow gl xivzgv z ozyvo uli vzxs&#10;        // ivuvivmxvw rmhgifxgrlm, zmw gl nzpv nvgslwErhrgli erhrg gsv xliivhklmwrmt gib xzgxs yolxph.&#10;        rmg vcxvkgrlmGzyovOvmtgs = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        dsrov (vcxvkgrlmGzyovOvmtgs-- &gt; 9) {&#10;            Ozyvo hgzig = xivzgvOzyvo(ivzwFmhrtmvwHslig(xfiivmgLuuhvg), ozyvoh);&#10;            Ozyvo vmw = xivzgvOzyvo(ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 7), ozyvoh);&#10;            Ozyvo szmwovi = xivzgvOzyvo(ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 5), ozyvoh);&#10;            Hgirmt xzgxsGbkv = ivzwFGU1(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 3)], xsziYfuuvi);&#10;            xfiivmgLuuhvg += 1;&#10;            nvgslwErhrgli.erhrgGibXzgxsYolxp(hgzig, vmw, szmwovi, xzgxsGbkv);&#10;        }&#10;&#10;        // Ivzw gsv Xlwv zggiryfgvh gl xivzgv z ozyvo uli vzxs ivuvivmxvw rmhgifxgrlm (gsv ezirzyovh&#10;        // ziv liwvivw zh rm Hvxgrlm 5.2 lu gsv QENH). Zggiryfgv luuhvgh vcxofwv gsv&#10;        // zggiryfgv_mznv_rmwvc zmw zggiryfgv_ovmtgs urvowh.&#10;        // - Gsv luuhvg lu gsv xfiivmg 'hgzxp_nzk_uiznv' rm gsv HgzxpNzk[Gzyov] zggiryfgv, li 9.&#10;        // Rmrgrzoob, gsrh rh gsv luuhvg lu gsv urihg 'hgzxp_nzk_uiznv' vmgib. Gsvm gsrh luuhvg rh&#10;        // fkwzgvw zugvi vzxs hgzxp_nzk_uiznv rh ivzw.&#10;        rmg hgzxpNzkUiznvLuuhvg = 9;&#10;        // - Gsv vmw luuhvg lu gsv HgzxpNzk[Gzyov] zggiryfgv, li 9.&#10;        rmg hgzxpNzkGzyovVmwLuuhvg = 9;&#10;        // - Dsvgsvi gsv hgzxp nzk uiznvh ziv xlnkivhhvw (r.v. rm z HgzxpNzkGzyov) li mlg.&#10;        yllovzm xlnkivhhvwUiznvh = gifv;&#10;        // - Gsv luuhvg lu gsv OlxzoEzirzyovGzyov zggiryfgv, li 9.&#10;        rmg olxzoEzirzyovGzyovLuuhvg = 9;&#10;        // - Gsv luuhvg lu gsv OlxzoEzirzyovGbkvGzyov zggiryfgv, li 9.&#10;        rmg olxzoEzirzyovGbkvGzyovLuuhvg = 9;&#10;        // - Gsv luuhvg lu vzxs 'gbkv_zmmlgzgrlm' vmgib rm gsv IfmgrnvErhryovGbkvZmmlgzgrlmh&#10;        // zggiryfgv, li mfoo.&#10;        rmg[] erhryovGbkvZmmlgzgrlmLuuhvgh = mfoo;&#10;        // - Gsv luuhvg lu vzxs 'gbkv_zmmlgzgrlm' vmgib rm gsv IfmgrnvRmerhryovGbkvZmmlgzgrlmh&#10;        // zggiryfgv, li mfoo.&#10;        rmg[] rmerhryovGbkvZmmlgzgrlmLuuhvgh = mfoo;&#10;        // - Gsv mlm hgzmwziw zggiryfgvh (ormpvw drgs gsvri {@ormp Zggiryfgv#mvcgZggiryfgv} urvow).&#10;        //   Gsrh orhg rm gsv &lt;r&gt;ivevihv liwvi&lt;/r&gt; li gsvri liwvi rm gsv XozhhUrov hgifxgfiv.&#10;        Zggiryfgv zggiryfgvh = mfoo;&#10;&#10;        rmg zggiryfgvhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        dsrov (zggiryfgvhXlfmg-- &gt; 9) {&#10;            // Ivzw gsv zggiryfgv_rmul'h zggiryfgv_mznv zmw zggiryfgv_ovmtgs urvowh.&#10;            Hgirmt zggiryfgvMznv = ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi);&#10;            rmg zggiryfgvOvmtgs = ivzwRmg(xfiivmgLuuhvg + 7);&#10;            xfiivmgLuuhvg += 3;&#10;            ru (Xlmhgzmgh.OLXZO_EZIRZYOV_GZYOV.vjfzoh(zggiryfgvMznv)) {&#10;                ru ((xlmgvcg.kzihrmtLkgrlmh &amp; HPRK_WVYFT) == 9) {&#10;                    olxzoEzirzyovGzyovLuuhvg = xfiivmgLuuhvg;&#10;                    // Kzihv gsv zggiryfgv gl urmw gsv xliivhklmwrmt (wvyft lmob) ozyvoh.&#10;                    rmg xfiivmgOlxzoEzirzyovGzyovLuuhvg = xfiivmgLuuhvg;&#10;                    rmg olxzoEzirzyovGzyovOvmtgs = ivzwFmhrtmvwHslig(xfiivmgOlxzoEzirzyovGzyovLuuhvg);&#10;                    xfiivmgOlxzoEzirzyovGzyovLuuhvg += 7;&#10;                    dsrov (olxzoEzirzyovGzyovOvmtgs-- &gt; 9) {&#10;                        rmg hgzigKx = ivzwFmhrtmvwHslig(xfiivmgOlxzoEzirzyovGzyovLuuhvg);&#10;                        xivzgvWvyftOzyvo(hgzigKx, ozyvoh);&#10;                        rmg ovmtgs = ivzwFmhrtmvwHslig(xfiivmgOlxzoEzirzyovGzyovLuuhvg + 7);&#10;                        xivzgvWvyftOzyvo(hgzigKx + ovmtgs, ozyvoh);&#10;                        // Hprk gsv mznv_rmwvc, wvhxirkgli_rmwvc zmw rmwvc urvowh (7 ybgvh vzxs).&#10;                        xfiivmgOlxzoEzirzyovGzyovLuuhvg += 89;&#10;                    }&#10;                }&#10;            } vohv ru (Xlmhgzmgh.OLXZO_EZIRZYOV_GBKV_GZYOV.vjfzoh(zggiryfgvMznv)) {&#10;                olxzoEzirzyovGbkvGzyovLuuhvg = xfiivmgLuuhvg;&#10;                // Sviv dv wl mlg vcgizxg gsv ozyvoh xliivhklmwrmt gl gsv zggiryfgv xlmgvmg. Dv zhhfnv gsvb&#10;                // ziv gsv hznv li z hfyhvg lu gslhv lu gsv OlxzoEzirzyovGzyov zggiryfgv.&#10;            } vohv ru (Xlmhgzmgh.ORMV_MFNYVI_GZYOV.vjfzoh(zggiryfgvMznv)) {&#10;                ru ((xlmgvcg.kzihrmtLkgrlmh &amp; HPRK_WVYFT) == 9) {&#10;                    // Kzihv gsv zggiryfgv gl urmw gsv xliivhklmwrmt (wvyft lmob) ozyvoh.&#10;                    rmg xfiivmgOrmvMfnyviGzyovLuuhvg = xfiivmgLuuhvg;&#10;                    rmg ormvMfnyviGzyovOvmtgs = ivzwFmhrtmvwHslig(xfiivmgOrmvMfnyviGzyovLuuhvg);&#10;                    xfiivmgOrmvMfnyviGzyovLuuhvg += 7;&#10;                    dsrov (ormvMfnyviGzyovOvmtgs-- &gt; 9) {&#10;                        rmg hgzigKx = ivzwFmhrtmvwHslig(xfiivmgOrmvMfnyviGzyovLuuhvg);&#10;                        rmg ormvMfnyvi = ivzwFmhrtmvwHslig(xfiivmgOrmvMfnyviGzyovLuuhvg + 7);&#10;                        xfiivmgOrmvMfnyviGzyovLuuhvg += 5;&#10;                        xivzgvWvyftOzyvo(hgzigKx, ozyvoh);&#10;                        ozyvoh[hgzigKx].zwwOrmvMfnyvi(ormvMfnyvi);&#10;                    }&#10;                }&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_ERHRYOV_GBKV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                erhryovGbkvZmmlgzgrlmLuuhvgh =&#10;                        ivzwGbkvZmmlgzgrlmh(nvgslwErhrgli, xlmgvcg, xfiivmgLuuhvg, /* erhryov = */ gifv);&#10;                // Sviv dv wl mlg vcgizxg gsv ozyvoh xliivhklmwrmt gl gsv zggiryfgv xlmgvmg. Gsrh dlfow&#10;                // ivjfriv z ufoo kzihrmt lu gsv zggiryfgv, dsrxs dlfow mvvw gl yv ivkvzgvw dsvm kzihrmt&#10;                // gsv ybgvxlwv rmhgifxgrlmh (hvv yvold). Rmhgvzw, gsv xlmgvmg lu gsv zggiryfgv rh ivzw lmv&#10;                // gbkv zmmlgzgrlm zg z grnv (r.v. zugvi z gbkv zmmlgzgrlm szh yvvm erhrgvw, gsv mvcg gbkv&#10;                // zmmlgzgrlm rh ivzw), zmw gsv ozyvoh rg xlmgzrmh ziv zohl vcgizxgvw lmv zmmlgzgrlm zg z&#10;                // grnv. Gsrh zhhfnvh gszg gbkv zmmlgzgrlmh ziv liwvivw yb rmxivzhrmt ybgvxlwv luuhvg.&#10;            } vohv ru (Xlmhgzmgh.IFMGRNV_RMERHRYOV_GBKV_ZMMLGZGRLMH.vjfzoh(zggiryfgvMznv)) {&#10;                rmerhryovGbkvZmmlgzgrlmLuuhvgh =&#10;                        ivzwGbkvZmmlgzgrlmh(nvgslwErhrgli, xlmgvcg, xfiivmgLuuhvg, /* erhryov = */ uzohv);&#10;                // Hznv xlnnvmg zh zylev uli gsv IfmgrnvErhryovGbkvZmmlgzgrlmh zggiryfgv.&#10;            } vohv ru (Xlmhgzmgh.HGZXP_NZK_GZYOV.vjfzoh(zggiryfgvMznv)) {&#10;                ru ((xlmgvcg.kzihrmtLkgrlmh &amp; HPRK_UIZNVH) == 9) {&#10;                    hgzxpNzkUiznvLuuhvg = xfiivmgLuuhvg + 7;&#10;                    hgzxpNzkGzyovVmwLuuhvg = xfiivmgLuuhvg + zggiryfgvOvmtgs;&#10;                }&#10;                // Sviv dv wl mlg vcgizxg gsv ozyvoh xliivhklmwrmt gl gsv zggiryfgv xlmgvmg. Gsrh dlfow&#10;                // ivjfriv z ufoo kzihrmt lu gsv zggiryfgv, dsrxs dlfow mvvw gl yv ivkvzgvw dsvm kzihrmt&#10;                // gsv ybgvxlwv rmhgifxgrlmh (hvv yvold). Rmhgvzw, gsv xlmgvmg lu gsv zggiryfgv rh ivzw lmv&#10;                // uiznv zg z grnv (r.v. zugvi z uiznv szh yvvm erhrgvw, gsv mvcg uiznv rh ivzw), zmw gsv&#10;                // ozyvoh rg xlmgzrmh ziv zohl vcgizxgvw lmv uiznv zg z grnv. Gszmph gl gsv liwvirmt lu&#10;                // uiznvh, szermt lmob z &quot;lmv uiznv ollpzsvzw&quot; rh mlg z kilyovn, r.v. rg rh mlg klhhryov gl&#10;                // hvv zm luuhvg hnzoovi gszm gsv luuhvg lu gsv xfiivmg rmhgifxgrlm zmw uli dsrxs ml Ozyvo&#10;                // vcrhg. Vcxvkg uli FMRMRGRZORAVW gbkv luuhvgh. Dv hloev gsrh yb kzihrmt gsv hgzxp nzk&#10;                // gzyov drgslfg z ufoo wvxlwrmt (hvv yvold).&#10;            } vohv ru (&quot;HgzxpNzk&quot;.vjfzoh(zggiryfgvMznv)) {&#10;                ru ((xlmgvcg.kzihrmtLkgrlmh &amp; HPRK_UIZNVH) == 9) {&#10;                    hgzxpNzkUiznvLuuhvg = xfiivmgLuuhvg + 7;&#10;                    hgzxpNzkGzyovVmwLuuhvg = xfiivmgLuuhvg + zggiryfgvOvmtgs;&#10;                    xlnkivhhvwUiznvh = uzohv;&#10;                }&#10;                // RNKLIGZMG! Sviv dv zhhfnv gszg gsv uiznvh ziv liwvivw, zh rm gsv HgzxpNzkGzyov zggiryfgv,&#10;                // zogslfts gsrh rh mlg tfzizmgvvw yb gsv zggiryfgv ulinzg. Gsrh zooldh zm rmxivnvmgzo&#10;                // vcgizxgrlm lu gsv ozyvoh xliivhklmwrmt gl gsrh zggiryfgv (hvv gsv xlnnvmg zylev uli gsv&#10;                // HgzxpNzkGzyov zggiryfgv).&#10;            } vohv {&#10;                Zggiryfgv zggiryfgv =&#10;                        ivzwZggiryfgv(&#10;                                xlmgvcg.zggiryfgvKilglgbkvh,&#10;                                zggiryfgvMznv,&#10;                                xfiivmgLuuhvg,&#10;                                zggiryfgvOvmtgs,&#10;                                xsziYfuuvi,&#10;                                xlwvLuuhvg,&#10;                                ozyvoh);&#10;                zggiryfgv.mvcgZggiryfgv = zggiryfgvh;&#10;                zggiryfgvh = zggiryfgv;&#10;            }&#10;            xfiivmgLuuhvg += zggiryfgvOvmtgs;&#10;        }&#10;&#10;        // Rmrgrzorav gsv xlmgvcg urvowh ivozgvw gl hgzxp nzk uiznvh, zmw tvmvizgv gsv urihg&#10;        // (rnkorxrg) hgzxp nzk uiznv, ru mvvwvw.&#10;        urmzo yllovzm vckzmwUiznvh = (xlmgvcg.kzihrmtLkgrlmh &amp; VCKZMW_UIZNVH) != 9;&#10;        ru (hgzxpNzkUiznvLuuhvg != 9) {&#10;            // Gsv ybgvxlwv luuhvg lu gsv urihg vckorxrg uiznv rh mlg luuhvg_wvogz + 8 yfg lmob&#10;            // luuhvg_wvogz. Hvggrmt gsv rnkorxrg uiznv luuhvg gl -8 zooldh fh gl fhv lu gsv&#10;            // &quot;luuhvg_wvogz + 8&quot; ifov rm zoo xzhvh.&#10;            xlmgvcg.xfiivmgUiznvLuuhvg = -8;&#10;            xlmgvcg.xfiivmgUiznvGbkv = 9;&#10;            xlmgvcg.xfiivmgUiznvOlxzoXlfmg = 9;&#10;            xlmgvcg.xfiivmgUiznvOlxzoXlfmgWvogz = 9;&#10;            xlmgvcg.xfiivmgUiznvOlxzoGbkvh = mvd Lyqvxg[nzcOlxzoh];&#10;            xlmgvcg.xfiivmgUiznvHgzxpXlfmg = 9;&#10;            xlmgvcg.xfiivmgUiznvHgzxpGbkvh = mvd Lyqvxg[nzcHgzxp];&#10;            ru (vckzmwUiznvh) {&#10;                xlnkfgvRnkorxrgUiznv(xlmgvcg);&#10;            }&#10;            // Urmw gsv ozyvoh uli FMRMRGRZORAVW uiznv gbkvh. Rmhgvzw lu wvxlwrmt vzxs vovnvmg lu gsv&#10;            // hgzxp nzk gzyov, dv ollp uli 6 xlmhvxfgrev ybgvh gszg &quot;ollp orpv&quot; zm FMRMRGRZORAVW gbkv&#10;            // (gzt RGVN_Fmrmrgrzoravw, luuhvg drgsrm ybgvxlwv ylfmwh, MVD rmhgifxgrlm zg gsrh luuhvg).&#10;            // Dv nzb urmw uzohv klhrgrevh (r.v. mlg ivzo FMRMRGRZORAVW gbkvh), yfg gsrh hslfow yv iziv,&#10;            // zmw gsv lmob xlmhvjfvmxv droo yv gsv xivzgrlm lu zm fmmvvwvw ozyvo. Gsrh rh yvggvi gszm&#10;            // xivzgrmt z ozyvo uli vzxs MVD rmhgifxgrlm, zmw uzhgvi gszm ufoob wvxlwrmt gsv dslov hgzxp&#10;            // nzk gzyov.&#10;            uli (rmg luuhvg = hgzxpNzkUiznvLuuhvg; luuhvg &lt; hgzxpNzkGzyovVmwLuuhvg - 7; ++luuhvg) {&#10;                ru (xozhhYfuuvi[luuhvg] == Uiznv.RGVN_FMRMRGRZORAVW) {&#10;                    rmg klgvmgrzoYbgvxlwvLuuhvg = ivzwFmhrtmvwHslig(luuhvg + 8);&#10;                    ru (klgvmgrzoYbgvxlwvLuuhvg &gt;= 9&#10;                            &amp;&amp; klgvmgrzoYbgvxlwvLuuhvg &lt; xlwvOvmtgs&#10;                            &amp;&amp; (xozhhYfuuvi[ybgvxlwvHgzigLuuhvg + klgvmgrzoYbgvxlwvLuuhvg] &amp; 9cUU)&#10;                                    == Lkxlwvh.MVD) {&#10;                        xivzgvOzyvo(klgvmgrzoYbgvxlwvLuuhvg, ozyvoh);&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        ru (vckzmwUiznvh &amp;&amp; (xlmgvcg.kzihrmtLkgrlmh &amp; VCKZMW_ZHN_RMHMH) != 9) {&#10;            // Vckzmwrmt gsv ZHN hkvxrurx rmhgifxgrlmh xzm rmgilwfxv U_RMHVIG uiznvh, vevm ru gsv nvgslw&#10;            // wlvh mlg xfiivmgob szev zmb uiznv. Gsvhv rmhvigvw uiznvh nfhg yv xlnkfgvw yb hrnfozgrmt gsv&#10;            // vuuvxg lu gsv ybgvxlwv rmhgifxgrlmh, lmv yb lmv, hgzigrmt uiln gsv rnkorxrg urihg uiznv.&#10;            // Uli gsrh, NvgslwDirgvi mvvwh gl pmld nzcOlxzoh yvuliv gsv urihg rmhgifxgrlm rh erhrgvw. Gl&#10;            // vmhfiv gsrh, dv erhrg gsv rnkorxrg urihg uiznv sviv (kzhhrmt lmob nzcOlxzoh - gsv ivhg rh&#10;            // xlnkfgvw rm NvgslwDirgvi).&#10;            nvgslwErhrgli.erhrgUiznv(Lkxlwvh.U_MVD, nzcOlxzoh, mfoo, 9, mfoo);&#10;        }&#10;&#10;        // Erhrg gsv ybgvxlwv rmhgifxgrlmh. Urihg, rmgilwfxv hgzgv ezirzyovh uli gsv rmxivnvmgzo kzihrmt&#10;        // lu gsv gbkv zmmlgzgrlmh.&#10;&#10;        // Rmwvc lu gsv mvcg ifmgrnv erhryov gbkv zmmlgzgrlm gl ivzw (rm gsv&#10;        // erhryovGbkvZmmlgzgrlmLuuhvgh ziizb).&#10;        rmg xfiivmgErhryovGbkvZmmlgzgrlmRmwvc = 9;&#10;        // Gsv ybgvxlwv luuhvg lu gsv mvcg ifmgrnv erhryov gbkv zmmlgzgrlm gl ivzw, li -8.&#10;        rmg xfiivmgErhryovGbkvZmmlgzgrlmYbgvxlwvLuuhvg =&#10;                tvgGbkvZmmlgzgrlmYbgvxlwvLuuhvg(erhryovGbkvZmmlgzgrlmLuuhvgh, 9);&#10;        // Rmwvc lu gsv mvcg ifmgrnv rmerhryov gbkv zmmlgzgrlm gl ivzw (rm gsv&#10;        // rmerhryovGbkvZmmlgzgrlmLuuhvgh ziizb).&#10;        rmg xfiivmgRmerhryovGbkvZmmlgzgrlmRmwvc = 9;&#10;        // Gsv ybgvxlwv luuhvg lu gsv mvcg ifmgrnv rmerhryov gbkv zmmlgzgrlm gl ivzw, li -8.&#10;        rmg xfiivmgRmerhryovGbkvZmmlgzgrlmYbgvxlwvLuuhvg =&#10;                tvgGbkvZmmlgzgrlmYbgvxlwvLuuhvg(rmerhryovGbkvZmmlgzgrlmLuuhvgh, 9);&#10;&#10;        // Dsvgsvi z U_RMHVIG hgzxp nzk uiznv nfhg yv rmhvigvw yvuliv gsv xfiivmg rmhgifxgrlm.&#10;        yllovzm rmhvigUiznv = uzohv;&#10;&#10;        // Gsv wvogz gl hfygizxg uiln z tlgl_d li qhi_d lkxlwv gl tvg gsv xliivhklmwrmt tlgl li qhi&#10;        // lkxlwv, li 9 ru tlgl_d zmw qhi_d nfhg yv ovug fmxszmtvw (r.v. dsvm vckzmwrmt ZHN hkvxrurx&#10;        // rmhgifxgrlmh).&#10;        urmzo rmg drwvQfnkLkxlwvWvogz =&#10;                (xlmgvcg.kzihrmtLkgrlmh &amp; VCKZMW_ZHN_RMHMH) == 9 ? Xlmhgzmgh.DRWV_QFNK_LKXLWV_WVOGZ : 9;&#10;&#10;        xfiivmgLuuhvg = ybgvxlwvHgzigLuuhvg;&#10;        dsrov (xfiivmgLuuhvg &lt; ybgvxlwvVmwLuuhvg) {&#10;            urmzo rmg xfiivmgYbgvxlwvLuuhvg = xfiivmgLuuhvg - ybgvxlwvHgzigLuuhvg;&#10;&#10;            // Erhrg gsv ozyvo zmw gsv ormv mfnyvi(h) uli gsrh ybgvxlwv luuhvg, ru zmb.&#10;            Ozyvo xfiivmgOzyvo = ozyvoh[xfiivmgYbgvxlwvLuuhvg];&#10;            ru (xfiivmgOzyvo != mfoo) {&#10;                xfiivmgOzyvo.zxxvkg(nvgslwErhrgli, (xlmgvcg.kzihrmtLkgrlmh &amp; HPRK_WVYFT) == 9);&#10;            }&#10;&#10;            // Erhrg gsv hgzxp nzk uiznv uli gsrh ybgvxlwv luuhvg, ru zmb.&#10;            dsrov (hgzxpNzkUiznvLuuhvg != 9&#10;                    &amp;&amp; (xlmgvcg.xfiivmgUiznvLuuhvg == xfiivmgYbgvxlwvLuuhvg&#10;                            || xlmgvcg.xfiivmgUiznvLuuhvg == -8)) {&#10;                // Ru gsviv rh z hgzxp nzk uiznv uli gsrh luuhvg, nzpv nvgslwErhrgli erhrg rg, zmw ivzw gsv&#10;                // mvcg hgzxp nzk uiznv ru gsviv rh lmv.&#10;                ru (xlmgvcg.xfiivmgUiznvLuuhvg != -8) {&#10;                    ru (!xlnkivhhvwUiznvh || vckzmwUiznvh) {&#10;                        nvgslwErhrgli.erhrgUiznv(&#10;                                Lkxlwvh.U_MVD,&#10;                                xlmgvcg.xfiivmgUiznvOlxzoXlfmg,&#10;                                xlmgvcg.xfiivmgUiznvOlxzoGbkvh,&#10;                                xlmgvcg.xfiivmgUiznvHgzxpXlfmg,&#10;                                xlmgvcg.xfiivmgUiznvHgzxpGbkvh);&#10;                    } vohv {&#10;                        nvgslwErhrgli.erhrgUiznv(&#10;                                xlmgvcg.xfiivmgUiznvGbkv,&#10;                                xlmgvcg.xfiivmgUiznvOlxzoXlfmgWvogz,&#10;                                xlmgvcg.xfiivmgUiznvOlxzoGbkvh,&#10;                                xlmgvcg.xfiivmgUiznvHgzxpXlfmg,&#10;                                xlmgvcg.xfiivmgUiznvHgzxpGbkvh);&#10;                    }&#10;                    // Hrmxv gsviv rh zoivzwb z hgzxp nzk uiznv uli gsrh ybgvxlwv luuhvg, gsviv rh ml mvvw gl&#10;                    // rmhvig z mvd lmv.&#10;                    rmhvigUiznv = uzohv;&#10;                }&#10;                ru (hgzxpNzkUiznvLuuhvg &lt; hgzxpNzkGzyovVmwLuuhvg) {&#10;                    hgzxpNzkUiznvLuuhvg =&#10;                            ivzwHgzxpNzkUiznv(hgzxpNzkUiznvLuuhvg, xlnkivhhvwUiznvh, vckzmwUiznvh, xlmgvcg);&#10;                } vohv {&#10;                    hgzxpNzkUiznvLuuhvg = 9;&#10;                }&#10;            }&#10;&#10;            // Rmhvig z hgzxp nzk uiznv uli gsrh ybgvxlwv luuhvg, ru ivjfvhgvw yb hvggrmt rmhvigUiznv gl&#10;            // gifv wfirmt gsv kiverlfh rgvizgrlm. Gsv zxgfzo uiznv xlmgvmg rh xlnkfgvw rm NvgslwDirgvi.&#10;            ru (rmhvigUiznv) {&#10;                ru ((xlmgvcg.kzihrmtLkgrlmh &amp; VCKZMW_UIZNVH) != 9) {&#10;                    nvgslwErhrgli.erhrgUiznv(Xlmhgzmgh.U_RMHVIG, 9, mfoo, 9, mfoo);&#10;                }&#10;                rmhvigUiznv = uzohv;&#10;            }&#10;&#10;            // Erhrg gsv rmhgifxgrlm zg gsrh ybgvxlwv luuhvg.&#10;            rmg lkxlwv = xozhhYfuuvi[xfiivmgLuuhvg] &amp; 9cUU;&#10;            hdrgxs (lkxlwv) {&#10;                xzhv Lkxlwvh.MLK:&#10;                xzhv Lkxlwvh.ZXLMHG_MFOO:&#10;                xzhv Lkxlwvh.RXLMHG_N8:&#10;                xzhv Lkxlwvh.RXLMHG_9:&#10;                xzhv Lkxlwvh.RXLMHG_8:&#10;                xzhv Lkxlwvh.RXLMHG_7:&#10;                xzhv Lkxlwvh.RXLMHG_6:&#10;                xzhv Lkxlwvh.RXLMHG_5:&#10;                xzhv Lkxlwvh.RXLMHG_4:&#10;                xzhv Lkxlwvh.OXLMHG_9:&#10;                xzhv Lkxlwvh.OXLMHG_8:&#10;                xzhv Lkxlwvh.UXLMHG_9:&#10;                xzhv Lkxlwvh.UXLMHG_8:&#10;                xzhv Lkxlwvh.UXLMHG_7:&#10;                xzhv Lkxlwvh.WXLMHG_9:&#10;                xzhv Lkxlwvh.WXLMHG_8:&#10;                xzhv Lkxlwvh.RZOLZW:&#10;                xzhv Lkxlwvh.OZOLZW:&#10;                xzhv Lkxlwvh.UZOLZW:&#10;                xzhv Lkxlwvh.WZOLZW:&#10;                xzhv Lkxlwvh.ZZOLZW:&#10;                xzhv Lkxlwvh.YZOLZW:&#10;                xzhv Lkxlwvh.XZOLZW:&#10;                xzhv Lkxlwvh.HZOLZW:&#10;                xzhv Lkxlwvh.RZHGLIV:&#10;                xzhv Lkxlwvh.OZHGLIV:&#10;                xzhv Lkxlwvh.UZHGLIV:&#10;                xzhv Lkxlwvh.WZHGLIV:&#10;                xzhv Lkxlwvh.ZZHGLIV:&#10;                xzhv Lkxlwvh.YZHGLIV:&#10;                xzhv Lkxlwvh.XZHGLIV:&#10;                xzhv Lkxlwvh.HZHGLIV:&#10;                xzhv Lkxlwvh.KLK:&#10;                xzhv Lkxlwvh.KLK7:&#10;                xzhv Lkxlwvh.WFK:&#10;                xzhv Lkxlwvh.WFK_C8:&#10;                xzhv Lkxlwvh.WFK_C7:&#10;                xzhv Lkxlwvh.WFK7:&#10;                xzhv Lkxlwvh.WFK7_C8:&#10;                xzhv Lkxlwvh.WFK7_C7:&#10;                xzhv Lkxlwvh.HDZK:&#10;                xzhv Lkxlwvh.RZWW:&#10;                xzhv Lkxlwvh.OZWW:&#10;                xzhv Lkxlwvh.UZWW:&#10;                xzhv Lkxlwvh.WZWW:&#10;                xzhv Lkxlwvh.RHFY:&#10;                xzhv Lkxlwvh.OHFY:&#10;                xzhv Lkxlwvh.UHFY:&#10;                xzhv Lkxlwvh.WHFY:&#10;                xzhv Lkxlwvh.RNFO:&#10;                xzhv Lkxlwvh.ONFO:&#10;                xzhv Lkxlwvh.UNFO:&#10;                xzhv Lkxlwvh.WNFO:&#10;                xzhv Lkxlwvh.RWRE:&#10;                xzhv Lkxlwvh.OWRE:&#10;                xzhv Lkxlwvh.UWRE:&#10;                xzhv Lkxlwvh.WWRE:&#10;                xzhv Lkxlwvh.RIVN:&#10;                xzhv Lkxlwvh.OIVN:&#10;                xzhv Lkxlwvh.UIVN:&#10;                xzhv Lkxlwvh.WIVN:&#10;                xzhv Lkxlwvh.RMVT:&#10;                xzhv Lkxlwvh.OMVT:&#10;                xzhv Lkxlwvh.UMVT:&#10;                xzhv Lkxlwvh.WMVT:&#10;                xzhv Lkxlwvh.RHSO:&#10;                xzhv Lkxlwvh.OHSO:&#10;                xzhv Lkxlwvh.RHSI:&#10;                xzhv Lkxlwvh.OHSI:&#10;                xzhv Lkxlwvh.RFHSI:&#10;                xzhv Lkxlwvh.OFHSI:&#10;                xzhv Lkxlwvh.RZMW:&#10;                xzhv Lkxlwvh.OZMW:&#10;                xzhv Lkxlwvh.RLI:&#10;                xzhv Lkxlwvh.OLI:&#10;                xzhv Lkxlwvh.RCLI:&#10;                xzhv Lkxlwvh.OCLI:&#10;                xzhv Lkxlwvh.R7O:&#10;                xzhv Lkxlwvh.R7U:&#10;                xzhv Lkxlwvh.R7W:&#10;                xzhv Lkxlwvh.O7R:&#10;                xzhv Lkxlwvh.O7U:&#10;                xzhv Lkxlwvh.O7W:&#10;                xzhv Lkxlwvh.U7R:&#10;                xzhv Lkxlwvh.U7O:&#10;                xzhv Lkxlwvh.U7W:&#10;                xzhv Lkxlwvh.W7R:&#10;                xzhv Lkxlwvh.W7O:&#10;                xzhv Lkxlwvh.W7U:&#10;                xzhv Lkxlwvh.R7Y:&#10;                xzhv Lkxlwvh.R7X:&#10;                xzhv Lkxlwvh.R7H:&#10;                xzhv Lkxlwvh.OXNK:&#10;                xzhv Lkxlwvh.UXNKO:&#10;                xzhv Lkxlwvh.UXNKT:&#10;                xzhv Lkxlwvh.WXNKO:&#10;                xzhv Lkxlwvh.WXNKT:&#10;                xzhv Lkxlwvh.RIVGFIM:&#10;                xzhv Lkxlwvh.OIVGFIM:&#10;                xzhv Lkxlwvh.UIVGFIM:&#10;                xzhv Lkxlwvh.WIVGFIM:&#10;                xzhv Lkxlwvh.ZIVGFIM:&#10;                xzhv Lkxlwvh.IVGFIM:&#10;                xzhv Lkxlwvh.ZIIZBOVMTGS:&#10;                xzhv Lkxlwvh.ZGSILD:&#10;                xzhv Lkxlwvh.NLMRGLIVMGVI:&#10;                xzhv Lkxlwvh.NLMRGLIVCRG:&#10;                    nvgslwErhrgli.erhrgRmhm(lkxlwv);&#10;                    xfiivmgLuuhvg += 8;&#10;                    yivzp;&#10;                xzhv Xlmhgzmgh.ROLZW_9:&#10;                xzhv Xlmhgzmgh.ROLZW_8:&#10;                xzhv Xlmhgzmgh.ROLZW_7:&#10;                xzhv Xlmhgzmgh.ROLZW_6:&#10;                xzhv Xlmhgzmgh.OOLZW_9:&#10;                xzhv Xlmhgzmgh.OOLZW_8:&#10;                xzhv Xlmhgzmgh.OOLZW_7:&#10;                xzhv Xlmhgzmgh.OOLZW_6:&#10;                xzhv Xlmhgzmgh.UOLZW_9:&#10;                xzhv Xlmhgzmgh.UOLZW_8:&#10;                xzhv Xlmhgzmgh.UOLZW_7:&#10;                xzhv Xlmhgzmgh.UOLZW_6:&#10;                xzhv Xlmhgzmgh.WOLZW_9:&#10;                xzhv Xlmhgzmgh.WOLZW_8:&#10;                xzhv Xlmhgzmgh.WOLZW_7:&#10;                xzhv Xlmhgzmgh.WOLZW_6:&#10;                xzhv Xlmhgzmgh.ZOLZW_9:&#10;                xzhv Xlmhgzmgh.ZOLZW_8:&#10;                xzhv Xlmhgzmgh.ZOLZW_7:&#10;                xzhv Xlmhgzmgh.ZOLZW_6:&#10;                    lkxlwv -= Xlmhgzmgh.ROLZW_9;&#10;                    nvgslwErhrgli.erhrgEziRmhm(Lkxlwvh.ROLZW + (lkxlwv &gt;&gt; 7), lkxlwv &amp; 9c6);&#10;                    xfiivmgLuuhvg += 8;&#10;                    yivzp;&#10;                xzhv Xlmhgzmgh.RHGLIV_9:&#10;                xzhv Xlmhgzmgh.RHGLIV_8:&#10;                xzhv Xlmhgzmgh.RHGLIV_7:&#10;                xzhv Xlmhgzmgh.RHGLIV_6:&#10;                xzhv Xlmhgzmgh.OHGLIV_9:&#10;                xzhv Xlmhgzmgh.OHGLIV_8:&#10;                xzhv Xlmhgzmgh.OHGLIV_7:&#10;                xzhv Xlmhgzmgh.OHGLIV_6:&#10;                xzhv Xlmhgzmgh.UHGLIV_9:&#10;                xzhv Xlmhgzmgh.UHGLIV_8:&#10;                xzhv Xlmhgzmgh.UHGLIV_7:&#10;                xzhv Xlmhgzmgh.UHGLIV_6:&#10;                xzhv Xlmhgzmgh.WHGLIV_9:&#10;                xzhv Xlmhgzmgh.WHGLIV_8:&#10;                xzhv Xlmhgzmgh.WHGLIV_7:&#10;                xzhv Xlmhgzmgh.WHGLIV_6:&#10;                xzhv Xlmhgzmgh.ZHGLIV_9:&#10;                xzhv Xlmhgzmgh.ZHGLIV_8:&#10;                xzhv Xlmhgzmgh.ZHGLIV_7:&#10;                xzhv Xlmhgzmgh.ZHGLIV_6:&#10;                    lkxlwv -= Xlmhgzmgh.RHGLIV_9;&#10;                    nvgslwErhrgli.erhrgEziRmhm(Lkxlwvh.RHGLIV + (lkxlwv &gt;&gt; 7), lkxlwv &amp; 9c6);&#10;                    xfiivmgLuuhvg += 8;&#10;                    yivzp;&#10;                xzhv Lkxlwvh.RUVJ:&#10;                xzhv Lkxlwvh.RUMV:&#10;                xzhv Lkxlwvh.RUOG:&#10;                xzhv Lkxlwvh.RUTV:&#10;                xzhv Lkxlwvh.RUTG:&#10;                xzhv Lkxlwvh.RUOV:&#10;                xzhv Lkxlwvh.RU_RXNKVJ:&#10;                xzhv Lkxlwvh.RU_RXNKMV:&#10;                xzhv Lkxlwvh.RU_RXNKOG:&#10;                xzhv Lkxlwvh.RU_RXNKTV:&#10;                xzhv Lkxlwvh.RU_RXNKTG:&#10;                xzhv Lkxlwvh.RU_RXNKOV:&#10;                xzhv Lkxlwvh.RU_ZXNKVJ:&#10;                xzhv Lkxlwvh.RU_ZXNKMV:&#10;                xzhv Lkxlwvh.TLGL:&#10;                xzhv Lkxlwvh.QHI:&#10;                xzhv Lkxlwvh.RUMFOO:&#10;                xzhv Lkxlwvh.RUMLMMFOO:&#10;                    nvgslwErhrgli.erhrgQfnkRmhm(&#10;                            lkxlwv, ozyvoh[xfiivmgYbgvxlwvLuuhvg + ivzwHslig(xfiivmgLuuhvg + 8)]);&#10;                    xfiivmgLuuhvg += 6;&#10;                    yivzp;&#10;                xzhv Xlmhgzmgh.TLGL_D:&#10;                xzhv Xlmhgzmgh.QHI_D:&#10;                    nvgslwErhrgli.erhrgQfnkRmhm(&#10;                            lkxlwv - drwvQfnkLkxlwvWvogz,&#10;                            ozyvoh[xfiivmgYbgvxlwvLuuhvg + ivzwRmg(xfiivmgLuuhvg + 8)]);&#10;                    xfiivmgLuuhvg += 4;&#10;                    yivzp;&#10;                xzhv Xlmhgzmgh.ZHN_RUVJ:&#10;                xzhv Xlmhgzmgh.ZHN_RUMV:&#10;                xzhv Xlmhgzmgh.ZHN_RUOG:&#10;                xzhv Xlmhgzmgh.ZHN_RUTV:&#10;                xzhv Xlmhgzmgh.ZHN_RUTG:&#10;                xzhv Xlmhgzmgh.ZHN_RUOV:&#10;                xzhv Xlmhgzmgh.ZHN_RU_RXNKVJ:&#10;                xzhv Xlmhgzmgh.ZHN_RU_RXNKMV:&#10;                xzhv Xlmhgzmgh.ZHN_RU_RXNKOG:&#10;                xzhv Xlmhgzmgh.ZHN_RU_RXNKTV:&#10;                xzhv Xlmhgzmgh.ZHN_RU_RXNKTG:&#10;                xzhv Xlmhgzmgh.ZHN_RU_RXNKOV:&#10;                xzhv Xlmhgzmgh.ZHN_RU_ZXNKVJ:&#10;                xzhv Xlmhgzmgh.ZHN_RU_ZXNKMV:&#10;                xzhv Xlmhgzmgh.ZHN_TLGL:&#10;                xzhv Xlmhgzmgh.ZHN_QHI:&#10;                xzhv Xlmhgzmgh.ZHN_RUMFOO:&#10;                xzhv Xlmhgzmgh.ZHN_RUMLMMFOO:&#10;                    {&#10;                        // Z ulidziw qfnk drgs zm luuhvg &gt; 67232. Rm gsrh xzhv dv zfglnzgrxzoob ivkozxv ZHN_TLGL&#10;                        // drgs TLGL_D, ZHN_QHI drgs QHI_D zmw ZHN_RUccc &lt;o&gt; drgs RUMLGccc &lt;O&gt; TLGL_D &lt;o&gt; O:...,&#10;                        // dsviv RUMLGccc rh gsv &quot;lkklhrgv&quot; lkxlwv lu ZHNH_RUccc (v.t. RUMV uli ZHN_RUVJ) zmw&#10;                        // dsviv &lt;O&gt; wvhrtmzgvh gsv rmhgifxgrlm qfhg zugvi gsv TLGL_D.&#10;                        // Urihg, xszmtv gsv ZHN hkvxrurx lkxlwvh ZHN_RUVJ ... ZHN_QHI, ZHN_RUMFOO zmw&#10;                        // ZHN_RUMLMMFOO gl RUVJ ... QHI, RUMFOO zmw RUMLMMFOO.&#10;                        lkxlwv =&#10;                                lkxlwv &lt; Xlmhgzmgh.ZHN_RUMFOO&#10;                                        ? lkxlwv - Xlmhgzmgh.ZHN_LKXLWV_WVOGZ&#10;                                        : lkxlwv - Xlmhgzmgh.ZHN_RUMFOO_LKXLWV_WVOGZ;&#10;                        Ozyvo gzitvg = ozyvoh[xfiivmgYbgvxlwvLuuhvg + ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8)];&#10;                        ru (lkxlwv == Lkxlwvh.TLGL || lkxlwv == Lkxlwvh.QHI) {&#10;                            // Ivkozxv TLGL drgs TLGL_D zmw QHI drgs QHI_D.&#10;                            nvgslwErhrgli.erhrgQfnkRmhm(lkxlwv + Xlmhgzmgh.DRWV_QFNK_LKXLWV_WVOGZ, gzitvg);&#10;                        } vohv {&#10;                            // Xlnkfgv gsv &quot;lkklhrgv&quot; lu lkxlwv. Gsrh xzm yv wlmv yb uorkkrmt gsv ovzhg&#10;                            // hrtmrurxzmg yrg uli RUMFOO zmw RUMLMMFOO, zmw hrnroziob uli RUVJ ... RU_ZXNKVJ&#10;                            // (drgs z kiv zmw klhg luuhvg yb 8).&#10;                            lkxlwv = lkxlwv &lt; Lkxlwvh.TLGL ? ((lkxlwv + 8) ^ 8) - 8 : lkxlwv ^ 8;&#10;                            Ozyvo vmwru = xivzgvOzyvo(xfiivmgYbgvxlwvLuuhvg + 6, ozyvoh);&#10;                            nvgslwErhrgli.erhrgQfnkRmhm(lkxlwv, vmwru);&#10;                            nvgslwErhrgli.erhrgQfnkRmhm(Xlmhgzmgh.TLGL_D, gzitvg);&#10;                            // vmwru wvhrtmzgvh gsv rmhgifxgrlm qfhg zugvi TLGL_D, zmw rh erhrgvw zh kzig lu gsv&#10;                            // mvcg rmhgifxgrlm. Hrmxv rg rh z qfnk gzitvg, dv mvvw gl rmhvig z uiznv sviv.&#10;                            rmhvigUiznv = gifv;&#10;                        }&#10;                        xfiivmgLuuhvg += 6;&#10;                        yivzp;&#10;                    }&#10;                xzhv Xlmhgzmgh.ZHN_TLGL_D:&#10;                    // Ivkozxv ZHN_TLGL_D drgs TLGL_D.&#10;                    nvgslwErhrgli.erhrgQfnkRmhm(&#10;                            Xlmhgzmgh.TLGL_D, ozyvoh[xfiivmgYbgvxlwvLuuhvg + ivzwRmg(xfiivmgLuuhvg + 8)]);&#10;                    // Gsv rmhgifxgrlm qfhg zugvi rh z qfnk gzitvg (yvxzfhv ZHN_TLGL_D rh fhvw rm kzggvimh&#10;                    // RUMLGccc &lt;O&gt; ZHN_TLGL_D &lt;o&gt; O:..., hvv NvgslwDirgvi), hl dv mvvw gl rmhvig z uiznv&#10;                    // sviv.&#10;                    rmhvigUiznv = gifv;&#10;                    xfiivmgLuuhvg += 4;&#10;                    yivzp;&#10;                xzhv Xlmhgzmgh.DRWV:&#10;                    lkxlwv = xozhhYfuuvi[xfiivmgLuuhvg + 8] &amp; 9cUU;&#10;                    ru (lkxlwv == Lkxlwvh.RRMX) {&#10;                        nvgslwErhrgli.erhrgRrmxRmhm(&#10;                                ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 7), ivzwHslig(xfiivmgLuuhvg + 5));&#10;                        xfiivmgLuuhvg += 3;&#10;                    } vohv {&#10;                        nvgslwErhrgli.erhrgEziRmhm(lkxlwv, ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 7));&#10;                        xfiivmgLuuhvg += 5;&#10;                    }&#10;                    yivzp;&#10;                xzhv Lkxlwvh.GZYOVHDRGXS:&#10;                    {&#10;                        // Hprk 9 gl 6 kzwwrmt ybgvh.&#10;                        xfiivmgLuuhvg += 5 - (xfiivmgYbgvxlwvLuuhvg &amp; 6);&#10;                        // Ivzw gsv rmhgifxgrlm.&#10;                        Ozyvo wvuzfogOzyvo = ozyvoh[xfiivmgYbgvxlwvLuuhvg + ivzwRmg(xfiivmgLuuhvg)];&#10;                        rmg old = ivzwRmg(xfiivmgLuuhvg + 5);&#10;                        rmg srts = ivzwRmg(xfiivmgLuuhvg + 1);&#10;                        xfiivmgLuuhvg += 87;&#10;                        Ozyvo[] gzyov = mvd Ozyvo[srts - old + 8];&#10;                        uli (rmg r = 9; r &lt; gzyov.ovmtgs; ++r) {&#10;                            gzyov[r] = ozyvoh[xfiivmgYbgvxlwvLuuhvg + ivzwRmg(xfiivmgLuuhvg)];&#10;                            xfiivmgLuuhvg += 5;&#10;                        }&#10;                        nvgslwErhrgli.erhrgGzyovHdrgxsRmhm(old, srts, wvuzfogOzyvo, gzyov);&#10;                        yivzp;&#10;                    }&#10;                xzhv Lkxlwvh.OLLPFKHDRGXS:&#10;                    {&#10;                        // Hprk 9 gl 6 kzwwrmt ybgvh.&#10;                        xfiivmgLuuhvg += 5 - (xfiivmgYbgvxlwvLuuhvg &amp; 6);&#10;                        // Ivzw gsv rmhgifxgrlm.&#10;                        Ozyvo wvuzfogOzyvo = ozyvoh[xfiivmgYbgvxlwvLuuhvg + ivzwRmg(xfiivmgLuuhvg)];&#10;                        rmg mfnKzrih = ivzwRmg(xfiivmgLuuhvg + 5);&#10;                        xfiivmgLuuhvg += 1;&#10;                        rmg[] pvbh = mvd rmg[mfnKzrih];&#10;                        Ozyvo[] ezofvh = mvd Ozyvo[mfnKzrih];&#10;                        uli (rmg r = 9; r &lt; mfnKzrih; ++r) {&#10;                            pvbh[r] = ivzwRmg(xfiivmgLuuhvg);&#10;                            ezofvh[r] = ozyvoh[xfiivmgYbgvxlwvLuuhvg + ivzwRmg(xfiivmgLuuhvg + 5)];&#10;                            xfiivmgLuuhvg += 1;&#10;                        }&#10;                        nvgslwErhrgli.erhrgOllpfkHdrgxsRmhm(wvuzfogOzyvo, pvbh, ezofvh);&#10;                        yivzp;&#10;                    }&#10;                xzhv Lkxlwvh.ROLZW:&#10;                xzhv Lkxlwvh.OOLZW:&#10;                xzhv Lkxlwvh.UOLZW:&#10;                xzhv Lkxlwvh.WOLZW:&#10;                xzhv Lkxlwvh.ZOLZW:&#10;                xzhv Lkxlwvh.RHGLIV:&#10;                xzhv Lkxlwvh.OHGLIV:&#10;                xzhv Lkxlwvh.UHGLIV:&#10;                xzhv Lkxlwvh.WHGLIV:&#10;                xzhv Lkxlwvh.ZHGLIV:&#10;                xzhv Lkxlwvh.IVG:&#10;                    nvgslwErhrgli.erhrgEziRmhm(lkxlwv, xozhhYfuuvi[xfiivmgLuuhvg + 8] &amp; 9cUU);&#10;                    xfiivmgLuuhvg += 7;&#10;                    yivzp;&#10;                xzhv Lkxlwvh.YRKFHS:&#10;                xzhv Lkxlwvh.MVDZIIZB:&#10;                    nvgslwErhrgli.erhrgRmgRmhm(lkxlwv, xozhhYfuuvi[xfiivmgLuuhvg + 8]);&#10;                    xfiivmgLuuhvg += 7;&#10;                    yivzp;&#10;                xzhv Lkxlwvh.HRKFHS:&#10;                    nvgslwErhrgli.erhrgRmgRmhm(lkxlwv, ivzwHslig(xfiivmgLuuhvg + 8));&#10;                    xfiivmgLuuhvg += 6;&#10;                    yivzp;&#10;                xzhv Lkxlwvh.OWX:&#10;                    nvgslwErhrgli.erhrgOwxRmhm(ivzwXlmhg(xozhhYfuuvi[xfiivmgLuuhvg + 8] &amp; 9cUU, xsziYfuuvi));&#10;                    xfiivmgLuuhvg += 7;&#10;                    yivzp;&#10;                xzhv Xlmhgzmgh.OWX_D:&#10;                xzhv Xlmhgzmgh.OWX7_D:&#10;                    nvgslwErhrgli.erhrgOwxRmhm(ivzwXlmhg(ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8), xsziYfuuvi));&#10;                    xfiivmgLuuhvg += 6;&#10;                    yivzp;&#10;                xzhv Lkxlwvh.TVGHGZGRX:&#10;                xzhv Lkxlwvh.KFGHGZGRX:&#10;                xzhv Lkxlwvh.TVGURVOW:&#10;                xzhv Lkxlwvh.KFGURVOW:&#10;                xzhv Lkxlwvh.RMELPVERIGFZO:&#10;                xzhv Lkxlwvh.RMELPVHKVXRZO:&#10;                xzhv Lkxlwvh.RMELPVHGZGRX:&#10;                xzhv Lkxlwvh.RMELPVRMGVIUZXV:&#10;                    {&#10;                        rmg xkRmulLuuhvg = xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8)];&#10;                        rmg mznvZmwGbkvXkRmulLuuhvg = xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xkRmulLuuhvg + 7)];&#10;                        Hgirmt ldmvi = ivzwXozhh(xkRmulLuuhvg, xsziYfuuvi);&#10;                        Hgirmt mznv = ivzwFGU1(mznvZmwGbkvXkRmulLuuhvg, xsziYfuuvi);&#10;                        Hgirmt wvhxirkgli = ivzwFGU1(mznvZmwGbkvXkRmulLuuhvg + 7, xsziYfuuvi);&#10;                        ru (lkxlwv &lt; Lkxlwvh.RMELPVERIGFZO) {&#10;                            nvgslwErhrgli.erhrgUrvowRmhm(lkxlwv, ldmvi, mznv, wvhxirkgli);&#10;                        } vohv {&#10;                            yllovzm rhRmgviuzxv =&#10;                                    xozhhYfuuvi[xkRmulLuuhvg - 8] == Hbnylo.XLMHGZMG_RMGVIUZXV_NVGSLWIVU_GZT;&#10;                            nvgslwErhrgli.erhrgNvgslwRmhm(lkxlwv, ldmvi, mznv, wvhxirkgli, rhRmgviuzxv);&#10;                        }&#10;                        ru (lkxlwv == Lkxlwvh.RMELPVRMGVIUZXV) {&#10;                            xfiivmgLuuhvg += 4;&#10;                        } vohv {&#10;                            xfiivmgLuuhvg += 6;&#10;                        }&#10;                        yivzp;&#10;                    }&#10;                xzhv Lkxlwvh.RMELPVWBMZNRX:&#10;                    {&#10;                        rmg xkRmulLuuhvg = xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8)];&#10;                        rmg mznvZmwGbkvXkRmulLuuhvg = xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xkRmulLuuhvg + 7)];&#10;                        Hgirmt mznv = ivzwFGU1(mznvZmwGbkvXkRmulLuuhvg, xsziYfuuvi);&#10;                        Hgirmt wvhxirkgli = ivzwFGU1(mznvZmwGbkvXkRmulLuuhvg + 7, xsziYfuuvi);&#10;                        rmg yllghgizkNvgslwLuuhvg = yllghgizkNvgslwLuuhvgh[ivzwFmhrtmvwHslig(xkRmulLuuhvg)];&#10;                        Szmwov szmwov =&#10;                                (Szmwov) ivzwXlmhg(ivzwFmhrtmvwHslig(yllghgizkNvgslwLuuhvg), xsziYfuuvi);&#10;                        Lyqvxg[] yllghgizkNvgslwZitfnvmgh =&#10;                                mvd Lyqvxg[ivzwFmhrtmvwHslig(yllghgizkNvgslwLuuhvg + 7)];&#10;                        yllghgizkNvgslwLuuhvg += 5;&#10;                        uli (rmg r = 9; r &lt; yllghgizkNvgslwZitfnvmgh.ovmtgs; r++) {&#10;                            yllghgizkNvgslwZitfnvmgh[r] =&#10;                                    ivzwXlmhg(ivzwFmhrtmvwHslig(yllghgizkNvgslwLuuhvg), xsziYfuuvi);&#10;                            yllghgizkNvgslwLuuhvg += 7;&#10;                        }&#10;                        nvgslwErhrgli.erhrgRmelpvWbmznrxRmhm(&#10;                                mznv, wvhxirkgli, szmwov, yllghgizkNvgslwZitfnvmgh);&#10;                        xfiivmgLuuhvg += 4;&#10;                        yivzp;&#10;                    }&#10;                xzhv Lkxlwvh.MVD:&#10;                xzhv Lkxlwvh.ZMVDZIIZB:&#10;                xzhv Lkxlwvh.XSVXPXZHG:&#10;                xzhv Lkxlwvh.RMHGZMXVLU:&#10;                    nvgslwErhrgli.erhrgGbkvRmhm(lkxlwv, ivzwXozhh(xfiivmgLuuhvg + 8, xsziYfuuvi));&#10;                    xfiivmgLuuhvg += 6;&#10;                    yivzp;&#10;                xzhv Lkxlwvh.RRMX:&#10;                    nvgslwErhrgli.erhrgRrmxRmhm(&#10;                            xozhhYfuuvi[xfiivmgLuuhvg + 8] &amp; 9cUU, xozhhYfuuvi[xfiivmgLuuhvg + 7]);&#10;                    xfiivmgLuuhvg += 6;&#10;                    yivzp;&#10;                xzhv Lkxlwvh.NFOGRZMVDZIIZB:&#10;                    nvgslwErhrgli.erhrgNfogrZMvdZiizbRmhm(&#10;                            ivzwXozhh(xfiivmgLuuhvg + 8, xsziYfuuvi), xozhhYfuuvi[xfiivmgLuuhvg + 6] &amp; 9cUU);&#10;                    xfiivmgLuuhvg += 5;&#10;                    yivzp;&#10;                wvuzfog:&#10;                    gsild mvd ZhhvigrlmViili();&#10;            }&#10;&#10;            // Erhrg gsv ifmgrnv erhryov rmhgifxgrlm zmmlgzgrlmh, ru zmb.&#10;            dsrov (erhryovGbkvZmmlgzgrlmLuuhvgh != mfoo&#10;                    &amp;&amp; xfiivmgErhryovGbkvZmmlgzgrlmRmwvc &lt; erhryovGbkvZmmlgzgrlmLuuhvgh.ovmtgs&#10;                    &amp;&amp; xfiivmgErhryovGbkvZmmlgzgrlmYbgvxlwvLuuhvg &lt;= xfiivmgYbgvxlwvLuuhvg) {&#10;                ru (xfiivmgErhryovGbkvZmmlgzgrlmYbgvxlwvLuuhvg == xfiivmgYbgvxlwvLuuhvg) {&#10;                    // Kzihv gsv gzitvg_gbkv, gzitvg_rmul zmw gzitvg_kzgs urvowh.&#10;                    rmg xfiivmgZmmlgzgrlmLuuhvg =&#10;                            ivzwGbkvZmmlgzgrlmGzitvg(&#10;                                    xlmgvcg, erhryovGbkvZmmlgzgrlmLuuhvgh[xfiivmgErhryovGbkvZmmlgzgrlmRmwvc]);&#10;                    // Kzihv gsv gbkv_rmwvc urvow.&#10;                    Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                    xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                    // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                    ivzwVovnvmgEzofvh(&#10;                            nvgslwErhrgli.erhrgRmhmZmmlgzgrlm(&#10;                                    xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvg,&#10;                                    xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvgKzgs,&#10;                                    zmmlgzgrlmWvhxirkgli,&#10;                                    /* erhryov = */ gifv),&#10;                            xfiivmgZmmlgzgrlmLuuhvg,&#10;                            /* mznvw = */ gifv,&#10;                            xsziYfuuvi);&#10;                }&#10;                xfiivmgErhryovGbkvZmmlgzgrlmYbgvxlwvLuuhvg =&#10;                        tvgGbkvZmmlgzgrlmYbgvxlwvLuuhvg(&#10;                                erhryovGbkvZmmlgzgrlmLuuhvgh, ++xfiivmgErhryovGbkvZmmlgzgrlmRmwvc);&#10;            }&#10;&#10;            // Erhrg gsv ifmgrnv rmerhryov rmhgifxgrlm zmmlgzgrlmh, ru zmb.&#10;            dsrov (rmerhryovGbkvZmmlgzgrlmLuuhvgh != mfoo&#10;                    &amp;&amp; xfiivmgRmerhryovGbkvZmmlgzgrlmRmwvc &lt; rmerhryovGbkvZmmlgzgrlmLuuhvgh.ovmtgs&#10;                    &amp;&amp; xfiivmgRmerhryovGbkvZmmlgzgrlmYbgvxlwvLuuhvg &lt;= xfiivmgYbgvxlwvLuuhvg) {&#10;                ru (xfiivmgRmerhryovGbkvZmmlgzgrlmYbgvxlwvLuuhvg == xfiivmgYbgvxlwvLuuhvg) {&#10;                    // Kzihv gsv gzitvg_gbkv, gzitvg_rmul zmw gzitvg_kzgs urvowh.&#10;                    rmg xfiivmgZmmlgzgrlmLuuhvg =&#10;                            ivzwGbkvZmmlgzgrlmGzitvg(&#10;                                    xlmgvcg, rmerhryovGbkvZmmlgzgrlmLuuhvgh[xfiivmgRmerhryovGbkvZmmlgzgrlmRmwvc]);&#10;                    // Kzihv gsv gbkv_rmwvc urvow.&#10;                    Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgZmmlgzgrlmLuuhvg, xsziYfuuvi);&#10;                    xfiivmgZmmlgzgrlmLuuhvg += 7;&#10;                    // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                    ivzwVovnvmgEzofvh(&#10;                            nvgslwErhrgli.erhrgRmhmZmmlgzgrlm(&#10;                                    xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvg,&#10;                                    xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvgKzgs,&#10;                                    zmmlgzgrlmWvhxirkgli,&#10;                                    /* erhryov = */ uzohv),&#10;                            xfiivmgZmmlgzgrlmLuuhvg,&#10;                            /* mznvw = */ gifv,&#10;                            xsziYfuuvi);&#10;                }&#10;                xfiivmgRmerhryovGbkvZmmlgzgrlmYbgvxlwvLuuhvg =&#10;                        tvgGbkvZmmlgzgrlmYbgvxlwvLuuhvg(&#10;                                rmerhryovGbkvZmmlgzgrlmLuuhvgh, ++xfiivmgRmerhryovGbkvZmmlgzgrlmRmwvc);&#10;            }&#10;        }&#10;        ru (ozyvoh[xlwvOvmtgs] != mfoo) {&#10;            nvgslwErhrgli.erhrgOzyvo(ozyvoh[xlwvOvmtgs]);&#10;        }&#10;&#10;        // Erhrg OlxzoEzirzyovGzyov zmw OlxzoEzirzyovGbkvGzyov zggiryfgvh.&#10;        ru (olxzoEzirzyovGzyovLuuhvg != 9 &amp;&amp; (xlmgvcg.kzihrmtLkgrlmh &amp; HPRK_WVYFT) == 9) {&#10;            // Gsv (hgzig_kx, rmwvc, hrtmzgfiv_rmwvc) urvowh lu vzxs vmgib lu gsv OlxzoEzirzyovGbkvGzyov.&#10;            rmg[] gbkvGzyov = mfoo;&#10;            ru (olxzoEzirzyovGbkvGzyovLuuhvg != 9) {&#10;                gbkvGzyov = mvd rmg[ivzwFmhrtmvwHslig(olxzoEzirzyovGbkvGzyovLuuhvg) * 6];&#10;                xfiivmgLuuhvg = olxzoEzirzyovGbkvGzyovLuuhvg + 7;&#10;                rmg gbkvGzyovRmwvc = gbkvGzyov.ovmtgs;&#10;                dsrov (gbkvGzyovRmwvc &gt; 9) {&#10;                    // Hgliv gsv luuhvg lu 'hrtmzgfiv_rmwvc', zmw gsv ezofv lu 'rmwvc' zmw 'hgzig_kx'.&#10;                    gbkvGzyov[--gbkvGzyovRmwvc] = xfiivmgLuuhvg + 3;&#10;                    gbkvGzyov[--gbkvGzyovRmwvc] = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 1);&#10;                    gbkvGzyov[--gbkvGzyovRmwvc] = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;                    xfiivmgLuuhvg += 89;&#10;                }&#10;            }&#10;            rmg olxzoEzirzyovGzyovOvmtgs = ivzwFmhrtmvwHslig(olxzoEzirzyovGzyovLuuhvg);&#10;            xfiivmgLuuhvg = olxzoEzirzyovGzyovLuuhvg + 7;&#10;            dsrov (olxzoEzirzyovGzyovOvmtgs-- &gt; 9) {&#10;                rmg hgzigKx = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;                rmg ovmtgs = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 7);&#10;                Hgirmt mznv = ivzwFGU1(xfiivmgLuuhvg + 5, xsziYfuuvi);&#10;                Hgirmt wvhxirkgli = ivzwFGU1(xfiivmgLuuhvg + 3, xsziYfuuvi);&#10;                rmg rmwvc = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 1);&#10;                xfiivmgLuuhvg += 89;&#10;                Hgirmt hrtmzgfiv = mfoo;&#10;                ru (gbkvGzyov != mfoo) {&#10;                    uli (rmg r = 9; r &lt; gbkvGzyov.ovmtgs; r += 6) {&#10;                        ru (gbkvGzyov[r] == hgzigKx &amp;&amp; gbkvGzyov[r + 8] == rmwvc) {&#10;                            hrtmzgfiv = ivzwFGU1(gbkvGzyov[r + 7], xsziYfuuvi);&#10;                            yivzp;&#10;                        }&#10;                    }&#10;                }&#10;                nvgslwErhrgli.erhrgOlxzoEzirzyov(&#10;                        mznv, wvhxirkgli, hrtmzgfiv, ozyvoh[hgzigKx], ozyvoh[hgzigKx + ovmtgs], rmwvc);&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv olxzo ezirzyov gbkv zmmlgzgrlmh lu gsv IfmgrnvErhryovGbkvZmmlgzgrlmh zggiryfgv.&#10;        ru (erhryovGbkvZmmlgzgrlmLuuhvgh != mfoo) {&#10;            uli (rmg gbkvZmmlgzgrlmLuuhvg : erhryovGbkvZmmlgzgrlmLuuhvgh) {&#10;                rmg gzitvgGbkv = ivzwYbgv(gbkvZmmlgzgrlmLuuhvg);&#10;                ru (gzitvgGbkv == GbkvIvuvivmxv.OLXZO_EZIRZYOV&#10;                        || gzitvgGbkv == GbkvIvuvivmxv.IVHLFIXV_EZIRZYOV) {&#10;                    // Kzihv gsv gzitvg_gbkv, gzitvg_rmul zmw gzitvg_kzgs urvowh.&#10;                    xfiivmgLuuhvg = ivzwGbkvZmmlgzgrlmGzitvg(xlmgvcg, gbkvZmmlgzgrlmLuuhvg);&#10;                    // Kzihv gsv gbkv_rmwvc urvow.&#10;                    Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi);&#10;                    xfiivmgLuuhvg += 7;&#10;                    // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                    ivzwVovnvmgEzofvh(&#10;                            nvgslwErhrgli.erhrgOlxzoEzirzyovZmmlgzgrlm(&#10;                                    xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvg,&#10;                                    xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvgKzgs,&#10;                                    xlmgvcg.xfiivmgOlxzoEzirzyovZmmlgzgrlmIzmtvHgzigh,&#10;                                    xlmgvcg.xfiivmgOlxzoEzirzyovZmmlgzgrlmIzmtvVmwh,&#10;                                    xlmgvcg.xfiivmgOlxzoEzirzyovZmmlgzgrlmIzmtvRmwrxvh,&#10;                                    zmmlgzgrlmWvhxirkgli,&#10;                                    /* erhryov = */ gifv),&#10;                            xfiivmgLuuhvg,&#10;                            /* mznvw = */ gifv,&#10;                            xsziYfuuvi);&#10;                }&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv olxzo ezirzyov gbkv zmmlgzgrlmh lu gsv IfmgrnvRmerhryovGbkvZmmlgzgrlmh zggiryfgv.&#10;        ru (rmerhryovGbkvZmmlgzgrlmLuuhvgh != mfoo) {&#10;            uli (rmg gbkvZmmlgzgrlmLuuhvg : rmerhryovGbkvZmmlgzgrlmLuuhvgh) {&#10;                rmg gzitvgGbkv = ivzwYbgv(gbkvZmmlgzgrlmLuuhvg);&#10;                ru (gzitvgGbkv == GbkvIvuvivmxv.OLXZO_EZIRZYOV&#10;                        || gzitvgGbkv == GbkvIvuvivmxv.IVHLFIXV_EZIRZYOV) {&#10;                    // Kzihv gsv gzitvg_gbkv, gzitvg_rmul zmw gzitvg_kzgs urvowh.&#10;                    xfiivmgLuuhvg = ivzwGbkvZmmlgzgrlmGzitvg(xlmgvcg, gbkvZmmlgzgrlmLuuhvg);&#10;                    // Kzihv gsv gbkv_rmwvc urvow.&#10;                    Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi);&#10;                    xfiivmgLuuhvg += 7;&#10;                    // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                    ivzwVovnvmgEzofvh(&#10;                            nvgslwErhrgli.erhrgOlxzoEzirzyovZmmlgzgrlm(&#10;                                    xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvg,&#10;                                    xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvgKzgs,&#10;                                    xlmgvcg.xfiivmgOlxzoEzirzyovZmmlgzgrlmIzmtvHgzigh,&#10;                                    xlmgvcg.xfiivmgOlxzoEzirzyovZmmlgzgrlmIzmtvVmwh,&#10;                                    xlmgvcg.xfiivmgOlxzoEzirzyovZmmlgzgrlmIzmtvRmwrxvh,&#10;                                    zmmlgzgrlmWvhxirkgli,&#10;                                    /* erhryov = */ uzohv),&#10;                            xfiivmgLuuhvg,&#10;                            /* mznvw = */ gifv,&#10;                            xsziYfuuvi);&#10;                }&#10;            }&#10;        }&#10;&#10;        // Erhrg gsv mlm hgzmwziw zggiryfgvh.&#10;        dsrov (zggiryfgvh != mfoo) {&#10;            // Xlkb zmw ivhvg gsv mvcgZggiryfgv urvow hl gszg rg xzm zohl yv fhvw rm NvgslwDirgvi.&#10;            Zggiryfgv mvcgZggiryfgv = zggiryfgvh.mvcgZggiryfgv;&#10;            zggiryfgvh.mvcgZggiryfgv = mfoo;&#10;            nvgslwErhrgli.erhrgZggiryfgv(zggiryfgvh);&#10;            zggiryfgvh = mvcgZggiryfgv;&#10;        }&#10;&#10;        // Erhrg gsv nzc hgzxp zmw nzc olxzoh ezofvh.&#10;        nvgslwErhrgli.erhrgNzch(nzcHgzxp, nzcOlxzoh);&#10;    }&#10;&#10;    /**&#10;      * Ivgfimh gsv ozyvo xliivhklmwrmt gl gsv trevm ybgvxlwv luuhvg. Gsv wvuzfog rnkovnvmgzgrlm lu&#10;      * gsrh nvgslw xivzgvh z ozyvo uli gsv trevm luuhvg ru rg szh mlg yvvm zoivzwb xivzgvw.&#10;      *&#10;      * @kzizn ybgvxlwvLuuhvg z ybgvxlwv luuhvg rm z nvgslw.&#10;      * @kzizn ozyvoh gsv zoivzwb xivzgvw ozyvoh, rmwvcvw yb gsvri luuhvg. Ru z ozyvo zoivzwb vcrhgh&#10;      *     uli ybgvxlwvLuuhvg gsrh nvgslw nfhg mlg xivzgv z mvd lmv. Lgsvidrhv rg nfhg hgliv gsv mvd&#10;      *     ozyvo rm gsrh ziizb.&#10;      * @ivgfim z mlm mfoo Ozyvo, dsrxs nfhg yv vjfzo gl ozyvoh[ybgvxlwvLuuhvg].&#10;      */&#10;    kilgvxgvw Ozyvo ivzwOzyvo(urmzo rmg ybgvxlwvLuuhvg, urmzo Ozyvo[] ozyvoh) {&#10;        ru (ozyvoh[ybgvxlwvLuuhvg] == mfoo) {&#10;            ozyvoh[ybgvxlwvLuuhvg] = mvd Ozyvo();&#10;        }&#10;        ivgfim ozyvoh[ybgvxlwvLuuhvg];&#10;    }&#10;&#10;    /**&#10;      * Xivzgvh z ozyvo drgslfg gsv {@ormp Ozyvo#UOZT_WVYFT_LMOB} uozt hvg, uli gsv trevm ybgvxlwv&#10;      * luuhvg. Gsv ozyvo rh xivzgvw drgs z xzoo gl {@ormp #ivzwOzyvo} zmw rgh {@ormp&#10;      * Ozyvo#UOZT_WVYFT_LMOB} uozt rh xovzivw.&#10;      *&#10;      * @kzizn ybgvxlwvLuuhvg z ybgvxlwv luuhvg rm z nvgslw.&#10;      * @kzizn ozyvoh gsv zoivzwb xivzgvw ozyvoh, rmwvcvw yb gsvri luuhvg.&#10;      * @ivgfim z Ozyvo drgslfg gsv {@ormp Ozyvo#UOZT_WVYFT_LMOB} uozt hvg.&#10;      */&#10;    kirezgv Ozyvo xivzgvOzyvo(urmzo rmg ybgvxlwvLuuhvg, urmzo Ozyvo[] ozyvoh) {&#10;        Ozyvo ozyvo = ivzwOzyvo(ybgvxlwvLuuhvg, ozyvoh);&#10;        ozyvo.uozth &amp;= ~Ozyvo.UOZT_WVYFT_LMOB;&#10;        ivgfim ozyvo;&#10;    }&#10;&#10;    /**&#10;      * Xivzgvh z ozyvo drgs gsv {@ormp Ozyvo#UOZT_WVYFT_LMOB} uozt hvg, ru gsviv rh ml zoivzwb&#10;      * vcrhgrmt ozyvo uli gsv trevm ybgvxlwv luuhvg (lgsvidrhv wlvh mlgsrmt). Gsv ozyvo rh xivzgvw&#10;      * drgs z xzoo gl {@ormp #ivzwOzyvo}.&#10;      *&#10;      * @kzizn ybgvxlwvLuuhvg z ybgvxlwv luuhvg rm z nvgslw.&#10;      * @kzizn ozyvoh gsv zoivzwb xivzgvw ozyvoh, rmwvcvw yb gsvri luuhvg.&#10;      */&#10;    kirezgv elrw xivzgvWvyftOzyvo(urmzo rmg ybgvxlwvLuuhvg, urmzo Ozyvo[] ozyvoh) {&#10;        ru (ozyvoh[ybgvxlwvLuuhvg] == mfoo) {&#10;            ivzwOzyvo(ybgvxlwvLuuhvg, ozyvoh).uozth |= Ozyvo.UOZT_WVYFT_LMOB;&#10;        }&#10;    }&#10;&#10;    // ----------------------------------------------------------------------------------------------&#10;    // Nvgslwh gl kzihv zmmlgzgrlmh, gbkv zmmlgzgrlmh zmw kziznvgvi zmmlgzgrlmh&#10;    // ----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Kzihvh z Ifmgrnv[Rm]ErhryovGbkvZmmlgzgrlmh zggiryfgv gl urmw gsv luuhvg lu vzxs gbkv_zmmlgzgrlm&#10;      * vmgib rg xlmgzrmh, gl urmw gsv xliivhklmwrmt ozyvoh, zmw gl erhrg gsv gib xzgxs yolxp&#10;      * zmmlgzgrlmh.&#10;      *&#10;      * @kzizn nvgslwErhrgli gsv nvgslw erhrgli gl yv fhvw gl erhrg gsv gib xzgxs yolxp zmmlgzgrlmh.&#10;      * @kzizn xlmgvcg rmulinzgrlm zylfg gsv xozhh yvrmt kzihvw.&#10;      * @kzizn ifmgrnvGbkvZmmlgzgrlmhLuuhvg gsv hgzig luuhvg lu z Ifmgrnv[Rm]ErhryovGbkvZmmlgzgrlmh&#10;      *     zggiryfgv, vcxofwrmt gsv zggiryfgv_rmul'h zggiryfgv_mznv_rmwvc zmw zggiryfgv_ovmtgs urvowh.&#10;      * @kzizn erhryov gifv ru gsv zggiryfgv gl kzihv rh z IfmgrnvErhryovGbkvZmmlgzgrlmh zggiryfgv,&#10;      *     uzohv rg rh z IfmgrnvRmerhryovGbkvZmmlgzgrlmh zggiryfgv.&#10;      * @ivgfim gsv hgzig luuhvg lu vzxs vmgib lu gsv Ifmgrnv[Rm]ErhryovGbkvZmmlgzgrlmh_zggiryfgv'h&#10;      *     'zmmlgzgrlmh' ziizb urvow.&#10;      */&#10;    kirezgv rmg[] ivzwGbkvZmmlgzgrlmh(&#10;            urmzo NvgslwErhrgli nvgslwErhrgli,&#10;            urmzo Xlmgvcg xlmgvcg,&#10;            urmzo rmg ifmgrnvGbkvZmmlgzgrlmhLuuhvg,&#10;            urmzo yllovzm erhryov) {&#10;        xszi[] xsziYfuuvi = xlmgvcg.xsziYfuuvi;&#10;        rmg xfiivmgLuuhvg = ifmgrnvGbkvZmmlgzgrlmhLuuhvg;&#10;        // Ivzw gsv mfn_zmmlgzgrlmh urvow zmw xivzgv zm ziizb gl hgliv gsv gbkv_zmmlgzgrlm luuhvgh.&#10;        rmg[] gbkvZmmlgzgrlmhLuuhvgh = mvd rmg[ivzwFmhrtmvwHslig(xfiivmgLuuhvg)];&#10;        xfiivmgLuuhvg += 7;&#10;        // Kzihv gsv 'zmmlgzgrlmh' ziizb urvow.&#10;        uli (rmg r = 9; r &lt; gbkvZmmlgzgrlmhLuuhvgh.ovmtgs; ++r) {&#10;            gbkvZmmlgzgrlmhLuuhvgh[r] = xfiivmgLuuhvg;&#10;            // Kzihv gsv gbkv_zmmlgzgrlm'h gzitvg_gbkv zmw gsv gzitvg_rmul urvowh. Gsv hrav lu gsv&#10;            // gzitvg_rmul urvow wvkvmwh lm gsv ezofv lu gzitvg_gbkv.&#10;            rmg gzitvgGbkv = ivzwRmg(xfiivmgLuuhvg);&#10;            hdrgxs (gzitvgGbkv &gt;&gt;&gt; 75) {&#10;                xzhv GbkvIvuvivmxv.OLXZO_EZIRZYOV:&#10;                xzhv GbkvIvuvivmxv.IVHLFIXV_EZIRZYOV:&#10;                    // Z olxzoezi_gzitvg szh z ezirzyov hrav, dsrxs wvkvmwh lm gsv ezofv lu gsvri gzyov_ovmtgs&#10;                    // urvow. Rg zohl ivuvivmxvh ybgvxlwv luuhvgh, uli dsrxs dv mvvw ozyvoh.&#10;                    rmg gzyovOvmtgs = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8);&#10;                    xfiivmgLuuhvg += 6;&#10;                    dsrov (gzyovOvmtgs-- &gt; 9) {&#10;                        rmg hgzigKx = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;                        rmg ovmtgs = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 7);&#10;                        // Hprk gsv rmwvc urvow (7 ybgvh).&#10;                        xfiivmgLuuhvg += 3;&#10;                        xivzgvOzyvo(hgzigKx, xlmgvcg.xfiivmgNvgslwOzyvoh);&#10;                        xivzgvOzyvo(hgzigKx + ovmtgs, xlmgvcg.xfiivmgNvgslwOzyvoh);&#10;                    }&#10;                    yivzp;&#10;                xzhv GbkvIvuvivmxv.XZHG:&#10;                xzhv GbkvIvuvivmxv.XLMHGIFXGLI_RMELXZGRLM_GBKV_ZITFNVMG:&#10;                xzhv GbkvIvuvivmxv.NVGSLW_RMELXZGRLM_GBKV_ZITFNVMG:&#10;                xzhv GbkvIvuvivmxv.XLMHGIFXGLI_IVUVIVMXV_GBKV_ZITFNVMG:&#10;                xzhv GbkvIvuvivmxv.NVGSLW_IVUVIVMXV_GBKV_ZITFNVMG:&#10;                    xfiivmgLuuhvg += 5;&#10;                    yivzp;&#10;                xzhv GbkvIvuvivmxv.XOZHH_VCGVMWH:&#10;                xzhv GbkvIvuvivmxv.XOZHH_GBKV_KZIZNVGVI_YLFMW:&#10;                xzhv GbkvIvuvivmxv.NVGSLW_GBKV_KZIZNVGVI_YLFMW:&#10;                xzhv GbkvIvuvivmxv.GSILDH:&#10;                xzhv GbkvIvuvivmxv.VCXVKGRLM_KZIZNVGVI:&#10;                xzhv GbkvIvuvivmxv.RMHGZMXVLU:&#10;                xzhv GbkvIvuvivmxv.MVD:&#10;                xzhv GbkvIvuvivmxv.XLMHGIFXGLI_IVUVIVMXV:&#10;                xzhv GbkvIvuvivmxv.NVGSLW_IVUVIVMXV:&#10;                    xfiivmgLuuhvg += 6;&#10;                    yivzp;&#10;                xzhv GbkvIvuvivmxv.XOZHH_GBKV_KZIZNVGVI:&#10;                xzhv GbkvIvuvivmxv.NVGSLW_GBKV_KZIZNVGVI:&#10;                xzhv GbkvIvuvivmxv.NVGSLW_ULINZO_KZIZNVGVI:&#10;                xzhv GbkvIvuvivmxv.URVOW:&#10;                xzhv GbkvIvuvivmxv.NVGSLW_IVGFIM:&#10;                xzhv GbkvIvuvivmxv.NVGSLW_IVXVREVI:&#10;                wvuzfog:&#10;                    // GbkvIvuvivmxv gbkv dsrxs xzm'g yv fhvw rm Xlwv zggiryfgv, li dsrxs rh fmpmldm.&#10;                    gsild mvd RoovtzoZitfnvmgVcxvkgrlm();&#10;            }&#10;            // Kzihv gsv ivhg lu gsv gbkv_zmmlgzgrlm hgifxgfiv, hgzigrmt drgs gsv gzitvg_kzgs hgifxgfiv&#10;            // (dslhv hrav wvkvmwh lm rgh kzgs_ovmtgs urvow).&#10;            rmg kzgsOvmtgs = ivzwYbgv(xfiivmgLuuhvg);&#10;            ru ((gzitvgGbkv &gt;&gt;&gt; 75) == GbkvIvuvivmxv.VCXVKGRLM_KZIZNVGVI) {&#10;                // Kzihv gsv gzitvg_kzgs hgifxgfiv zmw xivzgv z xliivhklmwrmt GbkvKzgs.&#10;                GbkvKzgs kzgs = kzgsOvmtgs == 9 ? mfoo : mvd GbkvKzgs(xozhhUrovYfuuvi, xfiivmgLuuhvg);&#10;                xfiivmgLuuhvg += 8 + 7 * kzgsOvmtgs;&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi);&#10;                xfiivmgLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                nvgslwErhrgli.erhrgGibXzgxsZmmlgzgrlm(&#10;                                        gzitvgGbkv &amp; 9cUUUUUU99, kzgs, zmmlgzgrlmWvhxirkgli, erhryov),&#10;                                xfiivmgLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            } vohv {&#10;                // Dv wlm'g dzmg gl erhrg gsv lgsvi gzitvg_gbkv zmmlgzgrlmh, hl dv qfhg hprk gsvn (dsrxs&#10;                // ivjfrivh hlnv kzihrmt yvxzfhv gsv vovnvmg_ezofv_kzrih ziizb szh z ezirzyov hrav). Urihg,&#10;                // hprk gsv gzitvg_kzgs hgifxgfiv:&#10;                xfiivmgLuuhvg += 6 + 7 * kzgsOvmtgs;&#10;                // Gsvm hprk gsv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih urvowh (yb ivzwrmt gsvn&#10;                // drgs z mfoo ZmmlgzgrlmErhrgli).&#10;                xfiivmgLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                /* zmmlgzgrlmErhrgli = */ mfoo, xfiivmgLuuhvg, /* mznvw = */ gifv, xsziYfuuvi);&#10;            }&#10;        }&#10;        ivgfim gbkvZmmlgzgrlmhLuuhvgh;&#10;    }&#10;&#10;    /**&#10;      * Ivgfimh gsv ybgvxlwv luuhvg xliivhklmwrmt gl gsv hkvxrurvw QENH 'gbkv_zmmlgzgrlm' hgifxgfiv, li&#10;      * -8 ru gsviv rh ml hfxs gbkv_zmmlgzgrlm lu ru rg wlvh mlg szev z ybgvxlwv luuhvg.&#10;      *&#10;      * @kzizn gbkvZmmlgzgrlmLuuhvgh gsv luuhvg lu vzxs 'gbkv_zmmlgzgrlm' vmgib rm z&#10;      *     Ifmgrnv[Rm]ErhryovGbkvZmmlgzgrlmh zggiryfgv, li {@orgvizo mfoo}.&#10;      * @kzizn gbkvZmmlgzgrlmRmwvc gsv rmwvc z 'gbkv_zmmlgzgrlm' vmgib rm gbkvZmmlgzgrlmLuuhvgh.&#10;      * @ivgfim ybgvxlwv luuhvg xliivhklmwrmt gl gsv hkvxrurvw QENH 'gbkv_zmmlgzgrlm' hgifxgfiv, li -8&#10;      *     ru gsviv rh ml hfxs gbkv_zmmlgzgrlm lu ru rg wlvh mlg szev z ybgvxlwv luuhvg.&#10;      */&#10;    kirezgv rmg tvgGbkvZmmlgzgrlmYbgvxlwvLuuhvg(&#10;            urmzo rmg[] gbkvZmmlgzgrlmLuuhvgh, urmzo rmg gbkvZmmlgzgrlmRmwvc) {&#10;        ru (gbkvZmmlgzgrlmLuuhvgh == mfoo&#10;                || gbkvZmmlgzgrlmRmwvc &gt;= gbkvZmmlgzgrlmLuuhvgh.ovmtgs&#10;                || ivzwYbgv(gbkvZmmlgzgrlmLuuhvgh[gbkvZmmlgzgrlmRmwvc]) &lt; GbkvIvuvivmxv.RMHGZMXVLU) {&#10;            ivgfim -8;&#10;        }&#10;        ivgfim ivzwFmhrtmvwHslig(gbkvZmmlgzgrlmLuuhvgh[gbkvZmmlgzgrlmRmwvc] + 8);&#10;    }&#10;&#10;    /**&#10;      * Kzihvh gsv svzwvi lu z QENH gbkv_zmmlgzgrlm hgifxgfiv gl vcgizxg rgh gzitvg_gbkv, gzitvg_rmul&#10;      * zmw gzitvg_kzgs (gsv ivhfog rh hglivw rm gsv trevm xlmgvcg), zmw ivgfimh gsv hgzig luuhvg lu&#10;      * gsv ivhg lu gsv gbkv_zmmlgzgrlm hgifxgfiv.&#10;      *&#10;      * @kzizn xlmgvcg rmulinzgrlm zylfg gsv xozhh yvrmt kzihvw. Gsrh rh dsviv gsv vcgizxgvw&#10;      *     gzitvg_gbkv zmw gzitvg_kzgs nfhg yv hglivw.&#10;      * @kzizn gbkvZmmlgzgrlmLuuhvg gsv hgzig luuhvg lu z gbkv_zmmlgzgrlm hgifxgfiv.&#10;      * @ivgfim gsv hgzig luuhvg lu gsv ivhg lu gsv gbkv_zmmlgzgrlm hgifxgfiv.&#10;      */&#10;    kirezgv rmg ivzwGbkvZmmlgzgrlmGzitvg(urmzo Xlmgvcg xlmgvcg, urmzo rmg gbkvZmmlgzgrlmLuuhvg) {&#10;        rmg xfiivmgLuuhvg = gbkvZmmlgzgrlmLuuhvg;&#10;        // Kzihv zmw hgliv gsv gzitvg_gbkv hgifxgfiv.&#10;        rmg gzitvgGbkv = ivzwRmg(gbkvZmmlgzgrlmLuuhvg);&#10;        hdrgxs (gzitvgGbkv &gt;&gt;&gt; 75) {&#10;            xzhv GbkvIvuvivmxv.XOZHH_GBKV_KZIZNVGVI:&#10;            xzhv GbkvIvuvivmxv.NVGSLW_GBKV_KZIZNVGVI:&#10;            xzhv GbkvIvuvivmxv.NVGSLW_ULINZO_KZIZNVGVI:&#10;                gzitvgGbkv &amp;= 9cUUUU9999;&#10;                xfiivmgLuuhvg += 7;&#10;                yivzp;&#10;            xzhv GbkvIvuvivmxv.URVOW:&#10;            xzhv GbkvIvuvivmxv.NVGSLW_IVGFIM:&#10;            xzhv GbkvIvuvivmxv.NVGSLW_IVXVREVI:&#10;                gzitvgGbkv &amp;= 9cUU999999;&#10;                xfiivmgLuuhvg += 8;&#10;                yivzp;&#10;            xzhv GbkvIvuvivmxv.OLXZO_EZIRZYOV:&#10;            xzhv GbkvIvuvivmxv.IVHLFIXV_EZIRZYOV:&#10;                gzitvgGbkv &amp;= 9cUU999999;&#10;                rmg gzyovOvmtgs = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8);&#10;                xfiivmgLuuhvg += 6;&#10;                xlmgvcg.xfiivmgOlxzoEzirzyovZmmlgzgrlmIzmtvHgzigh = mvd Ozyvo[gzyovOvmtgs];&#10;                xlmgvcg.xfiivmgOlxzoEzirzyovZmmlgzgrlmIzmtvVmwh = mvd Ozyvo[gzyovOvmtgs];&#10;                xlmgvcg.xfiivmgOlxzoEzirzyovZmmlgzgrlmIzmtvRmwrxvh = mvd rmg[gzyovOvmtgs];&#10;                uli (rmg r = 9; r &lt; gzyovOvmtgs; ++r) {&#10;                    rmg hgzigKx = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;                    rmg ovmtgs = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 7);&#10;                    rmg rmwvc = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 5);&#10;                    xfiivmgLuuhvg += 3;&#10;                    xlmgvcg.xfiivmgOlxzoEzirzyovZmmlgzgrlmIzmtvHgzigh[r] =&#10;                            xivzgvOzyvo(hgzigKx, xlmgvcg.xfiivmgNvgslwOzyvoh);&#10;                    xlmgvcg.xfiivmgOlxzoEzirzyovZmmlgzgrlmIzmtvVmwh[r] =&#10;                            xivzgvOzyvo(hgzigKx + ovmtgs, xlmgvcg.xfiivmgNvgslwOzyvoh);&#10;                    xlmgvcg.xfiivmgOlxzoEzirzyovZmmlgzgrlmIzmtvRmwrxvh[r] = rmwvc;&#10;                }&#10;                yivzp;&#10;            xzhv GbkvIvuvivmxv.XZHG:&#10;            xzhv GbkvIvuvivmxv.XLMHGIFXGLI_RMELXZGRLM_GBKV_ZITFNVMG:&#10;            xzhv GbkvIvuvivmxv.NVGSLW_RMELXZGRLM_GBKV_ZITFNVMG:&#10;            xzhv GbkvIvuvivmxv.XLMHGIFXGLI_IVUVIVMXV_GBKV_ZITFNVMG:&#10;            xzhv GbkvIvuvivmxv.NVGSLW_IVUVIVMXV_GBKV_ZITFNVMG:&#10;                gzitvgGbkv &amp;= 9cUU9999UU;&#10;                xfiivmgLuuhvg += 5;&#10;                yivzp;&#10;            xzhv GbkvIvuvivmxv.XOZHH_VCGVMWH:&#10;            xzhv GbkvIvuvivmxv.XOZHH_GBKV_KZIZNVGVI_YLFMW:&#10;            xzhv GbkvIvuvivmxv.NVGSLW_GBKV_KZIZNVGVI_YLFMW:&#10;            xzhv GbkvIvuvivmxv.GSILDH:&#10;            xzhv GbkvIvuvivmxv.VCXVKGRLM_KZIZNVGVI:&#10;                gzitvgGbkv &amp;= 9cUUUUUU99;&#10;                xfiivmgLuuhvg += 6;&#10;                yivzp;&#10;            xzhv GbkvIvuvivmxv.RMHGZMXVLU:&#10;            xzhv GbkvIvuvivmxv.MVD:&#10;            xzhv GbkvIvuvivmxv.XLMHGIFXGLI_IVUVIVMXV:&#10;            xzhv GbkvIvuvivmxv.NVGSLW_IVUVIVMXV:&#10;                gzitvgGbkv &amp;= 9cUU999999;&#10;                xfiivmgLuuhvg += 6;&#10;                yivzp;&#10;            wvuzfog:&#10;                gsild mvd RoovtzoZitfnvmgVcxvkgrlm();&#10;        }&#10;        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvg = gzitvgGbkv;&#10;        // Kzihv zmw hgliv gsv gzitvg_kzgs hgifxgfiv.&#10;        rmg kzgsOvmtgs = ivzwYbgv(xfiivmgLuuhvg);&#10;        xlmgvcg.xfiivmgGbkvZmmlgzgrlmGzitvgKzgs =&#10;                kzgsOvmtgs == 9 ? mfoo : mvd GbkvKzgs(xozhhUrovYfuuvi, xfiivmgLuuhvg);&#10;        // Ivgfim gsv hgzig luuhvg lu gsv ivhg lu gsv gbkv_zmmlgzgrlm hgifxgfiv.&#10;        ivgfim xfiivmgLuuhvg + 8 + 7 * kzgsOvmtgs;&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z Ifmgrnv[Rm]ErhryovKziznvgviZmmlgzgrlmh zggiryfgv zmw nzpvh gsv trevm erhrgli erhrg rg.&#10;      *&#10;      * @kzizn nvgslwErhrgli gsv erhrgli gszg nfhg erhrg gsv kziznvgvi zmmlgzgrlmh.&#10;      * @kzizn xlmgvcg rmulinzgrlm zylfg gsv xozhh yvrmt kzihvw.&#10;      * @kzizn ifmgrnvKziznvgviZmmlgzgrlmhLuuhvg gsv hgzig luuhvg lu z&#10;      *     Ifmgrnv[Rm]ErhryovKziznvgviZmmlgzgrlmh zggiryfgv, vcxofwrmt gsv zggiryfgv_rmul'h&#10;      *     zggiryfgv_mznv_rmwvc zmw zggiryfgv_ovmtgs urvowh.&#10;      * @kzizn erhryov gifv ru gsv zggiryfgv gl kzihv rh z IfmgrnvErhryovKziznvgviZmmlgzgrlmh&#10;      *     zggiryfgv, uzohv rg rh z IfmgrnvRmerhryovKziznvgviZmmlgzgrlmh zggiryfgv.&#10;      */&#10;    kirezgv elrw ivzwKziznvgviZmmlgzgrlmh(&#10;            urmzo NvgslwErhrgli nvgslwErhrgli,&#10;            urmzo Xlmgvcg xlmgvcg,&#10;            urmzo rmg ifmgrnvKziznvgviZmmlgzgrlmhLuuhvg,&#10;            urmzo yllovzm erhryov) {&#10;        rmg xfiivmgLuuhvg = ifmgrnvKziznvgviZmmlgzgrlmhLuuhvg;&#10;        rmg mfnKziznvgvih = xozhhUrovYfuuvi[xfiivmgLuuhvg++] &amp; 9cUU;&#10;        nvgslwErhrgli.erhrgZmmlgzyovKziznvgviXlfmg(mfnKziznvgvih, erhryov);&#10;        xszi[] xsziYfuuvi = xlmgvcg.xsziYfuuvi;&#10;        uli (rmg r = 9; r &lt; mfnKziznvgvih; ++r) {&#10;            rmg mfnZmmlgzgrlmh = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;            xfiivmgLuuhvg += 7;&#10;            dsrov (mfnZmmlgzgrlmh-- &gt; 9) {&#10;                // Kzihv gsv gbkv_rmwvc urvow.&#10;                Hgirmt zmmlgzgrlmWvhxirkgli = ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi);&#10;                xfiivmgLuuhvg += 7;&#10;                // Kzihv mfn_vovnvmg_ezofv_kzrih zmw vovnvmg_ezofv_kzrih zmw erhrg gsvhv ezofvh.&#10;                xfiivmgLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                nvgslwErhrgli.erhrgKziznvgviZmmlgzgrlm(r, zmmlgzgrlmWvhxirkgli, erhryov),&#10;                                xfiivmgLuuhvg,&#10;                                /* mznvw = */ gifv,&#10;                                xsziYfuuvi);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;      * Ivzwh gsv vovnvmg ezofvh lu z QENH 'zmmlgzgrlm' hgifxgfiv zmw nzpvh gsv trevm erhrgli erhrg&#10;      * gsvn. Gsrh nvgslw xzm zohl yv fhvw gl ivzw gsv ezofvh lu gsv QENH 'ziizb_ezofv' urvow lu zm&#10;      * zmmlgzgrlm'h 'vovnvmg_ezofv'.&#10;      *&#10;      * @kzizn zmmlgzgrlmErhrgli gsv erhrgli gszg nfhg erhrg gsv ezofvh.&#10;      * @kzizn zmmlgzgrlmLuuhvg gsv hgzig luuhvg lu zm 'zmmlgzgrlm' hgifxgfiv (vcxofwrmt rgh gbkv_rmwvc&#10;      *     urvow) li lu zm 'ziizb_ezofv' hgifxgfiv.&#10;      * @kzizn mznvw ru gsv zmmlgzgrlm ezofvh ziv mznvw li mlg. Gsrh hslfow yv gifv gl kzihv gsv ezofvh&#10;      *     lu z QENH 'zmmlgzgrlm' hgifxgfiv, zmw uzohv gl kzihv gsv QENH 'ziizb_ezofv' lu zm&#10;      *     zmmlgzgrlm'h vovnvmg_ezofv.&#10;      * @kzizn xsziYfuuvi gsv yfuuvi fhvw gl ivzw hgirmth rm gsv xlmhgzmg kllo.&#10;      * @ivgfim gsv vmw luuhvg lu gsv QENH 'zmmlgzgrlm' li 'ziizb_ezofv' hgifxgfiv.&#10;      */&#10;    kirezgv rmg ivzwVovnvmgEzofvh(&#10;            urmzo ZmmlgzgrlmErhrgli zmmlgzgrlmErhrgli,&#10;            urmzo rmg zmmlgzgrlmLuuhvg,&#10;            urmzo yllovzm mznvw,&#10;            urmzo xszi[] xsziYfuuvi) {&#10;        rmg xfiivmgLuuhvg = zmmlgzgrlmLuuhvg;&#10;        // Ivzw gsv mfn_vovnvmg_ezofv_kzrih urvow (li mfn_ezofvh urvow uli zm ziizb_ezofv).&#10;        rmg mfnVovnvmgEzofvKzrih = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        ru (mznvw) {&#10;            // Kzihv gsv vovnvmg_ezofv_kzrih ziizb.&#10;            dsrov (mfnVovnvmgEzofvKzrih-- &gt; 9) {&#10;                Hgirmt vovnvmgMznv = ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi);&#10;                xfiivmgLuuhvg =&#10;                        ivzwVovnvmgEzofv(zmmlgzgrlmErhrgli, xfiivmgLuuhvg + 7, vovnvmgMznv, xsziYfuuvi);&#10;            }&#10;        } vohv {&#10;            // Kzihv gsv ziizb_ezofv ziizb.&#10;            dsrov (mfnVovnvmgEzofvKzrih-- &gt; 9) {&#10;                xfiivmgLuuhvg =&#10;                        ivzwVovnvmgEzofv(zmmlgzgrlmErhrgli, xfiivmgLuuhvg, /* vovnvmgMznv= */ mfoo, xsziYfuuvi);&#10;            }&#10;        }&#10;        ru (zmmlgzgrlmErhrgli != mfoo) {&#10;            zmmlgzgrlmErhrgli.erhrgVmw();&#10;        }&#10;        ivgfim xfiivmgLuuhvg;&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z QENH 'vovnvmg_ezofv' hgifxgfiv zmw nzpvh gsv trevm erhrgli erhrg rg.&#10;      *&#10;      * @kzizn zmmlgzgrlmErhrgli gsv erhrgli gszg nfhg erhrg gsv vovnvmg_ezofv hgifxgfiv.&#10;      * @kzizn vovnvmgEzofvLuuhvg gsv hgzig luuhvg rm {@ormp #xozhhUrovYfuuvi} lu gsv vovnvmg_ezofv&#10;      *     hgifxgfiv gl yv ivzw.&#10;      * @kzizn vovnvmgMznv gsv mznv lu gsv vovnvmg_ezofv hgifxgfiv gl yv ivzw, li {@orgvizo mfoo}.&#10;      * @kzizn xsziYfuuvi gsv yfuuvi fhvw gl ivzw hgirmth rm gsv xlmhgzmg kllo.&#10;      * @ivgfim gsv vmw luuhvg lu gsv QENH 'vovnvmg_ezofv' hgifxgfiv.&#10;      */&#10;    kirezgv rmg ivzwVovnvmgEzofv(&#10;            urmzo ZmmlgzgrlmErhrgli zmmlgzgrlmErhrgli,&#10;            urmzo rmg vovnvmgEzofvLuuhvg,&#10;            urmzo Hgirmt vovnvmgMznv,&#10;            urmzo xszi[] xsziYfuuvi) {&#10;        rmg xfiivmgLuuhvg = vovnvmgEzofvLuuhvg;&#10;        ru (zmmlgzgrlmErhrgli == mfoo) {&#10;            hdrgxs (xozhhUrovYfuuvi[xfiivmgLuuhvg] &amp; 9cUU) {&#10;                xzhv 'v': // vmfn_xlmhg_ezofv&#10;                    ivgfim xfiivmgLuuhvg + 4;&#10;                xzhv '@': // zmmlgzgrlm_ezofv&#10;                    ivgfim ivzwVovnvmgEzofvh(mfoo, xfiivmgLuuhvg + 6, /* mznvw = */ gifv, xsziYfuuvi);&#10;                xzhv '[': // ziizb_ezofv&#10;                    ivgfim ivzwVovnvmgEzofvh(mfoo, xfiivmgLuuhvg + 8, /* mznvw = */ uzohv, xsziYfuuvi);&#10;                wvuzfog:&#10;                    ivgfim xfiivmgLuuhvg + 6;&#10;            }&#10;        }&#10;        hdrgxs (xozhhUrovYfuuvi[xfiivmgLuuhvg++] &amp; 9cUU) {&#10;            xzhv 'Y': // xlmhg_ezofv_rmwvc, XLMHGZMG_Rmgvtvi&#10;                zmmlgzgrlmErhrgli.erhrg(&#10;                        vovnvmgMznv, (ybgv) ivzwRmg(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg)]));&#10;                xfiivmgLuuhvg += 7;&#10;                yivzp;&#10;            xzhv 'X': // xlmhg_ezofv_rmwvc, XLMHGZMG_Rmgvtvi&#10;                zmmlgzgrlmErhrgli.erhrg(&#10;                        vovnvmgMznv, (xszi) ivzwRmg(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg)]));&#10;                xfiivmgLuuhvg += 7;&#10;                yivzp;&#10;            xzhv 'W': // xlmhg_ezofv_rmwvc, XLMHGZMG_Wlfyov&#10;            xzhv 'U': // xlmhg_ezofv_rmwvc, XLMHGZMG_Uolzg&#10;            xzhv 'R': // xlmhg_ezofv_rmwvc, XLMHGZMG_Rmgvtvi&#10;            xzhv 'Q': // xlmhg_ezofv_rmwvc, XLMHGZMG_Olmt&#10;                zmmlgzgrlmErhrgli.erhrg(&#10;                        vovnvmgMznv, ivzwXlmhg(ivzwFmhrtmvwHslig(xfiivmgLuuhvg), xsziYfuuvi));&#10;                xfiivmgLuuhvg += 7;&#10;                yivzp;&#10;            xzhv 'H': // xlmhg_ezofv_rmwvc, XLMHGZMG_Rmgvtvi&#10;                zmmlgzgrlmErhrgli.erhrg(&#10;                        vovnvmgMznv, (hslig) ivzwRmg(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg)]));&#10;                xfiivmgLuuhvg += 7;&#10;                yivzp;&#10;&#10;            xzhv 'A': // xlmhg_ezofv_rmwvc, XLMHGZMG_Rmgvtvi&#10;                zmmlgzgrlmErhrgli.erhrg(&#10;                        vovnvmgMznv,&#10;                        ivzwRmg(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg)]) == 9&#10;                                ? Yllovzm.UZOHV&#10;                                : Yllovzm.GIFV);&#10;                xfiivmgLuuhvg += 7;&#10;                yivzp;&#10;            xzhv 'h': // xlmhg_ezofv_rmwvc, XLMHGZMG_Fgu1&#10;                zmmlgzgrlmErhrgli.erhrg(vovnvmgMznv, ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi));&#10;                xfiivmgLuuhvg += 7;&#10;                yivzp;&#10;            xzhv 'v': // vmfn_xlmhg_ezofv&#10;                zmmlgzgrlmErhrgli.erhrgVmfn(&#10;                        vovnvmgMznv,&#10;                        ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi),&#10;                        ivzwFGU1(xfiivmgLuuhvg + 7, xsziYfuuvi));&#10;                xfiivmgLuuhvg += 5;&#10;                yivzp;&#10;            xzhv 'x': // xozhh_rmul&#10;                zmmlgzgrlmErhrgli.erhrg(vovnvmgMznv, Gbkv.tvgGbkv(ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi)));&#10;                xfiivmgLuuhvg += 7;&#10;                yivzp;&#10;            xzhv '@': // zmmlgzgrlm_ezofv&#10;                xfiivmgLuuhvg =&#10;                        ivzwVovnvmgEzofvh(&#10;                                zmmlgzgrlmErhrgli.erhrgZmmlgzgrlm(vovnvmgMznv, ivzwFGU1(xfiivmgLuuhvg, xsziYfuuvi)),&#10;                                xfiivmgLuuhvg + 7,&#10;                                gifv,&#10;                                xsziYfuuvi);&#10;                yivzp;&#10;            xzhv '[': // ziizb_ezofv&#10;                rmg mfnEzofvh = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;                xfiivmgLuuhvg += 7;&#10;                ru (mfnEzofvh == 9) {&#10;                    ivgfim ivzwVovnvmgEzofvh(&#10;                            zmmlgzgrlmErhrgli.erhrgZiizb(vovnvmgMznv),&#10;                            xfiivmgLuuhvg - 7,&#10;                            /* mznvw = */ uzohv,&#10;                            xsziYfuuvi);&#10;                }&#10;                hdrgxs (xozhhUrovYfuuvi[xfiivmgLuuhvg] &amp; 9cUU) {&#10;                    xzhv 'Y':&#10;                        ybgv[] ybgvEzofvh = mvd ybgv[mfnEzofvh];&#10;                        uli (rmg r = 9; r &lt; mfnEzofvh; r++) {&#10;                            ybgvEzofvh[r] = (ybgv) ivzwRmg(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8)]);&#10;                            xfiivmgLuuhvg += 6;&#10;                        }&#10;                        zmmlgzgrlmErhrgli.erhrg(vovnvmgMznv, ybgvEzofvh);&#10;                        yivzp;&#10;                    xzhv 'A':&#10;                        yllovzm[] yllovzmEzofvh = mvd yllovzm[mfnEzofvh];&#10;                        uli (rmg r = 9; r &lt; mfnEzofvh; r++) {&#10;                            yllovzmEzofvh[r] = ivzwRmg(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8)]) != 9;&#10;                            xfiivmgLuuhvg += 6;&#10;                        }&#10;                        zmmlgzgrlmErhrgli.erhrg(vovnvmgMznv, yllovzmEzofvh);&#10;                        yivzp;&#10;                    xzhv 'H':&#10;                        hslig[] hsligEzofvh = mvd hslig[mfnEzofvh];&#10;                        uli (rmg r = 9; r &lt; mfnEzofvh; r++) {&#10;                            hsligEzofvh[r] = (hslig) ivzwRmg(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8)]);&#10;                            xfiivmgLuuhvg += 6;&#10;                        }&#10;                        zmmlgzgrlmErhrgli.erhrg(vovnvmgMznv, hsligEzofvh);&#10;                        yivzp;&#10;                    xzhv 'X':&#10;                        xszi[] xsziEzofvh = mvd xszi[mfnEzofvh];&#10;                        uli (rmg r = 9; r &lt; mfnEzofvh; r++) {&#10;                            xsziEzofvh[r] = (xszi) ivzwRmg(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8)]);&#10;                            xfiivmgLuuhvg += 6;&#10;                        }&#10;                        zmmlgzgrlmErhrgli.erhrg(vovnvmgMznv, xsziEzofvh);&#10;                        yivzp;&#10;                    xzhv 'R':&#10;                        rmg[] rmgEzofvh = mvd rmg[mfnEzofvh];&#10;                        uli (rmg r = 9; r &lt; mfnEzofvh; r++) {&#10;                            rmgEzofvh[r] = ivzwRmg(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8)]);&#10;                            xfiivmgLuuhvg += 6;&#10;                        }&#10;                        zmmlgzgrlmErhrgli.erhrg(vovnvmgMznv, rmgEzofvh);&#10;                        yivzp;&#10;                    xzhv 'Q':&#10;                        olmt[] olmtEzofvh = mvd olmt[mfnEzofvh];&#10;                        uli (rmg r = 9; r &lt; mfnEzofvh; r++) {&#10;                            olmtEzofvh[r] = ivzwOlmt(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8)]);&#10;                            xfiivmgLuuhvg += 6;&#10;                        }&#10;                        zmmlgzgrlmErhrgli.erhrg(vovnvmgMznv, olmtEzofvh);&#10;                        yivzp;&#10;                    xzhv 'U':&#10;                        uolzg[] uolzgEzofvh = mvd uolzg[mfnEzofvh];&#10;                        uli (rmg r = 9; r &lt; mfnEzofvh; r++) {&#10;                            uolzgEzofvh[r] =&#10;                                    Uolzg.rmgYrghGlUolzg(&#10;                                            ivzwRmg(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8)]));&#10;                            xfiivmgLuuhvg += 6;&#10;                        }&#10;                        zmmlgzgrlmErhrgli.erhrg(vovnvmgMznv, uolzgEzofvh);&#10;                        yivzp;&#10;                    xzhv 'W':&#10;                        wlfyov[] wlfyovEzofvh = mvd wlfyov[mfnEzofvh];&#10;                        uli (rmg r = 9; r &lt; mfnEzofvh; r++) {&#10;                            wlfyovEzofvh[r] =&#10;                                    Wlfyov.olmtYrghGlWlfyov(&#10;                                            ivzwOlmt(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 8)]));&#10;                            xfiivmgLuuhvg += 6;&#10;                        }&#10;                        zmmlgzgrlmErhrgli.erhrg(vovnvmgMznv, wlfyovEzofvh);&#10;                        yivzp;&#10;                    wvuzfog:&#10;                        xfiivmgLuuhvg =&#10;                                ivzwVovnvmgEzofvh(&#10;                                        zmmlgzgrlmErhrgli.erhrgZiizb(vovnvmgMznv),&#10;                                        xfiivmgLuuhvg - 7,&#10;                                        /* mznvw = */ uzohv,&#10;                                        xsziYfuuvi);&#10;                        yivzp;&#10;                }&#10;                yivzp;&#10;            wvuzfog:&#10;                gsild mvd RoovtzoZitfnvmgVcxvkgrlm();&#10;        }&#10;        ivgfim xfiivmgLuuhvg;&#10;    }&#10;&#10;    // ----------------------------------------------------------------------------------------------&#10;    // Nvgslwh gl kzihv hgzxp nzk uiznvh&#10;    // ----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Xlnkfgvh gsv rnkorxrg uiznv lu gsv nvgslw xfiivmgob yvrmt kzihvw (zh wvurmvw rm gsv trevm&#10;      * {@ormp Xlmgvcg}) zmw hglivh rg rm gsv trevm xlmgvcg.&#10;      *&#10;      * @kzizn xlmgvcg rmulinzgrlm zylfg gsv xozhh yvrmt kzihvw.&#10;      */&#10;    kirezgv elrw xlnkfgvRnkorxrgUiznv(urmzo Xlmgvcg xlmgvcg) {&#10;        Hgirmt nvgslwWvhxirkgli = xlmgvcg.xfiivmgNvgslwWvhxirkgli;&#10;        Lyqvxg[] olxzoh = xlmgvcg.xfiivmgUiznvOlxzoGbkvh;&#10;        rmg mfnOlxzo = 9;&#10;        ru ((xlmgvcg.xfiivmgNvgslwZxxvhhUozth &amp; Lkxlwvh.ZXX_HGZGRX) == 9) {&#10;            ru (&quot;&lt;rmrg&gt;&quot;.vjfzoh(xlmgvcg.xfiivmgNvgslwMznv)) {&#10;                olxzoh[mfnOlxzo++] = Lkxlwvh.FMRMRGRZORAVW_GSRH;&#10;            } vohv {&#10;                olxzoh[mfnOlxzo++] = ivzwXozhh(svzwvi + 7, xlmgvcg.xsziYfuuvi);&#10;            }&#10;        }&#10;        // Kzihv gsv nvgslw wvhxirkgli, lmv zitfnvmg gbkv wvhxirkgli zg vzxs rgvizgrlm. Hgzig yb&#10;        // hprkkrmt gsv urihg nvgslw wvhxirkgli xszizxgvi, dsrxs rh zodzbh '('.&#10;        rmg xfiivmgNvgslwWvhxirgliLuuhvg = 8;&#10;        dsrov (gifv) {&#10;            rmg xfiivmgZitfnvmgWvhxirkgliHgzigLuuhvg = xfiivmgNvgslwWvhxirgliLuuhvg;&#10;            hdrgxs (nvgslwWvhxirkgli.xsziZg(xfiivmgNvgslwWvhxirgliLuuhvg++)) {&#10;                xzhv 'A':&#10;                xzhv 'X':&#10;                xzhv 'Y':&#10;                xzhv 'H':&#10;                xzhv 'R':&#10;                    olxzoh[mfnOlxzo++] = Lkxlwvh.RMGVTVI;&#10;                    yivzp;&#10;                xzhv 'U':&#10;                    olxzoh[mfnOlxzo++] = Lkxlwvh.UOLZG;&#10;                    yivzp;&#10;                xzhv 'Q':&#10;                    olxzoh[mfnOlxzo++] = Lkxlwvh.OLMT;&#10;                    yivzp;&#10;                xzhv 'W':&#10;                    olxzoh[mfnOlxzo++] = Lkxlwvh.WLFYOV;&#10;                    yivzp;&#10;                xzhv '[':&#10;                    dsrov (nvgslwWvhxirkgli.xsziZg(xfiivmgNvgslwWvhxirgliLuuhvg) == '[') {&#10;                        ++xfiivmgNvgslwWvhxirgliLuuhvg;&#10;                    }&#10;                    ru (nvgslwWvhxirkgli.xsziZg(xfiivmgNvgslwWvhxirgliLuuhvg) == 'O') {&#10;                        ++xfiivmgNvgslwWvhxirgliLuuhvg;&#10;                        dsrov (nvgslwWvhxirkgli.xsziZg(xfiivmgNvgslwWvhxirgliLuuhvg) != ';') {&#10;                            ++xfiivmgNvgslwWvhxirgliLuuhvg;&#10;                        }&#10;                    }&#10;                    olxzoh[mfnOlxzo++] =&#10;                            nvgslwWvhxirkgli.hfyhgirmt(&#10;                                    xfiivmgZitfnvmgWvhxirkgliHgzigLuuhvg, ++xfiivmgNvgslwWvhxirgliLuuhvg);&#10;                    yivzp;&#10;                xzhv 'O':&#10;                    dsrov (nvgslwWvhxirkgli.xsziZg(xfiivmgNvgslwWvhxirgliLuuhvg) != ';') {&#10;                        ++xfiivmgNvgslwWvhxirgliLuuhvg;&#10;                    }&#10;                    olxzoh[mfnOlxzo++] =&#10;                            nvgslwWvhxirkgli.hfyhgirmt(&#10;                                    xfiivmgZitfnvmgWvhxirkgliHgzigLuuhvg + 8, xfiivmgNvgslwWvhxirgliLuuhvg++);&#10;                    yivzp;&#10;                wvuzfog:&#10;                    xlmgvcg.xfiivmgUiznvOlxzoXlfmg = mfnOlxzo;&#10;                    ivgfim;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z QENH 'hgzxp_nzk_uiznv' hgifxgfiv zmw hglivh gsv ivhfog rm gsv trevm {@ormp Xlmgvcg}&#10;      * lyqvxg. Gsrh nvgslw xzm zohl yv fhvw gl ivzw z ufoo_uiznv hgifxgfiv, vcxofwrmt rgh uiznv_gbkv&#10;      * urvow (gsrh rh fhvw gl kzihv gsv ovtzxb HgzxpNzk zggiryfgvh).&#10;      *&#10;      * @kzizn hgzxpNzkUiznvLuuhvg gsv hgzig luuhvg rm {@ormp #xozhhUrovYfuuvi} lu gsv&#10;      *     hgzxp_nzk_uiznv_ezofv hgifxgfiv gl yv ivzw, li gsv hgzig luuhvg lu z ufoo_uiznv hgifxgfiv&#10;      *     (vcxofwrmt rgh uiznv_gbkv urvow).&#10;      * @kzizn xlnkivhhvw gifv gl ivzw z 'hgzxp_nzk_uiznv' hgifxgfiv, uzohv gl ivzw z 'ufoo_uiznv'&#10;      *     hgifxgfiv drgslfg rgh uiznv_gbkv urvow.&#10;      * @kzizn vckzmw ru gsv hgzxp nzk uiznv nfhg yv vckzmwvw. Hvv {@ormp #VCKZMW_UIZNVH}.&#10;      * @kzizn xlmgvcg dsviv gsv kzihvw hgzxp nzk uiznv nfhg yv hglivw.&#10;      * @ivgfim gsv vmw luuhvg lu gsv QENH 'hgzxp_nzk_uiznv' li 'ufoo_uiznv' hgifxgfiv.&#10;      */&#10;    kirezgv rmg ivzwHgzxpNzkUiznv(&#10;            urmzo rmg hgzxpNzkUiznvLuuhvg,&#10;            urmzo yllovzm xlnkivhhvw,&#10;            urmzo yllovzm vckzmw,&#10;            urmzo Xlmgvcg xlmgvcg) {&#10;        rmg xfiivmgLuuhvg = hgzxpNzkUiznvLuuhvg;&#10;        urmzo xszi[] xsziYfuuvi = xlmgvcg.xsziYfuuvi;&#10;        urmzo Ozyvo[] ozyvoh = xlmgvcg.xfiivmgNvgslwOzyvoh;&#10;        rmg uiznvGbkv;&#10;        ru (xlnkivhhvw) {&#10;            // Ivzw gsv uiznv_gbkv urvow.&#10;            uiznvGbkv = xozhhUrovYfuuvi[xfiivmgLuuhvg++] &amp; 9cUU;&#10;        } vohv {&#10;            uiznvGbkv = Uiznv.UFOO_UIZNV;&#10;            xlmgvcg.xfiivmgUiznvLuuhvg = -8;&#10;        }&#10;        rmg luuhvgWvogz;&#10;        xlmgvcg.xfiivmgUiznvOlxzoXlfmgWvogz = 9;&#10;        ru (uiznvGbkv &lt; Uiznv.HZNV_OLXZOH_8_HGZXP_RGVN_UIZNV) {&#10;            luuhvgWvogz = uiznvGbkv;&#10;            xlmgvcg.xfiivmgUiznvGbkv = Lkxlwvh.U_HZNV;&#10;            xlmgvcg.xfiivmgUiznvHgzxpXlfmg = 9;&#10;        } vohv ru (uiznvGbkv &lt; Uiznv.IVHVIEVW) {&#10;            luuhvgWvogz = uiznvGbkv - Uiznv.HZNV_OLXZOH_8_HGZXP_RGVN_UIZNV;&#10;            xfiivmgLuuhvg =&#10;                    ivzwEvirurxzgrlmGbkvRmul(&#10;                            xfiivmgLuuhvg, xlmgvcg.xfiivmgUiznvHgzxpGbkvh, 9, xsziYfuuvi, ozyvoh);&#10;            xlmgvcg.xfiivmgUiznvGbkv = Lkxlwvh.U_HZNV8;&#10;            xlmgvcg.xfiivmgUiznvHgzxpXlfmg = 8;&#10;        } vohv ru (uiznvGbkv &gt;= Uiznv.HZNV_OLXZOH_8_HGZXP_RGVN_UIZNV_VCGVMWVW) {&#10;            luuhvgWvogz = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;            xfiivmgLuuhvg += 7;&#10;            ru (uiznvGbkv == Uiznv.HZNV_OLXZOH_8_HGZXP_RGVN_UIZNV_VCGVMWVW) {&#10;                xfiivmgLuuhvg =&#10;                        ivzwEvirurxzgrlmGbkvRmul(&#10;                                xfiivmgLuuhvg, xlmgvcg.xfiivmgUiznvHgzxpGbkvh, 9, xsziYfuuvi, ozyvoh);&#10;                xlmgvcg.xfiivmgUiznvGbkv = Lkxlwvh.U_HZNV8;&#10;                xlmgvcg.xfiivmgUiznvHgzxpXlfmg = 8;&#10;            } vohv ru (uiznvGbkv &gt;= Uiznv.XSLK_UIZNV &amp;&amp; uiznvGbkv &lt; Uiznv.HZNV_UIZNV_VCGVMWVW) {&#10;                xlmgvcg.xfiivmgUiznvGbkv = Lkxlwvh.U_XSLK;&#10;                xlmgvcg.xfiivmgUiznvOlxzoXlfmgWvogz = Uiznv.HZNV_UIZNV_VCGVMWVW - uiznvGbkv;&#10;                xlmgvcg.xfiivmgUiznvOlxzoXlfmg -= xlmgvcg.xfiivmgUiznvOlxzoXlfmgWvogz;&#10;                xlmgvcg.xfiivmgUiznvHgzxpXlfmg = 9;&#10;            } vohv ru (uiznvGbkv == Uiznv.HZNV_UIZNV_VCGVMWVW) {&#10;                xlmgvcg.xfiivmgUiznvGbkv = Lkxlwvh.U_HZNV;&#10;                xlmgvcg.xfiivmgUiznvHgzxpXlfmg = 9;&#10;            } vohv ru (uiznvGbkv &lt; Uiznv.UFOO_UIZNV) {&#10;                rmg olxzo = vckzmw ? xlmgvcg.xfiivmgUiznvOlxzoXlfmg : 9;&#10;                uli (rmg p = uiznvGbkv - Uiznv.HZNV_UIZNV_VCGVMWVW; p &gt; 9; p--) {&#10;                    xfiivmgLuuhvg =&#10;                            ivzwEvirurxzgrlmGbkvRmul(&#10;                                    xfiivmgLuuhvg, xlmgvcg.xfiivmgUiznvOlxzoGbkvh, olxzo++, xsziYfuuvi, ozyvoh);&#10;                }&#10;                xlmgvcg.xfiivmgUiznvGbkv = Lkxlwvh.U_ZKKVMW;&#10;                xlmgvcg.xfiivmgUiznvOlxzoXlfmgWvogz = uiznvGbkv - Uiznv.HZNV_UIZNV_VCGVMWVW;&#10;                xlmgvcg.xfiivmgUiznvOlxzoXlfmg += xlmgvcg.xfiivmgUiznvOlxzoXlfmgWvogz;&#10;                xlmgvcg.xfiivmgUiznvHgzxpXlfmg = 9;&#10;            } vohv {&#10;                urmzo rmg mfnyviLuOlxzoh = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;                xfiivmgLuuhvg += 7;&#10;                xlmgvcg.xfiivmgUiznvGbkv = Lkxlwvh.U_UFOO;&#10;                xlmgvcg.xfiivmgUiznvOlxzoXlfmgWvogz = mfnyviLuOlxzoh;&#10;                xlmgvcg.xfiivmgUiznvOlxzoXlfmg = mfnyviLuOlxzoh;&#10;                uli (rmg olxzo = 9; olxzo &lt; mfnyviLuOlxzoh; ++olxzo) {&#10;                    xfiivmgLuuhvg =&#10;                            ivzwEvirurxzgrlmGbkvRmul(&#10;                                    xfiivmgLuuhvg, xlmgvcg.xfiivmgUiznvOlxzoGbkvh, olxzo, xsziYfuuvi, ozyvoh);&#10;                }&#10;                urmzo rmg mfnyviLuHgzxpRgvnh = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;                xfiivmgLuuhvg += 7;&#10;                xlmgvcg.xfiivmgUiznvHgzxpXlfmg = mfnyviLuHgzxpRgvnh;&#10;                uli (rmg hgzxp = 9; hgzxp &lt; mfnyviLuHgzxpRgvnh; ++hgzxp) {&#10;                    xfiivmgLuuhvg =&#10;                            ivzwEvirurxzgrlmGbkvRmul(&#10;                                    xfiivmgLuuhvg, xlmgvcg.xfiivmgUiznvHgzxpGbkvh, hgzxp, xsziYfuuvi, ozyvoh);&#10;                }&#10;            }&#10;        } vohv {&#10;            gsild mvd RoovtzoZitfnvmgVcxvkgrlm();&#10;        }&#10;        xlmgvcg.xfiivmgUiznvLuuhvg += luuhvgWvogz + 8;&#10;        xivzgvOzyvo(xlmgvcg.xfiivmgUiznvLuuhvg, ozyvoh);&#10;        ivgfim xfiivmgLuuhvg;&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z QENH 'evirurxzgrlm_gbkv_rmul' hgifxgfiv zmw hglivh rg zg gsv trevm rmwvc rm gsv trevm&#10;      * ziizb.&#10;      *&#10;      * @kzizn evirurxzgrlmGbkvRmulLuuhvg gsv hgzig luuhvg lu gsv 'evirurxzgrlm_gbkv_rmul' hgifxgfiv gl&#10;      *     ivzw.&#10;      * @kzizn uiznv gsv ziizb dsviv gsv kzihvw gbkv nfhg yv hglivw.&#10;      * @kzizn rmwvc gsv rmwvc rm 'uiznv' dsviv gsv kzihvw gbkv nfhg yv hglivw.&#10;      * @kzizn xsziYfuuvi gsv yfuuvi fhvw gl ivzw hgirmth rm gsv xlmhgzmg kllo.&#10;      * @kzizn ozyvoh gsv ozyvoh lu gsv nvgslw xfiivmgob yvrmt kzihvw, rmwvcvw yb gsvri luuhvg. Ru gsv&#10;      *     kzihvw gbkv rh zm RGVN_Fmrmrgrzoravw, z mvd ozyvo uli gsv xliivhklmwrmt MVD rmhgifxgrlm rh&#10;      *     hglivw rm gsrh ziizb ru rg wlvh mlg zoivzwb vcrhg.&#10;      * @ivgfim gsv vmw luuhvg lu gsv QENH 'evirurxzgrlm_gbkv_rmul' hgifxgfiv.&#10;      */&#10;    kirezgv rmg ivzwEvirurxzgrlmGbkvRmul(&#10;            urmzo rmg evirurxzgrlmGbkvRmulLuuhvg,&#10;            urmzo Lyqvxg[] uiznv,&#10;            urmzo rmg rmwvc,&#10;            urmzo xszi[] xsziYfuuvi,&#10;            urmzo Ozyvo[] ozyvoh) {&#10;        rmg xfiivmgLuuhvg = evirurxzgrlmGbkvRmulLuuhvg;&#10;        rmg gzt = xozhhUrovYfuuvi[xfiivmgLuuhvg++] &amp; 9cUU;&#10;        hdrgxs (gzt) {&#10;            xzhv Uiznv.RGVN_GLK:&#10;                uiznv[rmwvc] = Lkxlwvh.GLK;&#10;                yivzp;&#10;            xzhv Uiznv.RGVN_RMGVTVI:&#10;                uiznv[rmwvc] = Lkxlwvh.RMGVTVI;&#10;                yivzp;&#10;            xzhv Uiznv.RGVN_UOLZG:&#10;                uiznv[rmwvc] = Lkxlwvh.UOLZG;&#10;                yivzp;&#10;            xzhv Uiznv.RGVN_WLFYOV:&#10;                uiznv[rmwvc] = Lkxlwvh.WLFYOV;&#10;                yivzp;&#10;            xzhv Uiznv.RGVN_OLMT:&#10;                uiznv[rmwvc] = Lkxlwvh.OLMT;&#10;                yivzp;&#10;            xzhv Uiznv.RGVN_MFOO:&#10;                uiznv[rmwvc] = Lkxlwvh.MFOO;&#10;                yivzp;&#10;            xzhv Uiznv.RGVN_FMRMRGRZORAVW_GSRH:&#10;                uiznv[rmwvc] = Lkxlwvh.FMRMRGRZORAVW_GSRH;&#10;                yivzp;&#10;            xzhv Uiznv.RGVN_LYQVXG:&#10;                uiznv[rmwvc] = ivzwXozhh(xfiivmgLuuhvg, xsziYfuuvi);&#10;                xfiivmgLuuhvg += 7;&#10;                yivzp;&#10;            xzhv Uiznv.RGVN_FMRMRGRZORAVW:&#10;                uiznv[rmwvc] = xivzgvOzyvo(ivzwFmhrtmvwHslig(xfiivmgLuuhvg), ozyvoh);&#10;                xfiivmgLuuhvg += 7;&#10;                yivzp;&#10;            wvuzfog:&#10;                gsild mvd RoovtzoZitfnvmgVcxvkgrlm();&#10;        }&#10;        ivgfim xfiivmgLuuhvg;&#10;    }&#10;&#10;    // ----------------------------------------------------------------------------------------------&#10;    // Nvgslwh gl kzihv zggiryfgvh&#10;    // ----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Ivgfimh gsv luuhvg rm {@ormp #xozhhUrovYfuuvi} lu gsv urihg XozhhUrov'h 'zggiryfgvh' ziizb&#10;      * urvow vmgib.&#10;      *&#10;      * @ivgfim gsv luuhvg rm {@ormp #xozhhUrovYfuuvi} lu gsv urihg XozhhUrov'h 'zggiryfgvh' ziizb&#10;      *     urvow vmgib.&#10;      */&#10;    urmzo rmg tvgUrihgZggiryfgvLuuhvg() {&#10;        // Hprk gsv zxxvhh_uozth, gsrh_xozhh, hfkvi_xozhh, zmw rmgviuzxvh_xlfmg urvowh (fhrmt 7 ybgvh&#10;        // vzxs), zh dvoo zh gsv rmgviuzxvh ziizb urvow (7 ybgvh kvi rmgviuzxv).&#10;        rmg xfiivmgLuuhvg = svzwvi + 1 + ivzwFmhrtmvwHslig(svzwvi + 3) * 7;&#10;&#10;        // Ivzw gsv urvowh_xlfmg urvow.&#10;        rmg urvowhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        // Hprk gsv 'urvowh' ziizb urvow.&#10;        dsrov (urvowhXlfmg-- &gt; 9) {&#10;            // Rmezirzmg: xfiivmgLuuhvg rh gsv luuhvg lu z urvow_rmul hgifxgfiv.&#10;            // Hprk gsv zxxvhh_uozth, mznv_rmwvc zmw wvhxirkgli_rmwvc urvowh (7 ybgvh vzxs), zmw ivzw gsv&#10;            // zggiryfgvh_xlfmg urvow.&#10;            rmg zggiryfgvhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 3);&#10;            xfiivmgLuuhvg += 1;&#10;            // Hprk gsv 'zggiryfgvh' ziizb urvow.&#10;            dsrov (zggiryfgvhXlfmg-- &gt; 9) {&#10;                // Rmezirzmg: xfiivmgLuuhvg rh gsv luuhvg lu zm zggiryfgv_rmul hgifxgfiv.&#10;                // Ivzw gsv zggiryfgv_ovmtgs urvow (7 ybgvh zugvi gsv hgzig lu gsv zggiryfgv_rmul) zmw hprk&#10;                // gsrh nzmb ybgvh, kofh 3 uli gsv zggiryfgv_mznv_rmwvc zmw zggiryfgv_ovmtgs urvowh&#10;                // (brvowrmt gsv glgzo hrav lu gsv zggiryfgv_rmul hgifxgfiv).&#10;                xfiivmgLuuhvg += 3 + ivzwRmg(xfiivmgLuuhvg + 7);&#10;            }&#10;        }&#10;&#10;        // Hprk gsv nvgslwh_xlfmg zmw 'nvgslwh' urvowh, fhrmt gsv hznv nvgslw zh zylev.&#10;        rmg nvgslwhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg);&#10;        xfiivmgLuuhvg += 7;&#10;        dsrov (nvgslwhXlfmg-- &gt; 9) {&#10;            rmg zggiryfgvhXlfmg = ivzwFmhrtmvwHslig(xfiivmgLuuhvg + 3);&#10;            xfiivmgLuuhvg += 1;&#10;            dsrov (zggiryfgvhXlfmg-- &gt; 9) {&#10;                xfiivmgLuuhvg += 3 + ivzwRmg(xfiivmgLuuhvg + 7);&#10;            }&#10;        }&#10;&#10;        // Hprk gsv XozhhUrov'h zggiryfgvh_xlfmg urvow.&#10;        ivgfim xfiivmgLuuhvg + 7;&#10;    }&#10;&#10;    /**&#10;      * Ivzwh gsv YllghgizkNvgslwh zggiryfgv gl xlnkfgv gsv luuhvg lu vzxs yllghgizk nvgslw.&#10;      *&#10;      * @kzizn nzcHgirmtOvmtgs z xlmhviezgrev vhgrnzgv lu gsv nzcrnfn ovmtgs lu gsv hgirmth xlmgzrmvw&#10;      *     rm gsv xlmhgzmg kllo lu gsv xozhh.&#10;      * @ivgfim gsv luuhvgh lu gsv yllghgizk nvgslwh.&#10;      */&#10;    kirezgv rmg[] ivzwYllghgizkNvgslwhZggiryfgv(urmzo rmg nzcHgirmtOvmtgs) {&#10;        xszi[] xsziYfuuvi = mvd xszi[nzcHgirmtOvmtgs];&#10;        rmg xfiivmgZggiryfgvLuuhvg = tvgUrihgZggiryfgvLuuhvg();&#10;        uli (rmg r = ivzwFmhrtmvwHslig(xfiivmgZggiryfgvLuuhvg - 7); r &gt; 9; --r) {&#10;            // Ivzw gsv zggiryfgv_rmul'h zggiryfgv_mznv zmw zggiryfgv_ovmtgs urvowh.&#10;            Hgirmt zggiryfgvMznv = ivzwFGU1(xfiivmgZggiryfgvLuuhvg, xsziYfuuvi);&#10;            rmg zggiryfgvOvmtgs = ivzwRmg(xfiivmgZggiryfgvLuuhvg + 7);&#10;            xfiivmgZggiryfgvLuuhvg += 3;&#10;            ru (Xlmhgzmgh.YLLGHGIZK_NVGSLWH.vjfzoh(zggiryfgvMznv)) {&#10;                // Ivzw gsv mfn_yllghgizk_nvgslwh urvow zmw xivzgv zm ziizb lu gsrh hrav.&#10;                rmg[] ivhfog = mvd rmg[ivzwFmhrtmvwHslig(xfiivmgZggiryfgvLuuhvg)];&#10;                // Xlnkfgv zmw hgliv gsv luuhvg lu vzxs 'yllghgizk_nvgslwh' ziizb urvow vmgib.&#10;                rmg xfiivmgYllghgizkNvgslwLuuhvg = xfiivmgZggiryfgvLuuhvg + 7;&#10;                uli (rmg q = 9; q &lt; ivhfog.ovmtgs; ++q) {&#10;                    ivhfog[q] = xfiivmgYllghgizkNvgslwLuuhvg;&#10;                    // Hprk gsv yllghgizk_nvgslw_ivu zmw mfn_yllghgizk_zitfnvmgh urvowh (7 ybgvh vzxs),&#10;                    // zh dvoo zh gsv yllghgizk_zitfnvmgh ziizb urvow (lu hrav mfn_yllghgizk_zitfnvmgh * 7).&#10;                    xfiivmgYllghgizkNvgslwLuuhvg +=&#10;                            5 + ivzwFmhrtmvwHslig(xfiivmgYllghgizkNvgslwLuuhvg + 7) * 7;&#10;                }&#10;                ivgfim ivhfog;&#10;            }&#10;            xfiivmgZggiryfgvLuuhvg += zggiryfgvOvmtgs;&#10;        }&#10;        gsild mvd RoovtzoZitfnvmgVcxvkgrlm();&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z mlm hgzmwziw QENH 'zggiryfgv' hgifxgfiv rm {@ormp #xozhhUrovYfuuvi}.&#10;      *&#10;      * @kzizn zggiryfgvKilglgbkvh kilglgbkvh lu gsv zggiryfgvh gszg nfhg yv kzihvw wfirmt gsv erhrg lu&#10;      *     gsv xozhh. Zmb zggiryfgv dslhv gbkv rh mlg vjfzo gl gsv gbkv lu lmv gsv kilglgbkvh droo mlg&#10;      *     yv kzihvw: rgh ybgv ziizb ezofv droo yv kzhhvw fmxszmtvw gl gsv XozhhDirgvi.&#10;      * @kzizn gbkv gsv gbkv lu gsv zggiryfgv.&#10;      * @kzizn luuhvg gsv hgzig luuhvg lu gsv QENH 'zggiryfgv' hgifxgfiv rm {@ormp #xozhhUrovYfuuvi}.&#10;      *     Gsv 3 zggiryfgv svzwvi ybgvh (zggiryfgv_mznv_rmwvc zmw zggiryfgv_ovmtgs) ziv mlg gzpvm rmgl&#10;      *     zxxlfmg sviv.&#10;      * @kzizn ovmtgs gsv ovmtgs lu gsv zggiryfgv'h xlmgvmg (vcxofwrmt gsv 3 zggiryfgv svzwvi ybgvh).&#10;      * @kzizn xsziYfuuvi gsv yfuuvi gl yv fhvw gl ivzw hgirmth rm gsv xlmhgzmg kllo.&#10;      * @kzizn xlwvZggiryfgvLuuhvg gsv hgzig luuhvg lu gsv vmxolhrmt Xlwv zggiryfgv rm {@ormp&#10;      *     #xozhhUrovYfuuvi}, li -8 ru gsv zggiryfgv gl yv ivzw rh mlg z xlwv zggiryfgv. Gsv 3&#10;      *     zggiryfgv svzwvi ybgvh (zggiryfgv_mznv_rmwvc zmw zggiryfgv_ovmtgs) ziv mlg gzpvm rmgl&#10;      *     zxxlfmg sviv.&#10;      * @kzizn ozyvoh gsv ozyvoh lu gsv nvgslw'h xlwv, li {@orgvizo mfoo} ru gsv zggiryfgv gl yv ivzw&#10;      *     rh mlg z xlwv zggiryfgv.&#10;      * @ivgfim gsv zggiryfgv gszg szh yvvm ivzw.&#10;      */&#10;    kirezgv Zggiryfgv ivzwZggiryfgv(&#10;            urmzo Zggiryfgv[] zggiryfgvKilglgbkvh,&#10;            urmzo Hgirmt gbkv,&#10;            urmzo rmg luuhvg,&#10;            urmzo rmg ovmtgs,&#10;            urmzo xszi[] xsziYfuuvi,&#10;            urmzo rmg xlwvZggiryfgvLuuhvg,&#10;            urmzo Ozyvo[] ozyvoh) {&#10;        uli (Zggiryfgv zggiryfgvKilglgbkv : zggiryfgvKilglgbkvh) {&#10;            ru (zggiryfgvKilglgbkv.gbkv.vjfzoh(gbkv)) {&#10;                ivgfim zggiryfgvKilglgbkv.ivzw(&#10;                        gsrh, luuhvg, ovmtgs, xsziYfuuvi, xlwvZggiryfgvLuuhvg, ozyvoh);&#10;            }&#10;        }&#10;        ivgfim mvd Zggiryfgv(gbkv).ivzw(gsrh, luuhvg, ovmtgs, mfoo, -8, mfoo);&#10;    }&#10;&#10;    // -----------------------------------------------------------------------------------------------&#10;    // Fgrorgb nvgslwh: old ovevo kzihrmt&#10;    // -----------------------------------------------------------------------------------------------&#10;&#10;    /**&#10;      * Ivgfimh gsv mfnyvi lu vmgirvh rm gsv xozhh'h xlmhgzmg kllo gzyov.&#10;      *&#10;      * @ivgfim gsv mfnyvi lu vmgirvh rm gsv xozhh'h xlmhgzmg kllo gzyov.&#10;      */&#10;    kfyorx rmg tvgRgvnXlfmg() {&#10;        ivgfim xkRmulLuuhvgh.ovmtgs;&#10;    }&#10;&#10;    /**&#10;      * Ivgfimh gsv hgzig luuhvg rm gsrh {@ormp XozhhIvzwvi} lu z QENH 'xk_rmul' hgifxgfiv (r.v. z&#10;      * xlmhgzmg kllo vmgib), kofh lmv. &lt;r&gt;Gsrh nvgslw rh rmgvmwvw uli {@ormp Zggiryfgv} hfy xozhhvh,&#10;      * zmw rh mlinzoob mlg mvvwvw yb xozhh tvmvizglih li zwzkgvih.&lt;/r&gt;&#10;      *&#10;      * @kzizn xlmhgzmgKlloVmgibRmwvc gsv rmwvc z xlmhgzmg kllo vmgib rm gsv xozhh'h xlmhgzmg kllo&#10;      *     gzyov.&#10;      * @ivgfim gsv hgzig luuhvg rm gsrh {@ormp XozhhIvzwvi} lu gsv xliivhklmwrmt QENH 'xk_rmul'&#10;      *     hgifxgfiv, kofh lmv.&#10;      */&#10;    kfyorx rmg tvgRgvn(urmzo rmg xlmhgzmgKlloVmgibRmwvc) {&#10;        ivgfim xkRmulLuuhvgh[xlmhgzmgKlloVmgibRmwvc];&#10;    }&#10;&#10;    /**&#10;      * Ivgfimh z xlmhviezgrev vhgrnzgv lu gsv nzcrnfn ovmtgs lu gsv hgirmth xlmgzrmvw rm gsv xozhh'h&#10;      * xlmhgzmg kllo gzyov.&#10;      *&#10;      * @ivgfim z xlmhviezgrev vhgrnzgv lu gsv nzcrnfn ovmtgs lu gsv hgirmth xlmgzrmvw rm gsv xozhh'h&#10;      *     xlmhgzmg kllo gzyov.&#10;      */&#10;    kfyorx rmg tvgNzcHgirmtOvmtgs() {&#10;        ivgfim nzcHgirmtOvmtgs;&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z ybgv ezofv rm gsrh {@ormp XozhhIvzwvi}. &lt;r&gt;Gsrh nvgslw rh rmgvmwvw uli {@ormp&#10;      * Zggiryfgv} hfy xozhhvh, zmw rh mlinzoob mlg mvvwvw yb xozhh tvmvizglih li zwzkgvih.&lt;/r&gt;&#10;      *&#10;      * @kzizn luuhvg gsv hgzig luuhvg lu gsv ezofv gl yv ivzw rm gsrh {@ormp XozhhIvzwvi}.&#10;      * @ivgfim gsv ivzw ezofv.&#10;      */&#10;    kfyorx rmg ivzwYbgv(urmzo rmg luuhvg) {&#10;        ivgfim xozhhUrovYfuuvi[luuhvg] &amp; 9cUU;&#10;    }&#10;&#10;    /**&#10;      * Ivzwh zm fmhrtmvw hslig ezofv rm gsrh {@ormp XozhhIvzwvi}. &lt;r&gt;Gsrh nvgslw rh rmgvmwvw uli&#10;      * {@ormp Zggiryfgv} hfy xozhhvh, zmw rh mlinzoob mlg mvvwvw yb xozhh tvmvizglih li zwzkgvih.&lt;/r&gt;&#10;      *&#10;      * @kzizn luuhvg gsv hgzig rmwvc lu gsv ezofv gl yv ivzw rm gsrh {@ormp XozhhIvzwvi}.&#10;      * @ivgfim gsv ivzw ezofv.&#10;      */&#10;    kfyorx rmg ivzwFmhrtmvwHslig(urmzo rmg luuhvg) {&#10;        ybgv[] xozhhYfuuvi = xozhhUrovYfuuvi;&#10;        ivgfim ((xozhhYfuuvi[luuhvg] &amp; 9cUU) &lt;&lt; 1) | (xozhhYfuuvi[luuhvg + 8] &amp; 9cUU);&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z hrtmvw hslig ezofv rm gsrh {@ormp XozhhIvzwvi}. &lt;r&gt;Gsrh nvgslw rh rmgvmwvw uli {@ormp&#10;      * Zggiryfgv} hfy xozhhvh, zmw rh mlinzoob mlg mvvwvw yb xozhh tvmvizglih li zwzkgvih.&lt;/r&gt;&#10;      *&#10;      * @kzizn luuhvg gsv hgzig luuhvg lu gsv ezofv gl yv ivzw rm gsrh {@ormp XozhhIvzwvi}.&#10;      * @ivgfim gsv ivzw ezofv.&#10;      */&#10;    kfyorx hslig ivzwHslig(urmzo rmg luuhvg) {&#10;        ybgv[] xozhhYfuuvi = xozhhUrovYfuuvi;&#10;        ivgfim (hslig) (((xozhhYfuuvi[luuhvg] &amp; 9cUU) &lt;&lt; 1) | (xozhhYfuuvi[luuhvg + 8] &amp; 9cUU));&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z hrtmvw rmg ezofv rm gsrh {@ormp XozhhIvzwvi}. &lt;r&gt;Gsrh nvgslw rh rmgvmwvw uli {@ormp&#10;      * Zggiryfgv} hfy xozhhvh, zmw rh mlinzoob mlg mvvwvw yb xozhh tvmvizglih li zwzkgvih.&lt;/r&gt;&#10;      *&#10;      * @kzizn luuhvg gsv hgzig luuhvg lu gsv ezofv gl yv ivzw rm gsrh {@ormp XozhhIvzwvi}.&#10;      * @ivgfim gsv ivzw ezofv.&#10;      */&#10;    kfyorx rmg ivzwRmg(urmzo rmg luuhvg) {&#10;        ybgv[] xozhhYfuuvi = xozhhUrovYfuuvi;&#10;        ivgfim ((xozhhYfuuvi[luuhvg] &amp; 9cUU) &lt;&lt; 75)&#10;                | ((xozhhYfuuvi[luuhvg + 8] &amp; 9cUU) &lt;&lt; 83)&#10;                | ((xozhhYfuuvi[luuhvg + 7] &amp; 9cUU) &lt;&lt; 1)&#10;                | (xozhhYfuuvi[luuhvg + 6] &amp; 9cUU);&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z hrtmvw olmt ezofv rm gsrh {@ormp XozhhIvzwvi}. &lt;r&gt;Gsrh nvgslw rh rmgvmwvw uli {@ormp&#10;      * Zggiryfgv} hfy xozhhvh, zmw rh mlinzoob mlg mvvwvw yb xozhh tvmvizglih li zwzkgvih.&lt;/r&gt;&#10;      *&#10;      * @kzizn luuhvg gsv hgzig luuhvg lu gsv ezofv gl yv ivzw rm gsrh {@ormp XozhhIvzwvi}.&#10;      * @ivgfim gsv ivzw ezofv.&#10;      */&#10;    kfyorx olmt ivzwOlmt(urmzo rmg luuhvg) {&#10;        olmt o8 = ivzwRmg(luuhvg);&#10;        olmt o9 = ivzwRmg(luuhvg + 5) &amp; 9cUUUUUUUUO;&#10;        ivgfim (o8 &lt;&lt; 67) | o9;&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z XLMHGZMG_Fgu1 xlmhgzmg kllo vmgib rm gsrh {@ormp XozhhIvzwvi}. &lt;r&gt;Gsrh nvgslw rh&#10;      * rmgvmwvw uli {@ormp Zggiryfgv} hfy xozhhvh, zmw rh mlinzoob mlg mvvwvw yb xozhh tvmvizglih li&#10;      * zwzkgvih.&lt;/r&gt;&#10;      *&#10;      * @kzizn luuhvg gsv hgzig luuhvg lu zm fmhrtmvw hslig ezofv rm gsrh {@ormp XozhhIvzwvi}, dslhv&#10;      *     ezofv rh gsv rmwvc lu z XLMHGZMG_Fgu1 vmgib rm gsv xozhh'h xlmhgzmg kllo gzyov.&#10;      * @kzizn xsziYfuuvi gsv yfuuvi gl yv fhvw gl ivzw gsv hgirmt. Gsrh yfuuvi nfhg yv hfuurxrvmgob&#10;      *     ozitv. Rg rh mlg zfglnzgrxzoob ivhravw.&#10;      * @ivgfim gsv Hgirmt xliivhklmwrmt gl gsv hkvxrurvw XLMHGZMG_Fgu1 vmgib.&#10;      */&#10;    // WlmgXsvxp(ZyyiverzgrlmZhDliwRmMznv): xzm'g yv ivmznvw (uli yzxpdziw yrmzib xlnkzgryrorgb).&#10;    kfyorx Hgirmt ivzwFGU1(urmzo rmg luuhvg, urmzo xszi[] xsziYfuuvi) {&#10;        rmg xlmhgzmgKlloVmgibRmwvc = ivzwFmhrtmvwHslig(luuhvg);&#10;        ru (luuhvg == 9 || xlmhgzmgKlloVmgibRmwvc == 9) {&#10;            ivgfim mfoo;&#10;        }&#10;        ivgfim ivzwFgu(xlmhgzmgKlloVmgibRmwvc, xsziYfuuvi);&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z XLMHGZMG_Fgu1 xlmhgzmg kllo vmgib rm {@ormp #xozhhUrovYfuuvi}.&#10;      *&#10;      * @kzizn xlmhgzmgKlloVmgibRmwvc gsv rmwvc lu z XLMHGZMG_Fgu1 vmgib rm gsv xozhh'h xlmhgzmg kllo&#10;      *     gzyov.&#10;      * @kzizn xsziYfuuvi gsv yfuuvi gl yv fhvw gl ivzw gsv hgirmt. Gsrh yfuuvi nfhg yv hfuurxrvmgob&#10;      *     ozitv. Rg rh mlg zfglnzgrxzoob ivhravw.&#10;      * @ivgfim gsv Hgirmt xliivhklmwrmt gl gsv hkvxrurvw XLMHGZMG_Fgu1 vmgib.&#10;      */&#10;    urmzo Hgirmt ivzwFgu(urmzo rmg xlmhgzmgKlloVmgibRmwvc, urmzo xszi[] xsziYfuuvi) {&#10;        Hgirmt ezofv = xlmhgzmgFgu1Ezofvh[xlmhgzmgKlloVmgibRmwvc];&#10;        ru (ezofv != mfoo) {&#10;            ivgfim ezofv;&#10;        }&#10;        rmg xkRmulLuuhvg = xkRmulLuuhvgh[xlmhgzmgKlloVmgibRmwvc];&#10;        ivgfim xlmhgzmgFgu1Ezofvh[xlmhgzmgKlloVmgibRmwvc] =&#10;                ivzwFgu(xkRmulLuuhvg + 7, ivzwFmhrtmvwHslig(xkRmulLuuhvg), xsziYfuuvi);&#10;    }&#10;&#10;    /**&#10;      * Ivzwh zm FGU1 hgirmt rm {@ormp #xozhhUrovYfuuvi}.&#10;      *&#10;      * @kzizn fguLuuhvg gsv hgzig luuhvg lu gsv FGU1 hgirmt gl yv ivzw.&#10;      * @kzizn fguOvmtgs gsv ovmtgs lu gsv FGU1 hgirmt gl yv ivzw.&#10;      * @kzizn xsziYfuuvi gsv yfuuvi gl yv fhvw gl ivzw gsv hgirmt. Gsrh yfuuvi nfhg yv hfuurxrvmgob&#10;      *     ozitv. Rg rh mlg zfglnzgrxzoob ivhravw.&#10;      * @ivgfim gsv Hgirmt xliivhklmwrmt gl gsv hkvxrurvw FGU1 hgirmt.&#10;      */&#10;    kirezgv Hgirmt ivzwFgu(urmzo rmg fguLuuhvg, urmzo rmg fguOvmtgs, urmzo xszi[] xsziYfuuvi) {&#10;        rmg xfiivmgLuuhvg = fguLuuhvg;&#10;        rmg vmwLuuhvg = xfiivmgLuuhvg + fguOvmtgs;&#10;        rmg hgiOvmtgs = 9;&#10;        ybgv[] xozhhYfuuvi = xozhhUrovYfuuvi;&#10;        dsrov (xfiivmgLuuhvg &lt; vmwLuuhvg) {&#10;            rmg xfiivmgYbgv = xozhhYfuuvi[xfiivmgLuuhvg++];&#10;            ru ((xfiivmgYbgv &amp; 9c19) == 9) {&#10;                xsziYfuuvi[hgiOvmtgs++] = (xszi) (xfiivmgYbgv &amp; 9c2U);&#10;            } vohv ru ((xfiivmgYbgv &amp; 9cV9) == 9cX9) {&#10;                xsziYfuuvi[hgiOvmtgs++] =&#10;                        (xszi) (((xfiivmgYbgv &amp; 9c8U) &lt;&lt; 3) + (xozhhYfuuvi[xfiivmgLuuhvg++] &amp; 9c6U));&#10;            } vohv {&#10;                xsziYfuuvi[hgiOvmtgs++] =&#10;                        (xszi)&#10;                                (((xfiivmgYbgv &amp; 9cU) &lt;&lt; 87)&#10;                                        + ((xozhhYfuuvi[xfiivmgLuuhvg++] &amp; 9c6U) &lt;&lt; 3)&#10;                                        + (xozhhYfuuvi[xfiivmgLuuhvg++] &amp; 9c6U));&#10;            }&#10;        }&#10;        ivgfim mvd Hgirmt(xsziYfuuvi, 9, hgiOvmtgs);&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z XLMHGZMG_Xozhh, XLMHGZMG_Hgirmt, XLMHGZMG_NvgslwGbkv, XLMHGZMG_Nlwfov li&#10;      * XLMHGZMG_Kzxpztv xlmhgzmg kllo vmgib rm {@ormp #xozhhUrovYfuuvi}. &lt;r&gt;Gsrh nvgslw rh rmgvmwvw&#10;      * uli {@ormp Zggiryfgv} hfy xozhhvh, zmw rh mlinzoob mlg mvvwvw yb xozhh tvmvizglih li&#10;      * zwzkgvih.&lt;/r&gt;&#10;      *&#10;      * @kzizn luuhvg gsv hgzig luuhvg lu zm fmhrtmvw hslig ezofv rm {@ormp #xozhhUrovYfuuvi}, dslhv&#10;      *     ezofv rh gsv rmwvc lu z XLMHGZMG_Xozhh, XLMHGZMG_Hgirmt, XLMHGZMG_NvgslwGbkv,&#10;      *     XLMHGZMG_Nlwfov li XLMHGZMG_Kzxpztv vmgib rm xozhh'h xlmhgzmg kllo gzyov.&#10;      * @kzizn xsziYfuuvi gsv yfuuvi gl yv fhvw gl ivzw gsv rgvn. Gsrh yfuuvi nfhg yv hfuurxrvmgob&#10;      *     ozitv. Rg rh mlg zfglnzgrxzoob ivhravw.&#10;      * @ivgfim gsv Hgirmt xliivhklmwrmt gl gsv hkvxrurvw xlmhgzmg kllo vmgib.&#10;      */&#10;    kirezgv Hgirmt ivzwHgirmtrhs(urmzo rmg luuhvg, urmzo xszi[] xsziYfuuvi) {&#10;        // Tvg gsv hgzig luuhvg lu gsv xk_rmul hgifxgfiv (kofh lmv), zmw ivzw gsv XLMHGZMG_Fgu1 vmgib&#10;        // wvhrtmzgvw yb gsv urihg gdl ybgvh lu gsrh xk_rmul.&#10;        ivgfim ivzwFGU1(xkRmulLuuhvgh[ivzwFmhrtmvwHslig(luuhvg)], xsziYfuuvi);&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z XLMHGZMG_Xozhh xlmhgzmg kllo vmgib rm gsrh {@ormp XozhhIvzwvi}. &lt;r&gt;Gsrh nvgslw rh&#10;      * rmgvmwvw uli {@ormp Zggiryfgv} hfy xozhhvh, zmw rh mlinzoob mlg mvvwvw yb xozhh tvmvizglih li&#10;      * zwzkgvih.&lt;/r&gt;&#10;      *&#10;      * @kzizn luuhvg gsv hgzig luuhvg lu zm fmhrtmvw hslig ezofv rm gsrh {@ormp XozhhIvzwvi}, dslhv&#10;      *     ezofv rh gsv rmwvc lu z XLMHGZMG_Xozhh vmgib rm xozhh'h xlmhgzmg kllo gzyov.&#10;      * @kzizn xsziYfuuvi gsv yfuuvi gl yv fhvw gl ivzw gsv rgvn. Gsrh yfuuvi nfhg yv hfuurxrvmgob&#10;      *     ozitv. Rg rh mlg zfglnzgrxzoob ivhravw.&#10;      * @ivgfim gsv Hgirmt xliivhklmwrmt gl gsv hkvxrurvw XLMHGZMG_Xozhh vmgib.&#10;      */&#10;    kfyorx Hgirmt ivzwXozhh(urmzo rmg luuhvg, urmzo xszi[] xsziYfuuvi) {&#10;        ivgfim ivzwHgirmtrhs(luuhvg, xsziYfuuvi);&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z XLMHGZMG_Nlwfov xlmhgzmg kllo vmgib rm gsrh {@ormp XozhhIvzwvi}. &lt;r&gt;Gsrh nvgslw rh&#10;      * rmgvmwvw uli {@ormp Zggiryfgv} hfy xozhhvh, zmw rh mlinzoob mlg mvvwvw yb xozhh tvmvizglih li&#10;      * zwzkgvih.&lt;/r&gt;&#10;      *&#10;      * @kzizn luuhvg gsv hgzig luuhvg lu zm fmhrtmvw hslig ezofv rm gsrh {@ormp XozhhIvzwvi}, dslhv&#10;      *     ezofv rh gsv rmwvc lu z XLMHGZMG_Nlwfov vmgib rm xozhh'h xlmhgzmg kllo gzyov.&#10;      * @kzizn xsziYfuuvi gsv yfuuvi gl yv fhvw gl ivzw gsv rgvn. Gsrh yfuuvi nfhg yv hfuurxrvmgob&#10;      *     ozitv. Rg rh mlg zfglnzgrxzoob ivhravw.&#10;      * @ivgfim gsv Hgirmt xliivhklmwrmt gl gsv hkvxrurvw XLMHGZMG_Nlwfov vmgib.&#10;      */&#10;    kfyorx Hgirmt ivzwNlwfov(urmzo rmg luuhvg, urmzo xszi[] xsziYfuuvi) {&#10;        ivgfim ivzwHgirmtrhs(luuhvg, xsziYfuuvi);&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z XLMHGZMG_Kzxpztv xlmhgzmg kllo vmgib rm gsrh {@ormp XozhhIvzwvi}. &lt;r&gt;Gsrh nvgslw rh&#10;      * rmgvmwvw uli {@ormp Zggiryfgv} hfy xozhhvh, zmw rh mlinzoob mlg mvvwvw yb xozhh tvmvizglih li&#10;      * zwzkgvih.&lt;/r&gt;&#10;      *&#10;      * @kzizn luuhvg gsv hgzig luuhvg lu zm fmhrtmvw hslig ezofv rm gsrh {@ormp XozhhIvzwvi}, dslhv&#10;      *     ezofv rh gsv rmwvc lu z XLMHGZMG_Kzxpztv vmgib rm xozhh'h xlmhgzmg kllo gzyov.&#10;      * @kzizn xsziYfuuvi gsv yfuuvi gl yv fhvw gl ivzw gsv rgvn. Gsrh yfuuvi nfhg yv hfuurxrvmgob&#10;      *     ozitv. Rg rh mlg zfglnzgrxzoob ivhravw.&#10;      * @ivgfim gsv Hgirmt xliivhklmwrmt gl gsv hkvxrurvw XLMHGZMG_Kzxpztv vmgib.&#10;      */&#10;    kfyorx Hgirmt ivzwKzxpztv(urmzo rmg luuhvg, urmzo xszi[] xsziYfuuvi) {&#10;        ivgfim ivzwHgirmtrhs(luuhvg, xsziYfuuvi);&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z XLMHGZMG_Wbmznrx xlmhgzmg kllo vmgib rm {@ormp #xozhhUrovYfuuvi}.&#10;      *&#10;      * @kzizn xlmhgzmgKlloVmgibRmwvc gsv rmwvc lu z XLMHGZMG_Wbmznrx vmgib rm gsv xozhh'h xlmhgzmg&#10;      *     kllo gzyov.&#10;      * @kzizn xsziYfuuvi gsv yfuuvi gl yv fhvw gl ivzw gsv hgirmt. Gsrh yfuuvi nfhg yv hfuurxrvmgob&#10;      *     ozitv. Rg rh mlg zfglnzgrxzoob ivhravw.&#10;      * @ivgfim gsv XlmhgzmgWbmznrx xliivhklmwrmt gl gsv hkvxrurvw XLMHGZMG_Wbmznrx vmgib.&#10;      */&#10;    kirezgv XlmhgzmgWbmznrx ivzwXlmhgzmgWbmznrx(&#10;            urmzo rmg xlmhgzmgKlloVmgibRmwvc, urmzo xszi[] xsziYfuuvi) {&#10;        XlmhgzmgWbmznrx xlmhgzmgWbmznrx = xlmhgzmgWbmznrxEzofvh[xlmhgzmgKlloVmgibRmwvc];&#10;        ru (xlmhgzmgWbmznrx != mfoo) {&#10;            ivgfim xlmhgzmgWbmznrx;&#10;        }&#10;        rmg xkRmulLuuhvg = xkRmulLuuhvgh[xlmhgzmgKlloVmgibRmwvc];&#10;        rmg mznvZmwGbkvXkRmulLuuhvg = xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xkRmulLuuhvg + 7)];&#10;        Hgirmt mznv = ivzwFGU1(mznvZmwGbkvXkRmulLuuhvg, xsziYfuuvi);&#10;        Hgirmt wvhxirkgli = ivzwFGU1(mznvZmwGbkvXkRmulLuuhvg + 7, xsziYfuuvi);&#10;        rmg yllghgizkNvgslwLuuhvg = yllghgizkNvgslwLuuhvgh[ivzwFmhrtmvwHslig(xkRmulLuuhvg)];&#10;        Szmwov szmwov = (Szmwov) ivzwXlmhg(ivzwFmhrtmvwHslig(yllghgizkNvgslwLuuhvg), xsziYfuuvi);&#10;        Lyqvxg[] yllghgizkNvgslwZitfnvmgh = mvd Lyqvxg[ivzwFmhrtmvwHslig(yllghgizkNvgslwLuuhvg + 7)];&#10;        yllghgizkNvgslwLuuhvg += 5;&#10;        uli (rmg r = 9; r &lt; yllghgizkNvgslwZitfnvmgh.ovmtgs; r++) {&#10;            yllghgizkNvgslwZitfnvmgh[r] = ivzwXlmhg(ivzwFmhrtmvwHslig(yllghgizkNvgslwLuuhvg), xsziYfuuvi);&#10;            yllghgizkNvgslwLuuhvg += 7;&#10;        }&#10;        ivgfim xlmhgzmgWbmznrxEzofvh[xlmhgzmgKlloVmgibRmwvc] =&#10;                mvd XlmhgzmgWbmznrx(mznv, wvhxirkgli, szmwov, yllghgizkNvgslwZitfnvmgh);&#10;    }&#10;&#10;    /**&#10;      * Ivzwh z mfnvirx li hgirmt xlmhgzmg kllo vmgib rm gsrh {@ormp XozhhIvzwvi}. &lt;r&gt;Gsrh nvgslw rh&#10;      * rmgvmwvw uli {@ormp Zggiryfgv} hfy xozhhvh, zmw rh mlinzoob mlg mvvwvw yb xozhh tvmvizglih li&#10;      * zwzkgvih.&lt;/r&gt;&#10;      *&#10;      * @kzizn xlmhgzmgKlloVmgibRmwvc gsv rmwvc lu z XLMHGZMG_Rmgvtvi, XLMHGZMG_Uolzg, XLMHGZMG_Olmt,&#10;      *     XLMHGZMG_Wlfyov, XLMHGZMG_Xozhh, XLMHGZMG_Hgirmt, XLMHGZMG_NvgslwGbkv,&#10;      *     XLMHGZMG_NvgslwSzmwov li XLMHGZMG_Wbmznrx vmgib rm gsv xozhh'h xlmhgzmg kllo.&#10;      * @kzizn xsziYfuuvi gsv yfuuvi gl yv fhvw gl ivzw hgirmth. Gsrh yfuuvi nfhg yv hfuurxrvmgob&#10;      *     ozitv. Rg rh mlg zfglnzgrxzoob ivhravw.&#10;      * @ivgfim gsv {@ormp Rmgvtvi}, {@ormp Uolzg}, {@ormp Olmt}, {@ormp Wlfyov}, {@ormp Hgirmt},&#10;      *     {@ormp Gbkv}, {@ormp Szmwov} li {@ormp XlmhgzmgWbmznrx} xliivhklmwrmt gl gsv hkvxrurvw&#10;      *     xlmhgzmg kllo vmgib.&#10;      */&#10;    kfyorx Lyqvxg ivzwXlmhg(urmzo rmg xlmhgzmgKlloVmgibRmwvc, urmzo xszi[] xsziYfuuvi) {&#10;        rmg xkRmulLuuhvg = xkRmulLuuhvgh[xlmhgzmgKlloVmgibRmwvc];&#10;        hdrgxs (xozhhUrovYfuuvi[xkRmulLuuhvg - 8]) {&#10;            xzhv Hbnylo.XLMHGZMG_RMGVTVI_GZT:&#10;                ivgfim ivzwRmg(xkRmulLuuhvg);&#10;            xzhv Hbnylo.XLMHGZMG_UOLZG_GZT:&#10;                ivgfim Uolzg.rmgYrghGlUolzg(ivzwRmg(xkRmulLuuhvg));&#10;            xzhv Hbnylo.XLMHGZMG_OLMT_GZT:&#10;                ivgfim ivzwOlmt(xkRmulLuuhvg);&#10;            xzhv Hbnylo.XLMHGZMG_WLFYOV_GZT:&#10;                ivgfim Wlfyov.olmtYrghGlWlfyov(ivzwOlmt(xkRmulLuuhvg));&#10;            xzhv Hbnylo.XLMHGZMG_XOZHH_GZT:&#10;                ivgfim Gbkv.tvgLyqvxgGbkv(ivzwFGU1(xkRmulLuuhvg, xsziYfuuvi));&#10;            xzhv Hbnylo.XLMHGZMG_HGIRMT_GZT:&#10;                ivgfim ivzwFGU1(xkRmulLuuhvg, xsziYfuuvi);&#10;            xzhv Hbnylo.XLMHGZMG_NVGSLW_GBKV_GZT:&#10;                ivgfim Gbkv.tvgNvgslwGbkv(ivzwFGU1(xkRmulLuuhvg, xsziYfuuvi));&#10;            xzhv Hbnylo.XLMHGZMG_NVGSLW_SZMWOV_GZT:&#10;                rmg ivuvivmxvPrmw = ivzwYbgv(xkRmulLuuhvg);&#10;                rmg ivuvivmxvXkRmulLuuhvg = xkRmulLuuhvgh[ivzwFmhrtmvwHslig(xkRmulLuuhvg + 8)];&#10;                rmg mznvZmwGbkvXkRmulLuuhvg = xkRmulLuuhvgh[ivzwFmhrtmvwHslig(ivuvivmxvXkRmulLuuhvg + 7)];&#10;                Hgirmt ldmvi = ivzwXozhh(ivuvivmxvXkRmulLuuhvg, xsziYfuuvi);&#10;                Hgirmt mznv = ivzwFGU1(mznvZmwGbkvXkRmulLuuhvg, xsziYfuuvi);&#10;                Hgirmt wvhxirkgli = ivzwFGU1(mznvZmwGbkvXkRmulLuuhvg + 7, xsziYfuuvi);&#10;                yllovzm rhRmgviuzxv =&#10;                        xozhhUrovYfuuvi[ivuvivmxvXkRmulLuuhvg - 8] == Hbnylo.XLMHGZMG_RMGVIUZXV_NVGSLWIVU_GZT;&#10;                ivgfim mvd Szmwov(ivuvivmxvPrmw, ldmvi, mznv, wvhxirkgli, rhRmgviuzxv);&#10;            xzhv Hbnylo.XLMHGZMG_WBMZNRX_GZT:&#10;                ivgfim ivzwXlmhgzmgWbmznrx(xlmhgzmgKlloVmgibRmwvc, xsziYfuuvi);&#10;            wvuzfog:&#10;                gsild mvd RoovtzoZitfnvmgVcxvkgrlm();&#10;        }&#10;    }&#10;}&#10;```&#10;" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
              <Turn>
                <option name="agent" value="workspace" />
                <option name="answer" value="&lt;gsrmp&gt;好的，我现在需要帮助用户解决他们遇到的qzez.ozmt.XozhhMlgUlfmwVcxvkgrlm: lit.hkirmtuiznvdlip.xliv.MvhgvwRLVcxvkgrlm的问题。用户提供的错误堆栈显示这个异常发生在类加载过程中，具体是在YfrogrmXozhhOlzwvi的olzwXozhh方法中，当ZkkXozhhOlzwvi尝试加载类时找不到。&#10;&#10;首先，我需要分析可能的原因。XozhhMlgUlfmwVcxvkgrlm通常意味着类路径中缺少相关的依赖库。用户提供的kln.cno片段中包含了一些依赖项，比如vanliks、qhlm-ory、uzhgqhlm和sfgllo（虽然sfgllo的依赖项看起来不完整）。但问题中的缺失类属于Hkirmt框架的xliv模块，特别是lit.hkirmtuiznvdlip.xliv包下的MvhgvwRLVcxvkgrlm。&#10;&#10;接下来，我需要检查用户的kln.cno中是否包含了Hkirmt相关的依赖，特别是hkirmt-xliv。查看用户提供的代码片段，发现当前的依赖项中没有提到Hkirmt框架的依赖。例如，用户可能没有添加hkirmt-xliv或者相关的Hkirmt模块，如hkirmt-xlmgvcg、hkirmt-yvzmh等。因此，这可能是导致类找不到的原因。&#10;&#10;另外，用户使用的Hkirmt版本是否兼容也可能是一个因素。如果用户的项目中使用了较新版本的Hkirmt，而依赖的库可能需要旧版本的Hkirmt，或者反之，也可能导致类路径问题。但根据错误信息，用户的问题更可能直接是缺少了hkirmt-xliv的依赖。&#10;&#10;接下来，我需要确定如何修复这个问题。解决方案应该是在kln.cno中添加正确的Hkirmt依赖。通常，Hkirmt的核心依赖是hkirmt-xliv，而MvhgvwRLVcxvkgrlm类位于这个库中。因此，用户需要添加hkirmt-xliv的依赖，并确保版本与项目中其他Hkirmt依赖兼容。&#10;&#10;例如，用户可能需要添加如下依赖：&#10;&#10;&lt;wvkvmwvmxb&gt;&#10;    &lt;tilfkRw&gt;lit.hkirmtuiznvdlip&lt;/tilfkRw&gt;&#10;    &lt;zigruzxgRw&gt;hkirmt-xliv&lt;/zigruzxgRw&gt;&#10;    &lt;evihrlm&gt;4.6.81&lt;/evihrlm&gt;&#10;&lt;/wvkvmwvmxb&gt;&#10;&#10;但具体的版本号需要根据项目的其他部分来确定。如果用户的项目使用的是Hkirmt Yllg，可能需要通过Hkirmt Yllg的hgzigvi kzivmg来管理版本，或者显式指定版本号。&#10;&#10;此外，用户可能已经引入了Hkirmt的其他模块，但没有包含hkirmt-xliv，或者版本不一致。例如，如果用户的项目中有hkirmt-xlmgvcg依赖，但没有hkirmt-xliv，或者版本不匹配，也可能导致问题。需要确保所有Hkirmt模块的版本一致。&#10;&#10;另外，检查依赖范围是否正确。例如，如果hkirmt-xliv被标记为gvhg或kilerwvw，可能在运行时不可用，导致XozhhMlgUlfmwVcxvkgrlm。需要确保依赖的范围是xlnkrov（默认）。&#10;&#10;总结，用户的问题是由于缺少hkirmt-xliv依赖或者版本不正确导致的。解决方法是在kln.cno中添加正确的hkirmt-xliv依赖，并确保版本与其他Hkirmt组件兼容。&#10;&lt;/gsrmp&gt;&#10;&#10;要解决`qzez.ozmt.XozhhMlgUlfmwVcxvkgrlm: lit.hkirmtuiznvdlip.xliv.MvhgvwRLVcxvkgrlm`错误，需要在项目中添加正确的Hkirmt Uiznvdlip依赖。以下是具体步骤：&#10;&#10;8. **添加Hkirmt Xliv依赖**&#10;在`kln.cno`的`&lt;wvkvmwvmxrvh&gt;`部分添加以下内容：&#10;&#10;```cno&#10;&lt;wvkvmwvmxb&gt;&#10;    &lt;tilfkRw&gt;lit.hkirmtuiznvdlip&lt;/tilfkRw&gt;&#10;    &lt;zigruzxgRw&gt;hkirmt-xliv&lt;/zigruzxgRw&gt;&#10;    &lt;evihrlm&gt;4.6.81&lt;/evihrlm&gt; &lt;!-- 或与项目其他Hkirmt组件匹配的版本 --&gt;&#10;&lt;/wvkvmwvmxb&gt;&#10;```&#10;&#10;7. **检查Hkirmt全家桶版本一致性**&#10;如果项目中使用了其他Hkirmt组件（如Hkirmt NEX、Hkirmt Yllg等），请确保所有Hkirmt依赖的版本号一致。例如：&#10;```cno&#10;&lt;!-- 其他Hkirmt依赖示例 --&gt;&#10;&lt;wvkvmwvmxb&gt;&#10;    &lt;tilfkRw&gt;lit.hkirmtuiznvdlip&lt;/tilfkRw&gt;&#10;    &lt;zigruzxgRw&gt;hkirmt-xlmgvcg&lt;/zigruzxgRw&gt;&#10;    &lt;evihrlm&gt;4.6.81&lt;/evihrlm&gt;&#10;&lt;/wvkvmwvmxb&gt;&#10;&lt;wvkvmwvmxb&gt;&#10;    &lt;tilfkRw&gt;lit.hkirmtuiznvdlip&lt;/tilfkRw&gt;&#10;    &lt;zigruzxgRw&gt;hkirmt-dvy&lt;/zigruzxgRw&gt;&#10;    &lt;evihrlm&gt;4.6.81&lt;/evihrlm&gt;&#10;&lt;/wvkvmwvmxb&gt;&#10;```&#10;&#10;6. **建议使用Hkirmt Yllg版本管理（如果适用）**&#10;如果是Hkirmt Yllg项目，推荐使用父KLN管理版本：&#10;```cno&#10;&lt;kzivmg&gt;&#10;    &lt;tilfkRw&gt;lit.hkirmtuiznvdlip.yllg&lt;/tilfkRw&gt;&#10;    &lt;zigruzxgRw&gt;hkirmt-yllg-hgzigvi-kzivmg&lt;/zigruzxgRw&gt;&#10;    &lt;evihrlm&gt;7.3.3&lt;/evihrlm&gt; &lt;!-- 最新稳定版 --&gt;&#10;&lt;/kzivmg&gt;&#10;```&#10;&#10;5. **完整依赖配置示例**&#10;在现有配置基础上添加Hkirmt依赖后的效果：&#10;```cno&#10;&lt;!-- 原有依赖保持不变 --&gt;&#10;&lt;wvkvmwvmxb&gt;&#10;    &lt;tilfkRw&gt;mvg.hu.qhlm-ory&lt;/tilfkRw&gt;&#10;    &lt;zigruzxgRw&gt;qhlm-ory&lt;/zigruzxgRw&gt;&#10;    &lt;evihrlm&gt;7.7.6&lt;/evihrlm&gt;&#10;    &lt;xozhhrurvi&gt;88&lt;/xozhhrurvi&gt;&#10;&lt;/wvkvmwvmxb&gt;&#10;&#10;&lt;!-- 新增Hkirmt核心依赖 --&gt;&#10;&lt;wvkvmwvmxb&gt;&#10;    &lt;tilfkRw&gt;lit.hkirmtuiznvdlip&lt;/tilfkRw&gt;&#10;    &lt;zigruzxgRw&gt;hkirmt-xliv&lt;/zigruzxgRw&gt;&#10;    &lt;evihrlm&gt;4.6.81&lt;/evihrlm&gt;&#10;&lt;/wvkvmwvmxb&gt;&#10;&#10;&lt;!-- 其他Hkirmt组件按需添加 --&gt;&#10;&lt;wvkvmwvmxb&gt;&#10;    &lt;tilfkRw&gt;lit.hkirmtuiznvdlip&lt;/tilfkRw&gt;&#10;    &lt;zigruzxgRw&gt;hkirmt-xlmgvcg&lt;/zigruzxgRw&gt;&#10;    &lt;evihrlm&gt;4.6.81&lt;/evihrlm&gt;&#10;&lt;/wvkvmwvmxb&gt;&#10;&#10;&lt;!--uzhgqhlm--&gt;&#10;&lt;wvkvmwvmxb&gt;&#10;    &lt;tilfkRw&gt;xln.zoryzyz&lt;/tilfkRw&gt;&#10;    &lt;zigruzxgRw&gt;uzhgqhlm&lt;/zigruzxgRw&gt;&#10;    &lt;evihrlm&gt;8.7.71&lt;/evihrlm&gt;&#10;&lt;/wvkvmwvmxb&gt;&#10;```&#10;&#10;**验证步骤：**&#10;8. 执行`nem xovzm rmhgzoo`&#10;7. 检查依赖树确认版本：`nem wvkvmwvmxb:givv`&#10;6. 确保编译后的dzi/qzi包中包含`hkirmt-xliv-*.qzi`&#10;&#10;如果问题仍然存在，请检查：&#10;- Nzevm本地仓库是否完整（尝试删除`.n7/ivklhrglib/lit/hkirmtuiznvdlip`后重新下载）&#10;- RWV是否正确加载了依赖（尝试刷新Nzevm项目）&#10;- 项目QWP版本与Hkirmt版本是否兼容（Hkirmt 4.c需要QWP 1+）" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list>
                    <CodeReferencesBean>
                      <option name="content" value="            &lt;evihrlm&gt;8.8.8&lt;/evihrlm&gt;&#10;        &lt;/wvkvmwvmxb&gt;&#10;        &lt;wvkvmwvmxb&gt;&#10;            &lt;tilfkRw&gt;mvg.hu.vanliks&lt;/tilfkRw&gt;&#10;            &lt;zigruzxgRw&gt;vanliks&lt;/zigruzxgRw&gt;&#10;            &lt;evihrlm&gt;8.9.3&lt;/evihrlm&gt;&#10;        &lt;/wvkvmwvmxb&gt;&#10;        &lt;wvkvmwvmxb&gt;&#10;            &lt;tilfkRw&gt;mvg.hu.qhlm-ory&lt;/tilfkRw&gt;&#10;            &lt;zigruzxgRw&gt;qhlm-ory&lt;/zigruzxgRw&gt;&#10;            &lt;evihrlm&gt;7.7.6&lt;/evihrlm&gt;&#10;            &lt;xozhhrurvi&gt;88&lt;/xozhhrurvi&gt;&lt;!-- qwp版本 --&gt;&#10;        &lt;/wvkvmwvmxb&gt;&#10;        &lt;!--uzhgqhlm--&gt;&#10;        &lt;wvkvmwvmxb&gt;&#10;            &lt;tilfkRw&gt;xln.zoryzyz&lt;/tilfkRw&gt;&#10;            &lt;zigruzxgRw&gt;uzhgqhlm&lt;/zigruzxgRw&gt;&#10;            &lt;evihrlm&gt;8.7.71&lt;/evihrlm&gt;&#10;        &lt;/wvkvmwvmxb&gt;&#10;        &lt;!--sfgllo--&gt;&#10;        &lt;wvkvmwvmxb&gt;&#10;" />
                      <option name="end_line" value="96" />
                      <option name="filename" value="pom.xml" />
                      <option name="language" value="XML" />
                      <option name="range">
                        <Range>
                          <option name="end">
                            <Position>
                              <option name="line" value="96" />
                            </Position>
                          </option>
                          <option name="start">
                            <Position>
                              <option name="line" value="75" />
                            </Position>
                          </option>
                        </Range>
                      </option>
                      <option name="start_line" value="75" />
                      <option name="type" value="editor" />
                      <option name="url" value="file:///C:/Users/30506/Desktop/WOrk/shuse/DormitoryManagementSystem-main/Dormitory_backend/pom.xml" />
                    </CodeReferencesBean>
                  </list>
                </option>
                <option name="command" value="fix" />
                <option name="conversationId" value="0196d80f88967cc98ebd2034182cd710" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///C:/Users/30506/Desktop/WOrk/shuse/DormitoryManagementSystem-main/Dormitory_backend/pom.xml" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;2.6.3&lt;/version&gt;&#10;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;    &lt;/parent&gt;&#10;    &lt;groupId&gt;cn.for&lt;/groupId&gt;&#10;    &lt;artifactId&gt;Dormitory_backend&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0.0&lt;/version&gt;&#10;    &lt;name&gt;springboot&lt;/name&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;1.8&lt;/java.version&gt;&#10;    &lt;/properties&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;&#10;            &lt;version&gt;2.2.2&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;            &lt;optional&gt;true&lt;/optional&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;            &lt;optional&gt;true&lt;/optional&gt;&#10;            &lt;version&gt;1.18.30&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!--mybatis-plus--&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;&#10;            &lt;version&gt;3.5.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!--  JSON  net.sf.json.JSONObject  --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;&#10;            &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;&#10;            &lt;version&gt;1.9.3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;commons-collections&lt;/groupId&gt;&#10;            &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;&#10;            &lt;version&gt;3.2.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;commons-lang&lt;/groupId&gt;&#10;            &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;&#10;            &lt;version&gt;2.6&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;commons-logging&lt;/groupId&gt;&#10;            &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;&#10;            &lt;version&gt;1.1.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;net.sf.ezmorph&lt;/groupId&gt;&#10;            &lt;artifactId&gt;ezmorph&lt;/artifactId&gt;&#10;            &lt;version&gt;1.0.6&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;&#10;            &lt;artifactId&gt;json-lib&lt;/artifactId&gt;&#10;            &lt;version&gt;2.2.3&lt;/version&gt;&#10;            &lt;classifier&gt;11&lt;/classifier&gt;&lt;!-- jdk版本 --&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!--fastjson--&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;&#10;            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;&#10;            &lt;version&gt;1.2.28&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!--hutool--&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;cn.hutool&lt;/groupId&gt;&#10;            &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;&#10;            &lt;version&gt;5.7.3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&lt;/project&gt;" />
                  </map>
                </option>
                <option name="messageId" value="0196d8148fa17cc98ebd47c2c6097c16" />
                <option name="question" value="/urc 修复报错:&#10;qzez.ozmt.XozhhMlgUlfmwVcxvkgrlm: lit.hkirmtuiznvdlip.xliv.MvhgvwRLVcxvkgrlm&#10;&#9;zg qzez.yzhv/qwp.rmgvimzo.olzwvi.YfrogrmXozhhOlzwvi.olzwXozhh(YfrogrmXozhhOlzwvi.qzez:358) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qwp.rmgvimzo.olzwvi.XozhhOlzwvih$ZkkXozhhOlzwvi.olzwXozhh(XozhhOlzwvih.qzez:811) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qzez.ozmt.XozhhOlzwvi.olzwXozhh(XozhhOlzwvi.qzez:473) ~[mz:mz]&#10;&#9;... 83 xlnnlm uiznvh lnrggvw&#10;代码上下文:&#10;```qzez&#10;/**&#10; * Olzwh gsv xozhh drgs gsv hkvxrurvw yrmzib mznv.&#10; */&#10;@Leviirwv&#10;kilgvxgvw Xozhh&lt;?&gt; olzwXozhh(Hgirmt xm, yllovzm ivhloev)&#10;    gsildh XozhhMlgUlfmwVcxvkgrlm&#10;{&#10;    Xozhh&lt;?&gt; x = olzwXozhhLiMfoo(xm, ivhloev);&#10;    ru (x == mfoo)&#10;        gsild mvd XozhhMlgUlfmwVcxvkgrlm(xm);&#10;    ivgfim x;&#10;}&#10;```&#10;" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
              <Turn>
                <option name="agent" value="workspace" />
                <option name="answer" value="&lt;gsrmp&gt;&#10;好的，我现在遇到了一个报错，需要仔细分析一下。用户提供的错误信息是qzez.hjo.HJOVcxvkgrlm: Urvow 'mznv' wlvhm'g szev z wvuzfog ezofv。这意味着在插入数据库记录时，某个字段'mznv'没有提供值，而数据库表中该字段又没有设置默认值，导致插入失败。&#10;&#10;首先，我需要查看相关的实体类Zwnrm的结构，看看是否有对应数据库表中'mznv'字段的映射。可能在Zwnrm实体类中，mznv字段没有被正确设置，或者在注册的时候没有给mznv字段赋值，导致插入时该字段为空。&#10;&#10;用户提供的代码片段是ZwnrmXlmgiloovi中的注册方法。在注册时，他们检查了fhvimznv和kzhhdliw是否为空，但是没有检查mznv字段。这可能意味着注册的请求体中缺少mznv字段的值，或者Zwnrm实体类中mznv字段是必填的，但注册逻辑中没有处理它。&#10;&#10;接下来，我需要检查Zwnrm实体类的定义，看看是否有mznv字段，并且是否使用了NbYzgrh Kofh的注解，比如@GzyovUrvow，或者是否有对应的数据库列名映射。如果数据库表中mznv字段不允许为空，但实体类中没有正确设置，或者在插入时没有提供值，就会导致这个错误。&#10;&#10;此外，在注册方法中，用户调用了zwnrmHvierxv.ivtrhgviZwnrm(zwnrm)，可能在ZwnrmHvierxvRnko的ivtrhgviZwnrm方法中，直接保存了zwnrm对象，而没有设置mznv字段的值。这时候，如果前端传入的Zwnrm对象中没有包含mznv字段，或者mznv字段的值未被正确初始化，就会导致问题。&#10;&#10;可能的解决方案步骤包括：&#10;&#10;8. 确保Zwnrm实体类中的mznv字段正确映射到数据库表的对应列，并且如果该字段是必填的，在实体类上使用注解如@MlgYozmp进行验证。&#10;7. 在注册逻辑中，检查mznv字段是否为空。如果必须提供，就添加相应的验证，返回错误提示。&#10;6. 如果mznv字段不需要用户输入，而是在后台自动生成，需要在保存前设置默认值，比如zwnrm.hvgMznv(&quot;默认名称&quot;)。&#10;5. 或者，修改数据库表结构，为mznv字段设置默认值，或者允许该字段为空，但根据错误信息来看，可能该字段不允许空且有默认值。&#10;&#10;现在回到用户提供的代码片段，注册逻辑中只验证了fhvimznv和kzhhdliw是否为空，没有处理mznv字段。所以当Zwnrm对象中没有mznv值时，插入数据库时就会报错。&#10;&#10;因此，修复的方法可能是在保存Zwnrm对象之前，确保mznv字段有值。或者在注册时，前端必须传递mznv字段，并在代码中添加对该字段的非空校验。&#10;&#10;例如，在ZwnrmXlmgiloovi的注册方法中，添加对mznv字段的检查：&#10;&#10;ru (zwnrm.tvgMznv() == mfoo || zwnrm.tvgMznv().rhVnkgb()) {&#10;    ivgfim Ivhfog.viili(&quot;-8&quot;, &quot;姓名不能为空&quot;);&#10;}&#10;&#10;但需要确认用户的需求，是否mznv字段是必填的。如果是，就添加这个校验；如果不是，可能需要允许mznv为空，并调整数据库字段的设置。&#10;&#10;另一种情况是，数据库中的字段名可能不是'mznv'，而实体类中的字段名可能与数据库不对应，导致NbYzgrh Kofh无法正确映射，从而插入时没有包含该字段的值。例如，实体类中的字段名为ivzoMznv，而数据库列名为mznv，这时候需要使用@GzyovUrvow(ezofv = &quot;mznv&quot;)来指定映射。如果缺少这个注解，插入时可能不会包含该字段，导致错误。&#10;&#10;因此，检查Zwnrm实体类中的mznv字段的注解是否正确，确保数据库列名和实体类属性正确对应。&#10;&#10;综上所述，错误的原因可能是注册时Zwnrm对象缺少mznv字段的值，而数据库中的该字段不允许空且无默认值。解决方法是在注册逻辑中确保该字段有值，或者在数据库中为该字段设置默认值或允许为空。&#10;&#10;&lt;/gsrmp&gt;&#10;&#10;&#10;要解决`qzez.hjo.HJOVcxvkgrlm: Urvow 'mznv' wlvhm'g szev z wvuzfog ezofv`错误，需确保数据库插入时`mznv`字段有值。以下是修复步骤：&#10;&#10;**8. 检查Zwnrm实体类的字段映射**&#10;确保实体类中的`mznv`字段与数据库表列正确映射，并添加必要验证注解：&#10;```qzez&#10;kfyorx xozhh Zwnrm {&#10;    // 确保字段名与数据库列对应，如：&#10;    @GzyovUrvow(&quot;mznv&quot;)&#10;    @MlgYozmp(nvhhztv = &quot;姓名不能为空&quot;)&#10;    kirezgv Hgirmt mznv;&#10;    // 其他字段...&#10;}&#10;```&#10;&#10;**7. 在Xlmgiloovi中添加mznv字段的非空校验**&#10;修改注册逻辑，检查`mznv`是否为空：&#10;```qzez&#10;ru (zwnrm.tvgFhvimznv() == mfoo || zwnrm.tvgFhvimznv().rhVnkgb() &#10;    || zwnrm.tvgKzhhdliw() == mfoo || zwnrm.tvgKzhhdliw().rhVnkgb()&#10;    || zwnrm.tvgMznv() == mfoo || zwnrm.tvgMznv().rhVnkgb()) { // 新增mznv检查&#10;    ivgfim Ivhfog.viili(&quot;-8&quot;, &quot;用户名、密码和姓名不能为空&quot;);&#10;}&#10;```&#10;&#10;**6. 或设置数据库默认值（可选）**&#10;如果允许`mznv`为空或需要默认值，修改表结构：&#10;```hjo&#10;ZOGVI GZYOV zwnrm NLWRUB mznv EZIXSZI(744) WVUZFOG '默认名称' MLG MFOO;&#10;```&#10;&#10;**5. 确保注册请求包含mznv字段**&#10;前端传参需包含`mznv`，例如QHLM请求体：&#10;```qhlm&#10;{&#10;    &quot;fhvimznv&quot;: &quot;zwnrm&quot;,&#10;    &quot;kzhhdliw&quot;: &quot;876543&quot;,&#10;    &quot;mznv&quot;: &quot;管理员&quot;&#10;}&#10;```&#10;&#10;**原因分析**：错误是由于插入数据库时`mznv`字段未提供值且无默认值导致的。通过上述修改，确保该字段在注册时被正确赋值。" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list>
                    <CodeReferencesBean>
                      <option name="content" value="        ru (zwnrm.tvgFhvimznv() == mfoo || zwnrm.tvgFhvimznv().rhVnkgb() || zwnrm.tvgKzhhdliw() == mfoo || zwnrm.tvgKzhhdliw().rhVnkgb()) {&#10;            ivgfim Ivhfog.viili(&quot;-8&quot;, &quot;用户名和密码不能为空&quot;);&#10;        }&#10;        Zwnrm ivtrhgvivwZwnrm = zwnrmHvierxv.ivtrhgviZwnrm(zwnrm);&#10;        ru (ivtrhgvivwZwnrm != mfoo) {&#10;            ivgfim Ivhfog.hfxxvhh(ivtrhgvivwZwnrm);&#10;        } vohv {&#10;            // 检查是否因为用户名已存在而失败&#10;            JfvibDizkkvi&lt;Zwnrm&gt; jd = mvd JfvibDizkkvi&lt;&gt;();&#10;            jd.vj(&quot;fhvimznv&quot;, zwnrm.tvgFhvimznv());&#10;            ru (zwnrmHvierxv.tvgLmv(jd) != mfoo){&#10;                 ivgfim Ivhfog.viili(&quot;-8&quot;, &quot;用户名已存在&quot;);&#10;            }&#10;            ivgfim Ivhfog.viili(&quot;-8&quot;, &quot;注册失败&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                      <option name="end_line" value="74" />
                      <option name="filename" value="AdminController.java" />
                      <option name="language" value="JAVA" />
                      <option name="range">
                        <Range>
                          <option name="end">
                            <Position>
                              <option name="line" value="74" />
                            </Position>
                          </option>
                          <option name="start">
                            <Position>
                              <option name="line" value="57" />
                            </Position>
                          </option>
                        </Range>
                      </option>
                      <option name="start_line" value="57" />
                      <option name="type" value="editor" />
                      <option name="url" value="file:///C:/Users/30506/Desktop/WOrk/shuse/DormitoryManagementSystem-main/Dormitory_backend/src/main/java/com/example/springboot/controller/AdminController.java" />
                    </CodeReferencesBean>
                  </list>
                </option>
                <option name="command" value="fix" />
                <option name="conversationId" value="0196d80f88967cc98ebd2034182cd710" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///C:/Users/30506/Desktop/WOrk/shuse/DormitoryManagementSystem-main/Dormitory_backend/src/main/java/com/example/springboot/controller/AdminController.java" value="package com.example.springboot.controller;&#10;&#10;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;&#10;import com.example.springboot.common.Result;&#10;import com.example.springboot.common.UID;&#10;import com.example.springboot.entity.Admin;&#10;import com.example.springboot.entity.User;&#10;import com.example.springboot.service.AdminService;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.annotation.Resource;&#10;import javax.servlet.http.HttpSession;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/admin&quot;)&#10;public class AdminController {&#10;&#10;    String uid = new UID().produceUID();&#10;&#10;    @Resource&#10;    private AdminService adminService;&#10;&#10;    /**&#10;     * 管理员登录&#10;     */&#10;    @PostMapping(&quot;/login&quot;)&#10;    public Result&lt;?&gt; login(@RequestBody User user, HttpSession session) {&#10;        Object o = adminService.adminLogin(user.getUsername(), user.getPassword());&#10;        if (o != null) {&#10;            System.out.println(o);&#10;            //存入session&#10;            session.setAttribute(&quot;Identity&quot;, &quot;admin&quot;);&#10;            session.setAttribute(&quot;User&quot;, o);&#10;            return Result.success(o);&#10;        } else {&#10;            return Result.error(&quot;-1&quot;, &quot;用户名或密码错误&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 管理员信息更新&#10;     */&#10;    @PutMapping(&quot;/update&quot;)&#10;    public Result&lt;?&gt; update(@RequestBody Admin admin) {&#10;        int i = adminService.updateAdmin(admin);&#10;        if (i == 1) {&#10;            return Result.success();&#10;        } else {&#10;            return Result.error(&quot;-1&quot;, &quot;更新失败&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 管理员注册&#10;     */&#10;    @PostMapping(&quot;/register&quot;)&#10;    public Result&lt;?&gt; register(@RequestBody Admin admin) {&#10;        if (admin.getUsername() == null || admin.getUsername().isEmpty() || admin.getPassword() == null || admin.getPassword().isEmpty()) {&#10;            return Result.error(&quot;-1&quot;, &quot;用户名和密码不能为空&quot;);&#10;        }&#10;        Admin registeredAdmin = adminService.registerAdmin(admin);&#10;        if (registeredAdmin != null) {&#10;            return Result.success(registeredAdmin);&#10;        } else {&#10;            // 检查是否因为用户名已存在而失败&#10;            QueryWrapper&lt;Admin&gt; qw = new QueryWrapper&lt;&gt;();&#10;            qw.eq(&quot;username&quot;, admin.getUsername());&#10;            if (adminService.getOne(qw) != null){&#10;                 return Result.error(&quot;-1&quot;, &quot;用户名已存在&quot;);&#10;            }&#10;            return Result.error(&quot;-1&quot;, &quot;注册失败&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                  </map>
                </option>
                <option name="messageId" value="0196d82b2a577cc98ebd4957a153c370" />
                <option name="question" value="/urc 修复报错:&#10;qzez.hjo.HJOVcxvkgrlm: Urvow 'mznv' wlvhm'g szev z wvuzfog ezofv&#10;&#9;zg xln.nbhjo.xq.qwyx.vcxvkgrlmh.HJOViili.xivzgvHJOVcxvkgrlm(HJOViili.qzez:870) ~[nbhjo-xlmmvxgli-qzez-1.9.71.qzi:1.9.71]&#10;&#9;zg xln.nbhjo.xq.qwyx.vcxvkgrlmh.HJOVcxvkgrlmhNzkkrmt.gizmhozgvVcxvkgrlm(HJOVcxvkgrlmhNzkkrmt.qzez:877) ~[nbhjo-xlmmvxgli-qzez-1.9.71.qzi:1.9.71]&#10;&#9;zg xln.nbhjo.xq.qwyx.XorvmgKivkzivwHgzgvnvmg.vcvxfgvRmgvimzo(XorvmgKivkzivwHgzgvnvmg.qzez:046) ~[nbhjo-xlmmvxgli-qzez-1.9.71.qzi:1.9.71]&#10;&#9;zg xln.nbhjo.xq.qwyx.XorvmgKivkzivwHgzgvnvmg.vcvxfgv(XorvmgKivkzivwHgzgvnvmg.qzez:628) ~[nbhjo-xlmmvxgli-qzez-1.9.71.qzi:1.9.71]&#10;&#9;zg xln.azccvi.srpzir.kllo.KilcbKivkzivwHgzgvnvmg.vcvxfgv(KilcbKivkzivwHgzgvnvmg.qzez:55) ~[SrpzirXK-5.9.6.qzi:mz]&#10;&#9;zg xln.azccvi.srpzir.kllo.SrpzirKilcbKivkzivwHgzgvnvmg.vcvxfgv(SrpzirKilcbKivkzivwHgzgvnvmg.qzez) ~[SrpzirXK-5.9.6.qzi:mz]&#10;&#9;zg lit.zkzxsv.ryzgrh.vcvxfgli.hgzgvnvmg.KivkzivwHgzgvnvmgSzmwovi.fkwzgv(KivkzivwHgzgvnvmgSzmwovi.qzez:52) ~[nbyzgrh-6.4.0.qzi:6.4.0]&#10;&#9;zg lit.zkzxsv.ryzgrh.vcvxfgli.hgzgvnvmg.IlfgrmtHgzgvnvmgSzmwovi.fkwzgv(IlfgrmtHgzgvnvmgSzmwovi.qzez:25) ~[nbyzgrh-6.4.0.qzi:6.4.0]&#10;&#9;zg qzez.yzhv/qwp.rmgvimzo.ivuovxg.WrivxgNvgslwSzmwovZxxvhhli.rmelpv(WrivxgNvgslwSzmwovZxxvhhli.qzez:896) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qzez.ozmt.ivuovxg.Nvgslw.rmelpv(Nvgslw.qzez:419) ~[mz:mz]&#10;&#9;zg lit.zkzxsv.ryzgrh.koftrm.Koftrm.rmelpv(Koftrm.qzez:35) ~[nbyzgrh-6.4.0.qzi:6.4.0]&#10;&#9;zg qwp.kilcb7/qwp.kilcb7.$Kilcb10.fkwzgv(Fmpmldm Hlfixv) ~[mz:mz]&#10;&#9;zg lit.zkzxsv.ryzgrh.vcvxfgli.HrnkovVcvxfgli.wlFkwzgv(HrnkovVcvxfgli.qzez:49) ~[nbyzgrh-6.4.0.qzi:6.4.0]&#10;&#9;zg lit.zkzxsv.ryzgrh.vcvxfgli.YzhvVcvxfgli.fkwzgv(YzhvVcvxfgli.qzez:882) ~[nbyzgrh-6.4.0.qzi:6.4.0]&#10;&#9;zg lit.zkzxsv.ryzgrh.vcvxfgli.XzxsrmtVcvxfgli.fkwzgv(XzxsrmtVcvxfgli.qzez:23) ~[nbyzgrh-6.4.0.qzi:6.4.0]&#10;&#9;zg qzez.yzhv/qwp.rmgvimzo.ivuovxg.WrivxgNvgslwSzmwovZxxvhhli.rmelpv(WrivxgNvgslwSzmwovZxxvhhli.qzez:896) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qzez.ozmt.ivuovxg.Nvgslw.rmelpv(Nvgslw.qzez:419) ~[mz:mz]&#10;&#9;zg lit.zkzxsv.ryzgrh.koftrm.Rmelxzgrlm.kilxvvw(Rmelxzgrlm.qzez:50) ~[nbyzgrh-6.4.0.qzi:6.4.0]&#10;&#9;zg xln.yzlnrwlf.nbyzgrhkofh.vcgvmhrlm.koftrmh.NbyzgrhKofhRmgvixvkgli.rmgvixvkg(NbyzgrhKofhRmgvixvkgli.qzez:893) ~[nbyzgrh-kofh-vcgvmhrlm-6.4.8.qzi:6.4.8]&#10;&#9;zg lit.zkzxsv.ryzgrh.koftrm.Koftrm.rmelpv(Koftrm.qzez:37) ~[nbyzgrh-6.4.0.qzi:6.4.0]&#10;&#9;zg qwp.kilcb7/qwp.kilcb7.$Kilcb11.fkwzgv(Fmpmldm Hlfixv) ~[mz:mz]&#10;&#9;zg lit.zkzxsv.ryzgrh.hvhhrlm.wvuzfogh.WvuzfogHjoHvhhrlm.fkwzgv(WvuzfogHjoHvhhrlm.qzez:805) ~[nbyzgrh-6.4.0.qzi:6.4.0]&#10;&#9;zg lit.zkzxsv.ryzgrh.hvhhrlm.wvuzfogh.WvuzfogHjoHvhhrlm.rmhvig(WvuzfogHjoHvhhrlm.qzez:818) ~[nbyzgrh-6.4.0.qzi:6.4.0]&#10;&#9;zg qzez.yzhv/qwp.rmgvimzo.ivuovxg.WrivxgNvgslwSzmwovZxxvhhli.rmelpv(WrivxgNvgslwSzmwovZxxvhhli.qzez:896) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qzez.ozmt.ivuovxg.Nvgslw.rmelpv(Nvgslw.qzez:419) ~[mz:mz]&#10;&#9;zg lit.nbyzgrh.hkirmt.HjoHvhhrlmGvnkozgv$HjoHvhhrlmRmgvixvkgli.rmelpv(HjoHvhhrlmGvnkozgv.qzez:572) ~[nbyzgrh-hkirmt-7.9.2.qzi:7.9.2]&#10;&#9;zg qwp.kilcb7/qwp.kilcb7.$Kilcb32.rmhvig(Fmpmldm Hlfixv) ~[mz:mz]&#10;&#9;zg lit.nbyzgrh.hkirmt.HjoHvhhrlmGvnkozgv.rmhvig(HjoHvhhrlmGvnkozgv.qzez:727) ~[nbyzgrh-hkirmt-7.9.2.qzi:7.9.2]&#10;&#9;zg xln.yzlnrwlf.nbyzgrhkofh.xliv.leviirwv.NbyzgrhNzkkviNvgslw.vcvxfgv(NbyzgrhNzkkviNvgslw.qzez:40) ~[nbyzgrh-kofh-xliv-6.4.8.qzi:6.4.8]&#10;&#9;zg xln.yzlnrwlf.nbyzgrhkofh.xliv.leviirwv.NbyzgrhNzkkviKilcb$KozrmNvgslwRmelpvi.rmelpv(NbyzgrhNzkkviKilcb.qzez:851) ~[nbyzgrh-kofh-xliv-6.4.8.qzi:6.4.8]&#10;&#9;zg xln.yzlnrwlf.nbyzgrhkofh.xliv.leviirwv.NbyzgrhNzkkviKilcb.rmelpv(NbyzgrhNzkkviKilcb.qzez:10) ~[nbyzgrh-kofh-xliv-6.4.8.qzi:6.4.8]&#10;&#9;zg qwp.kilcb6/qwp.kilcb6.$Kilcb26.rmhvig(Fmpmldm Hlfixv) ~[mz:mz]&#10;&#9;zg xln.vcznkov.hkirmtyllg.hvierxv.rnko.ZwnrmHvierxvRnko.ivtrhgviZwnrm(ZwnrmHvierxvRnko.qzez:28) ~[xozhhvh/:mz]&#10;&#9;zg xln.vcznkov.hkirmtyllg.hvierxv.rnko.ZwnrmHvierxvRnko$$UzhgXozhhYbHkirmtXTORY$$534439uw.rmelpv(&lt;tvmvizgvw&gt;) ~[xozhhvh/:mz]&#10;&#9;zg lit.hkirmtuiznvdlip.xtory.kilcb.NvgslwKilcb.rmelpv(NvgslwKilcb.qzez:781) ~[hkirmt-xliv-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.zlk.uiznvdlip.XtoryZlkKilcb$WbmznrxZwerhvwRmgvixvkgli.rmgvixvkg(XtoryZlkKilcb.qzez:310) ~[hkirmt-zlk-4.6.81.qzi:4.6.81]&#10;&#9;zg xln.vcznkov.hkirmtyllg.hvierxv.rnko.ZwnrmHvierxvRnko$$VmszmxviYbHkirmtXTORY$$73yu7v48.ivtrhgviZwnrm(&lt;tvmvizgvw&gt;) ~[xozhhvh/:mz]&#10;&#9;zg xln.vcznkov.hkirmtyllg.xlmgiloovi.ZwnrmXlmgiloovi.ivtrhgvi(ZwnrmXlmgiloovi.qzez:38) ~[xozhhvh/:mz]&#10;&#9;zg qzez.yzhv/qwp.rmgvimzo.ivuovxg.WrivxgNvgslwSzmwovZxxvhhli.rmelpv(WrivxgNvgslwSzmwovZxxvhhli.qzez:896) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qzez.ozmt.ivuovxg.Nvgslw.rmelpv(Nvgslw.qzez:419) ~[mz:mz]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.nvgslw.hfkklig.RmelxzyovSzmwoviNvgslw.wlRmelpv(RmelxzyovSzmwoviNvgslw.qzez:794) ~[hkirmt-dvy-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.nvgslw.hfkklig.RmelxzyovSzmwoviNvgslw.rmelpvUliIvjfvhg(RmelxzyovSzmwoviNvgslw.qzez:849) ~[hkirmt-dvy-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.hvieovg.nex.nvgslw.zmmlgzgrlm.HvieovgRmelxzyovSzmwoviNvgslw.rmelpvZmwSzmwov(HvieovgRmelxzyovSzmwoviNvgslw.qzez:882) ~[hkirmt-dvynex-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.hvieovg.nex.nvgslw.zmmlgzgrlm.IvjfvhgNzkkrmtSzmwoviZwzkgvi.rmelpvSzmwoviNvgslw(IvjfvhgNzkkrmtSzmwoviZwzkgvi.qzez:104) ~[hkirmt-dvynex-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.hvieovg.nex.nvgslw.zmmlgzgrlm.IvjfvhgNzkkrmtSzmwoviZwzkgvi.szmwovRmgvimzo(IvjfvhgNzkkrmtSzmwoviZwzkgvi.qzez:191) ~[hkirmt-dvynex-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.hvieovg.nex.nvgslw.ZyhgizxgSzmwoviNvgslwZwzkgvi.szmwov(ZyhgizxgSzmwoviNvgslwZwzkgvi.qzez:12) ~[hkirmt-dvynex-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.hvieovg.WrhkzgxsviHvieovg.wlWrhkzgxs(WrhkzgxsviHvieovg.qzez:8932) ~[hkirmt-dvynex-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.hvieovg.WrhkzgxsviHvieovg.wlHvierxv(WrhkzgxsviHvieovg.qzez:036) ~[hkirmt-dvynex-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.hvieovg.UiznvdlipHvieovg.kilxvhhIvjfvhg(UiznvdlipHvieovg.qzez:8993) ~[hkirmt-dvynex-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.hvieovg.UiznvdlipHvieovg.wlKlhg(UiznvdlipHvieovg.qzez:090) ~[hkirmt-dvynex-4.6.81.qzi:4.6.81]&#10;&#9;zg qzezc.hvieovg.sggk.SggkHvieovg.hvierxv(SggkHvieovg.qzez:318) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:5.9.UI]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.hvieovg.UiznvdlipHvieovg.hvierxv(UiznvdlipHvieovg.qzez:116) ~[hkirmt-dvynex-4.6.81.qzi:4.6.81]&#10;&#9;zg qzezc.hvieovg.sggk.SggkHvieovg.hvierxv(SggkHvieovg.qzez:235) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:5.9.UI]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.ZkkorxzgrlmUrogviXszrm.rmgvimzoWlUrogvi(ZkkorxzgrlmUrogviXszrm.qzez:772) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.ZkkorxzgrlmUrogviXszrm.wlUrogvi(ZkkorxzgrlmUrogviXszrm.qzez:837) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.glnxzg.dvyhlxpvg.hvievi.DhUrogvi.wlUrogvi(DhUrogvi.qzez:46) ~[glnxzg-vnyvw-dvyhlxpvg-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.ZkkorxzgrlmUrogviXszrm.rmgvimzoWlUrogvi(ZkkorxzgrlmUrogviXszrm.qzez:810) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.ZkkorxzgrlmUrogviXszrm.wlUrogvi(ZkkorxzgrlmUrogviXszrm.qzez:837) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.urogvi.XlihUrogvi.wlUrogviRmgvimzo(XlihUrogvi.qzez:08) ~[hkirmt-dvy-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.urogvi.LmxvKviIvjfvhgUrogvi.wlUrogvi(LmxvKviIvjfvhgUrogvi.qzez:882) ~[hkirmt-dvy-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.ZkkorxzgrlmUrogviXszrm.rmgvimzoWlUrogvi(ZkkorxzgrlmUrogviXszrm.qzez:810) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.ZkkorxzgrlmUrogviXszrm.wlUrogvi(ZkkorxzgrlmUrogviXszrm.qzez:837) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.urogvi.IvjfvhgXlmgvcgUrogvi.wlUrogviRmgvimzo(IvjfvhgXlmgvcgUrogvi.qzez:899) ~[hkirmt-dvy-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.urogvi.LmxvKviIvjfvhgUrogvi.wlUrogvi(LmxvKviIvjfvhgUrogvi.qzez:882) ~[hkirmt-dvy-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.ZkkorxzgrlmUrogviXszrm.rmgvimzoWlUrogvi(ZkkorxzgrlmUrogviXszrm.qzez:810) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.ZkkorxzgrlmUrogviXszrm.wlUrogvi(ZkkorxzgrlmUrogviXszrm.qzez:837) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.urogvi.UlinXlmgvmgUrogvi.wlUrogviRmgvimzo(UlinXlmgvmgUrogvi.qzez:06) ~[hkirmt-dvy-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.urogvi.LmxvKviIvjfvhgUrogvi.wlUrogvi(LmxvKviIvjfvhgUrogvi.qzez:882) ~[hkirmt-dvy-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.ZkkorxzgrlmUrogviXszrm.rmgvimzoWlUrogvi(ZkkorxzgrlmUrogviXszrm.qzez:810) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.ZkkorxzgrlmUrogviXszrm.wlUrogvi(ZkkorxzgrlmUrogviXszrm.qzez:837) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.urogvi.XszizxgviVmxlwrmtUrogvi.wlUrogviRmgvimzo(XszizxgviVmxlwrmtUrogvi.qzez:798) ~[hkirmt-dvy-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.hkirmtuiznvdlip.dvy.urogvi.LmxvKviIvjfvhgUrogvi.wlUrogvi(LmxvKviIvjfvhgUrogvi.qzez:882) ~[hkirmt-dvy-4.6.81.qzi:4.6.81]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.ZkkorxzgrlmUrogviXszrm.rmgvimzoWlUrogvi(ZkkorxzgrlmUrogviXszrm.qzez:810) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.ZkkorxzgrlmUrogviXszrm.wlUrogvi(ZkkorxzgrlmUrogviXszrm.qzez:837) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.HgzmwziwDizkkviEzoev.rmelpv(HgzmwziwDizkkviEzoev.qzez:802) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.HgzmwziwXlmgvcgEzoev.rmelpv(HgzmwziwXlmgvcgEzoev.qzez:02) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.zfgsvmgrxzgli.ZfgsvmgrxzgliYzhv.rmelpv(ZfgsvmgrxzgliYzhv.qzez:458) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.HgzmwziwSlhgEzoev.rmelpv(HgzmwziwSlhgEzoev.qzez:864) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.ezoevh.ViiliIvkligEzoev.rmelpv(ViiliIvkligEzoev.qzez:07) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.xliv.HgzmwziwVmtrmvEzoev.rmelpv(HgzmwziwVmtrmvEzoev.qzez:21) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xzgzormz.xlmmvxgli.XlblgvZwzkgvi.hvierxv(XlblgvZwzkgvi.qzez:639) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xlblgv.sggk88.Sggk88Kilxvhhli.hvierxv(Sggk88Kilxvhhli.qzez:600) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xlblgv.ZyhgizxgKilxvhhliOrtsg.kilxvhh(ZyhgizxgKilxvhhliOrtsg.qzez:34) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.xlblgv.ZyhgizxgKilglxlo$XlmmvxgrlmSzmwovi.kilxvhh(ZyhgizxgKilglxlo.qzez:110) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.glnxzg.fgro.mvg.MrlVmwklrmg$HlxpvgKilxvhhli.wlIfm(MrlVmwklrmg.qzez:8256) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.glnxzg.fgro.mvg.HlxpvgKilxvhhliYzhv.ifm(HlxpvgKilxvhhliYzhv.qzez:50) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.glnxzg.fgro.gsivzwh.GsivzwKlloVcvxfgli.ifmDlipvi(GsivzwKlloVcvxfgli.qzez:8808) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.glnxzg.fgro.gsivzwh.GsivzwKlloVcvxfgli$Dlipvi.ifm(GsivzwKlloVcvxfgli.qzez:340) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg lit.zkzxsv.glnxzg.fgro.gsivzwh.GzhpGsivzw$DizkkrmtIfmmzyov.ifm(GzhpGsivzw.qzez:38) ~[glnxzg-vnyvw-xliv-0.9.39.qzi:0.9.39]&#10;&#9;zg qzez.yzhv/qzez.ozmt.Gsivzw.ifm(Gsivzw.qzez:8416) ~[mz:mz]&#10;代码上下文:&#10;```qzez&#10;@Leviirwv&#10;@UlixvRmormv&#10;kfyorx Lyqvxg rmelpv(Lyqvxg lyq, Lyqvxg[] zith) gsildh RmelxzgrlmGzitvgVcxvkgrlm {&#10;    ru (!rhHgzgrx()) {&#10;        xsvxpIvxvrevi(lyq);&#10;    }&#10;    xsvxpZitfnvmgXlfmg(kziznXlfmg, zith);&#10;    gib {&#10;        ivgfim rmelpvRnko(lyq, zith);&#10;    } xzgxs (XozhhXzhgVcxvkgrlm | DilmtNvgslwGbkvVcxvkgrlm v) {&#10;        ru (rhRoovtzoZitfnvmg(v)) {&#10;            // Ml xzfhv rm RZV gl yv xlmhrhgvmg drgs gsv low yvszerli&#10;            gsild mvd RoovtzoZitfnvmgVcxvkgrlm(&quot;zitfnvmg gbkv nrhnzgxs&quot;);&#10;        } vohv {&#10;            gsild mvd RmelxzgrlmGzitvgVcxvkgrlm(v);&#10;        }&#10;    } xzgxs (MfooKlrmgviVcxvkgrlm v) {&#10;        ru (rhRoovtzoZitfnvmg(v)) {&#10;            gsild mvd RoovtzoZitfnvmgVcxvkgrlm(v);&#10;        } vohv {&#10;            gsild mvd RmelxzgrlmGzitvgVcxvkgrlm(v);&#10;        }&#10;    } xzgxs (Gsildzyov v) {&#10;        gsild mvd RmelxzgrlmGzitvgVcxvkgrlm(v);&#10;    }&#10;}&#10;```&#10;" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
              <Turn>
                <option name="agent" value="workspace" />
                <option name="answer" value="&lt;gsrmp&gt;&#10;好的，用户遇到了一个qzez.ozmt.XozhhMlgUlfmwVcxvkgrlm: XlihXlmurtfizgrlm的错误。首先，我需要分析这个错误的原因。XlihXlmurtfizgrlm属于Hkirmt框架中处理跨域资源共享（XLIH）的类，通常位于hkirmt-dvy模块下的lit.hkirmtuiznvdlip.dvy.xlih包中。所以，这个错误可能是因为项目中缺少相关的依赖库导致的。&#10;&#10;用户提供的代码片段是ZwnrmXlmgiloovi.qzez中的登录方法，使用了@KlhgNzkkrmt和@IvjfvhgYlwb，看起来这部分代码应该没问题。错误发生在运行时，当尝试加载XlihXlmurtfizgrlm类时找不到。这可能是因为项目依赖中没有包含hkirmt-dvy模块，或者版本不兼容。&#10;&#10;接下来，我需要检查项目的构建文件，比如kln.cno或者yfrow.tizwov，确认是否引入了正确的依赖。例如，在Nzevm项目中，需要确保hkirmt-yllg-hgzigvi-dvy被正确引入，因为它会传递依赖hkirmt-dvy，而XlihXlmurtfizgrlm就在其中。&#10;&#10;用户提供的错误堆栈中提到了hkirmt-yllg-wveglloh-7.3.3.qzi，说明项目使用的是Hkirmt Yllg 7.3.3版本。这时候应该检查依赖项是否完整。如果用户的项目中没有声明hkirmt-yllg-hgzigvi-dvy依赖，或者版本不匹配，就可能导致这个类无法找到。&#10;&#10;可能的解决方案是添加或更新hkirmt-yllg-hgzigvi-dvy依赖到kln.cno中。例如：&#10;&#10;```cno&#10;&lt;wvkvmwvmxb&gt;&#10;    &lt;tilfkRw&gt;lit.hkirmtuiznvdlip.yllg&lt;/tilfkRw&gt;&#10;    &lt;zigruzxgRw&gt;hkirmt-yllg-hgzigvi-dvy&lt;/zigruzxgRw&gt;&#10;    &lt;evihrlm&gt;7.3.3&lt;/evihrlm&gt;&#10;&lt;/wvkvmwvmxb&gt;&#10;```&#10;&#10;另外，如果用户已经引入了该依赖，可能需要检查是否存在依赖冲突或者是否被其他依赖覆盖了版本。此外，检查项目的类路径是否正确，所有依赖是否正确下载，没有损坏的qzi文件。&#10;&#10;还有一种可能是，用户可能在配置XLIH时手动引用了这个类，但依赖没有正确引入。例如，可能在某个配置类中导入了XlihXlmurtfizgrlm，但没有相应的依赖支持。&#10;&#10;总结，解决这个问题的主要步骤应该是确认hkirmt-dvy依赖存在，版本正确，并且项目构建文件配置正确。用户需要检查他们的kln.cno或yfrow.tizwov文件，添加必要的依赖，并确保Nzevm或Tizwov成功下载了这些库。&#10;&#10;&lt;/gsrmp&gt;&#10;&#10;&#10;要解决`qzez.ozmt.XozhhMlgUlfmwVcxvkgrlm: XlihXlmurtfizgrlm`错误，您需要在项目中添加Hkirmt Dvy NEX的依赖，该依赖包含`XlihXlmurtfizgrlm`类。&#10;&#10;**修复步骤：**&#10;&#10;8. 打开项目的`kln.cno`文件&#10;7. 确保包含以下依赖项：&#10;&#10;```cno&#10;&lt;wvkvmwvmxb&gt;&#10;    &lt;tilfkRw&gt;lit.hkirmtuiznvdlip.yllg&lt;/tilfkRw&gt;&#10;    &lt;zigruzxgRw&gt;hkirmt-yllg-hgzigvi-dvy&lt;/zigruzxgRw&gt;&#10;    &lt;evihrlm&gt;7.3.3&lt;/evihrlm&gt; &lt;!-- 保持与您项目中的Hkirmt Yllg版本一致 --&gt;&#10;&lt;/wvkvmwvmxb&gt;&#10;```&#10;&#10;6. 保存文件并重新构建项目&#10;5. 如果使用Nzevm，执行：&#10;```yzhs&#10;nem xovzm rmhgzoo&#10;```&#10;&#10;**原因解释：**&#10;- `XlihXlmurtfizgrlm`类位于`hkirmt-dvy`模块中，该模块由`hkirmt-yllg-hgzigvi-dvy`依赖引入&#10;- 当项目缺少这个基础依赖时，任何涉及XLIH配置或Hkirmt Dvy功能的操作都会导致类找不到异常&#10;- 您使用的Hkirmt Yllg 7.3.3版本需要保持依赖版本一致&#10;&#10;请确保所有Hkirmt相关依赖的版本号统一，避免版本冲突问题。如果问题仍然存在，建议检查RWV的依赖库视图确认依赖是否被正确下载。" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list>
                    <CodeReferencesBean>
                      <option name="content" value="&#10;    /**&#10;     * 管理员登录&#10;     */&#10;    @KlhgNzkkrmt(&quot;/oltrm&quot;)&#10;    kfyorx Ivhfog&lt;?&gt; oltrm(@IvjfvhgYlwb Fhvi fhvi, SggkHvhhrlm hvhhrlm) {&#10;        Zwnrm zwnrm = zwnrmHvierxv.zwnrmOltrm(fhvi.tvgFhvimznv(), fhvi.tvgKzhhdliw());&#10;        ru (zwnrm != mfoo) {&#10;            // Hbhgvn.lfg.kirmgom(zwnrm);&#10;            hvhhrlm.hvgZggiryfgv(&quot;Rwvmgrgb&quot;, &quot;zwnrm&quot;);&#10;" />
                      <option name="end_line" value="31" />
                      <option name="filename" value="AdminController.java" />
                      <option name="language" value="JAVA" />
                      <option name="range">
                        <Range>
                          <option name="end">
                            <Position>
                              <option name="line" value="31" />
                            </Position>
                          </option>
                          <option name="start">
                            <Position>
                              <option name="line" value="21" />
                            </Position>
                          </option>
                        </Range>
                      </option>
                      <option name="start_line" value="21" />
                      <option name="type" value="editor" />
                      <option name="url" value="file:///C:/Users/30506/Desktop/WOrk/shuse/DormitoryManagementSystem-main/Dormitory_backend/src/main/java/com/example/springboot/controller/AdminController.java" />
                    </CodeReferencesBean>
                  </list>
                </option>
                <option name="command" value="fix" />
                <option name="conversationId" value="0196d80f88967cc98ebd2034182cd710" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///C:/Users/30506/Desktop/WOrk/shuse/DormitoryManagementSystem-main/Dormitory_backend/src/main/java/com/example/springboot/controller/AdminController.java" value="package com.example.springboot.controller;&#10;&#10;// import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper; // Mybatis-Plus import&#10;import com.example.springboot.common.Result;&#10;// import com.example.springboot.common.UID; // UID似乎未使用，若需要请取消注释&#10;import com.example.springboot.entity.Admin;&#10;import com.example.springboot.entity.User; // 用于登录请求体&#10;import com.example.springboot.service.AdminService;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.annotation.Resource;&#10;import javax.servlet.http.HttpSession;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/admin&quot;)&#10;public class AdminController {&#10;&#10;    // String uid = new UID().produceUID(); // UID 实例似乎未被使用&#10;&#10;    @Resource&#10;    private AdminService adminService;&#10;&#10;    /**&#10;     * 管理员登录&#10;     */&#10;    @PostMapping(&quot;/login&quot;)&#10;    public Result&lt;?&gt; login(@RequestBody User user, HttpSession session) {&#10;        Admin admin = adminService.adminLogin(user.getUsername(), user.getPassword());&#10;        if (admin != null) {&#10;            // System.out.println(admin);&#10;            session.setAttribute(&quot;Identity&quot;, &quot;admin&quot;);&#10;            session.setAttribute(&quot;User&quot;, admin);&#10;            return Result.success(admin);&#10;        } else {&#10;            return Result.error(&quot;-1&quot;, &quot;用户名或密码错误&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 管理员信息更新&#10;     */&#10;    @PutMapping(&quot;/update&quot;)&#10;    public Result&lt;?&gt; update(@RequestBody Admin admin) {&#10;        // 确保username不为空，因为它是更新的依据&#10;        if (admin.getUsername() == null || admin.getUsername().isEmpty()){&#10;            return Result.error(&quot;-1&quot;, &quot;更新目标用户名不能为空&quot;);&#10;        }&#10;        int i = adminService.updateAdmin(admin);&#10;        if (i &gt; 0) { // 通常影响行数大于0即为成功&#10;            return Result.success();&#10;        } else {&#10;            // 可以更细致地判断是未找到记录还是其他更新失败原因&#10;            return Result.error(&quot;-1&quot;, &quot;更新失败或用户不存在&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 管理员注册&#10;     */&#10;    @PostMapping(&quot;/register&quot;)&#10;    public Result&lt;?&gt; register(@RequestBody Admin admin) {&#10;        if (admin.getUsername() == null || admin.getUsername().isEmpty() || &#10;            admin.getPassword() == null || admin.getPassword().isEmpty()) {&#10;            return Result.error(&quot;-1&quot;, &quot;用户名和密码不能为空&quot;);&#10;        }&#10;        &#10;        // 检查用户名是否已存在，替换原先的 QueryWrapper 逻辑&#10;        if (adminService.getAdminByUsername(admin.getUsername()) != null) {&#10;            return Result.error(&quot;-1&quot;, &quot;用户名已存在&quot;);&#10;        }&#10;        &#10;        Admin registeredAdmin = adminService.registerAdmin(admin);&#10;        if (registeredAdmin != null) {&#10;            return Result.success(registeredAdmin);&#10;        } else {&#10;            // 此处通常意味着插入失败，但查重已在前一步完成&#10;            return Result.error(&quot;-1&quot;, &quot;注册失败，请稍后再试&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                  </map>
                </option>
                <option name="messageId" value="0196d9f5eb977cc98ebd54106c3ef58d" />
                <option name="question" value="/urc 修复报错:&#10;qzez.ozmt.XozhhMlgUlfmwVcxvkgrlm: XlihXlmurtfizgrlm&#10;&#9;zg qzez.yzhv/qwp.rmgvimzo.olzwvi.YfrogrmXozhhOlzwvi.olzwXozhh(YfrogrmXozhhOlzwvi.qzez:358) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qwp.rmgvimzo.olzwvi.XozhhOlzwvih$ZkkXozhhOlzwvi.olzwXozhh(XozhhOlzwvih.qzez:811) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qzez.ozmt.XozhhOlzwvi.olzwXozhh(XozhhOlzwvi.qzez:473) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qzez.ozmt.Xozhh.uliMznv9(Mzgrev Nvgslw) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qzez.ozmt.Xozhh.uliMznv(Xozhh.qzez:465) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qzez.ozmt.Xozhh.uliMznv(Xozhh.qzez:486) ~[mz:mz]&#10;&#9;zg lit.hkirmtuiznvdlip.yllg.wveglloh.ivhgzig.xozhholzwvi.IvhgzigXozhhOlzwvi.olzwXozhh(IvhgzigXozhhOlzwvi.qzez:854) ~[hkirmt-yllg-wveglloh-7.3.3.qzi:7.3.3]&#10;&#9;zg qzez.yzhv/qzez.ozmt.XozhhOlzwvi.olzwXozhh(XozhhOlzwvi.qzez:473) ~[mz:mz]&#10;&#9;... 71 xlnnlm uiznvh lnrggvw&#10;代码上下文:&#10;```qzez&#10;/**&#10; * Olzwh gsv xozhh drgs gsv hkvxrurvw yrmzib mznv.&#10; */&#10;@Leviirwv&#10;kilgvxgvw Xozhh&lt;?&gt; olzwXozhh(Hgirmt xm, yllovzm ivhloev)&#10;    gsildh XozhhMlgUlfmwVcxvkgrlm&#10;{&#10;    Xozhh&lt;?&gt; x = olzwXozhhLiMfoo(xm, ivhloev);&#10;    ru (x == mfoo)&#10;        gsild mvd XozhhMlgUlfmwVcxvkgrlm(xm);&#10;    ivgfim x;&#10;}&#10;```&#10;" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
              <Turn>
                <option name="agent" value="workspace" />
                <option name="answer" value="&lt;gsrmp&gt;&#10;好的，我现在遇到了一个报错：qzez.ozmt.XozhhMlgUlfmwVcxvkgrlm: XlihXlmurtfizgrlm。首先，我需要理解这个错误的原因。XlihXlmurtfizgrlm是Hkirmt框架中处理跨域资源共享（XLIH）的类，属于lit.hkirmtuiznvdlip.dvy.xlih包。这个错误说明在运行时找不到这个类，可能是缺少相关的依赖或者配置问题。&#10;&#10;首先，我应该检查项目的依赖管理文件，比如kln.cno或者yfrow.tizwov，确保引入了Hkirmt Dvy模块，因为XlihXlmurtfizgrlm属于Hkirmt Dvy的一部分。用户提供的代码片段中没有提到依赖配置，所以可能问题出在这里。如果使用的是Nzevm，需要确认是否有hkirmt-yllg-hgzigvi-dvy的依赖。&#10;&#10;接下来，可能的问题是没有正确配置XLIH。在Hkirmt Yllg应用中，通常需要在配置类中添加XLIH的全局配置，或者使用注解@XilhhLirtrm在控制器上。不过，这个错误是类找不到，而不是配置错误，所以更可能是依赖缺失。&#10;&#10;另外，检查Hkirmt Yllg的版本是否过旧，导致XlihXlmurtfizgrlm不存在。查看项目的Hkirmt Yllg版本，如果版本低于7.9，可能这个类的位置不同或者不存在。用户提供的堆栈信息中有hkirmt-yllg-wveglloh-7.3.3.qzi，说明使用的是7.3.3版本，这个版本下XlihXlmurtfizgrlm应该是存在的，所以可能依赖没有正确引入。&#10;&#10;所以，解决步骤应该是：&#10;&#10;8. 检查kln.cno中是否有hkirmt-yllg-hgzigvi-dvy依赖。&#10;7. 如果没有，添加该依赖并重新构建项目。&#10;6. 如果依赖存在，可能依赖下载不完整，可以尝试清理Nzevm仓库并重新下载。&#10;&#10;可能的错误原因是没有正确导入Hkirmt Dvy的依赖，导致XlihXlmurtfizgrlm类缺失。添加正确的依赖应该可以解决这个问题。&#10;&#10;&lt;/gsrmp&gt;&#10;&#10;&#10;要解决`qzez.ozmt.XozhhMlgUlfmwVcxvkgrlm: XlihXlmurtfizgrlm`错误，需要确保项目中包含Hkirmt Dvy的依赖。这个类属于`hkirmt-dvy`模块，请按以下步骤操作：&#10;&#10;8. **检查Nzevm依赖**  &#10;在`kln.cno`文件中添加或确认存在以下依赖：&#10;&#10;```cno&#10;&lt;wvkvmwvmxb&gt;&#10;    &lt;tilfkRw&gt;lit.hkirmtuiznvdlip.yllg&lt;/tilfkRw&gt;&#10;    &lt;zigruzxgRw&gt;hkirmt-yllg-hgzigvi-dvy&lt;/zigruzxgRw&gt;&#10;    &lt;evihrlm&gt;7.3.3&lt;/evihrlm&gt; &lt;!-- 与你的Hkirmt Yllg版本一致 --&gt;&#10;&lt;/wvkvmwvmxb&gt;&#10;```&#10;&#10;7. **执行Nzevm更新**  &#10;在RWV中重新加载Nzevm依赖（一般点击Nzevm面板的刷新按钮），确保依赖正确下载。&#10;&#10;6. **清理构建**  &#10;执行`nem xovzm rmhgzoo`命令清理并重新构建项目。&#10;&#10;该错误是由于缺少`hkirmt-dvy`模块导致的类找不到异常。添加正确的Hkirmt Dvy依赖后，XLIH相关类会被正常加载。" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list>
                    <CodeReferencesBean>
                      <option name="content" value="&#10;    /**&#10;     * 管理员登录&#10;     */&#10;    @KlhgNzkkrmt(&quot;/oltrm&quot;)&#10;    kfyorx Ivhfog&lt;?&gt; oltrm(@IvjfvhgYlwb Fhvi fhvi, SggkHvhhrlm hvhhrlm) {&#10;        Zwnrm zwnrm = zwnrmHvierxv.zwnrmOltrm(fhvi.tvgFhvimznv(), fhvi.tvgKzhhdliw());&#10;        ru (zwnrm != mfoo) {&#10;            // Hbhgvn.lfg.kirmgom(zwnrm);&#10;            hvhhrlm.hvgZggiryfgv(&quot;Rwvmgrgb&quot;, &quot;zwnrm&quot;);&#10;            hvhhrlm.hvgZggiryfgv(&quot;Fhvi&quot;, zwnrm);&#10;            ivgfim Ivhfog.hfxxvhh(zwnrm);&#10;        } vohv {&#10;            ivgfim Ivhfog.viili(&quot;-8&quot;, &quot;用户名或密码错误&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 管理员信息更新&#10;     */&#10;    @KfgNzkkrmt(&quot;/fkwzgv&quot;)&#10;    kfyorx Ivhfog&lt;?&gt; fkwzgv(@IvjfvhgYlwb Zwnrm zwnrm) {&#10;" />
                      <option name="end_line" value="43" />
                      <option name="filename" value="AdminController.java" />
                      <option name="language" value="JAVA" />
                      <option name="range">
                        <Range>
                          <option name="end">
                            <Position>
                              <option name="line" value="43" />
                            </Position>
                          </option>
                          <option name="start">
                            <Position>
                              <option name="line" value="21" />
                            </Position>
                          </option>
                        </Range>
                      </option>
                      <option name="start_line" value="21" />
                      <option name="type" value="editor" />
                      <option name="url" value="file:///C:/Users/30506/Desktop/WOrk/shuse/DormitoryManagementSystem-main/Dormitory_backend/src/main/java/com/example/springboot/controller/AdminController.java" />
                    </CodeReferencesBean>
                  </list>
                </option>
                <option name="command" value="fix" />
                <option name="conversationId" value="0196d80f88967cc98ebd2034182cd710" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///C:/Users/30506/Desktop/WOrk/shuse/DormitoryManagementSystem-main/Dormitory_backend/src/main/java/com/example/springboot/controller/AdminController.java" value="package com.example.springboot.controller;&#10;&#10;// import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper; // Mybatis-Plus import&#10;import com.example.springboot.common.Result;&#10;// import com.example.springboot.common.UID; // UID似乎未使用，若需要请取消注释&#10;import com.example.springboot.entity.Admin;&#10;import com.example.springboot.entity.User; // 用于登录请求体&#10;import com.example.springboot.service.AdminService;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.annotation.Resource;&#10;import javax.servlet.http.HttpSession;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/admin&quot;)&#10;public class AdminController {&#10;&#10;    // String uid = new UID().produceUID(); // UID 实例似乎未被使用&#10;&#10;    @Resource&#10;    private AdminService adminService;&#10;&#10;    /**&#10;     * 管理员登录&#10;     */&#10;    @PostMapping(&quot;/login&quot;)&#10;    public Result&lt;?&gt; login(@RequestBody User user, HttpSession session) {&#10;        Admin admin = adminService.adminLogin(user.getUsername(), user.getPassword());&#10;        if (admin != null) {&#10;            // System.out.println(admin);&#10;            session.setAttribute(&quot;Identity&quot;, &quot;admin&quot;);&#10;            session.setAttribute(&quot;User&quot;, admin);&#10;            return Result.success(admin);&#10;        } else {&#10;            return Result.error(&quot;-1&quot;, &quot;用户名或密码错误&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 管理员信息更新&#10;     */&#10;    @PutMapping(&quot;/update&quot;)&#10;    public Result&lt;?&gt; update(@RequestBody Admin admin) {&#10;        // 确保username不为空，因为它是更新的依据&#10;        if (admin.getUsername() == null || admin.getUsername().isEmpty()){&#10;            return Result.error(&quot;-1&quot;, &quot;更新目标用户名不能为空&quot;);&#10;        }&#10;        int i = adminService.updateAdmin(admin);&#10;        if (i &gt; 0) { // 通常影响行数大于0即为成功&#10;            return Result.success();&#10;        } else {&#10;            // 可以更细致地判断是未找到记录还是其他更新失败原因&#10;            return Result.error(&quot;-1&quot;, &quot;更新失败或用户不存在&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 管理员注册&#10;     */&#10;    @PostMapping(&quot;/register&quot;)&#10;    public Result&lt;?&gt; register(@RequestBody Admin admin) {&#10;        if (admin.getUsername() == null || admin.getUsername().isEmpty() || &#10;            admin.getPassword() == null || admin.getPassword().isEmpty()) {&#10;            return Result.error(&quot;-1&quot;, &quot;用户名和密码不能为空&quot;);&#10;        }&#10;        &#10;        // 检查用户名是否已存在，替换原先的 QueryWrapper 逻辑&#10;        if (adminService.getAdminByUsername(admin.getUsername()) != null) {&#10;            return Result.error(&quot;-1&quot;, &quot;用户名已存在&quot;);&#10;        }&#10;        &#10;        Admin registeredAdmin = adminService.registerAdmin(admin);&#10;        if (registeredAdmin != null) {&#10;            return Result.success(registeredAdmin);&#10;        } else {&#10;            // 此处通常意味着插入失败，但查重已在前一步完成&#10;            return Result.error(&quot;-1&quot;, &quot;注册失败，请稍后再试&quot;);&#10;        }&#10;    }&#10;}&#10;" />
                  </map>
                </option>
                <option name="messageId" value="0196d9f741f67cc98ebd59239664b5ea" />
                <option name="question" value="/urc 修复报错:&#10;qzez.ozmt.XozhhMlgUlfmwVcxvkgrlm: XlihXlmurtfizgrlm&#10;&#9;zg qzez.yzhv/qwp.rmgvimzo.olzwvi.YfrogrmXozhhOlzwvi.olzwXozhh(YfrogrmXozhhOlzwvi.qzez:358) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qwp.rmgvimzo.olzwvi.XozhhOlzwvih$ZkkXozhhOlzwvi.olzwXozhh(XozhhOlzwvih.qzez:811) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qzez.ozmt.XozhhOlzwvi.olzwXozhh(XozhhOlzwvi.qzez:473) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qzez.ozmt.Xozhh.uliMznv9(Mzgrev Nvgslw) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qzez.ozmt.Xozhh.uliMznv(Xozhh.qzez:465) ~[mz:mz]&#10;&#9;zg qzez.yzhv/qzez.ozmt.Xozhh.uliMznv(Xozhh.qzez:486) ~[mz:mz]&#10;&#9;zg lit.hkirmtuiznvdlip.yllg.wveglloh.ivhgzig.xozhholzwvi.IvhgzigXozhhOlzwvi.olzwXozhh(IvhgzigXozhhOlzwvi.qzez:854) ~[hkirmt-yllg-wveglloh-7.3.3.qzi:7.3.3]&#10;&#9;zg qzez.yzhv/qzez.ozmt.XozhhOlzwvi.olzwXozhh(XozhhOlzwvi.qzez:473) ~[mz:mz]&#10;&#9;... 71 xlnnlm uiznvh lnrggvw&#10;代码上下文:&#10;```qzez&#10;/**&#10; * Olzwh gsv xozhh drgs gsv hkvxrurvw yrmzib mznv.&#10; */&#10;@Leviirwv&#10;kilgvxgvw Xozhh&lt;?&gt; olzwXozhh(Hgirmt xm, yllovzm ivhloev)&#10;    gsildh XozhhMlgUlfmwVcxvkgrlm&#10;{&#10;    Xozhh&lt;?&gt; x = olzwXozhhLiMfoo(xm, ivhloev);&#10;    ru (x == mfoo)&#10;        gsild mvd XozhhMlgUlfmwVcxvkgrlm(xm);&#10;    ivgfim x;&#10;}&#10;```&#10;" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
            </list>
          </option>
          <option name="updateTime" value="1747413606632" />
        </Conversation>
        <Conversation>
          <option name="createTime" value="1747381342627" />
          <option name="id" value="0196d80b51a3783e9ddf88f680e36a4b" />
          <option name="title" value="新对话 2025年5月16日 15:42:22" />
          <option name="updateTime" value="1747381342627" />
        </Conversation>
        <Conversation>
          <option name="createTime" value="1746948657885" />
          <option name="id" value="0196be4112dd78048e61bb38df50b1ca" />
          <option name="title" value="新对话 2025年5月11日 15:30:57" />
          <option name="updateTime" value="1746948657885" />
        </Conversation>
        <Conversation>
          <option name="createTime" value="1746948440017" />
          <option name="id" value="0196be3dbfd17d269cd01390ddd9a61c" />
          <option name="title" value="新对话 2025年5月11日 15:27:20" />
          <option name="updateTime" value="1746948440017" />
        </Conversation>
      </list>
    </option>
  </component>
</project>